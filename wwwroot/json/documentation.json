{
    "0": {
        "fuction_name": "ActivateClientExploder",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "exploder id": "id of exploder to activate"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Activates a client side exploderThis is sent as a reliable command, and will not work with killcam or demos.",
        "example": "ActivateClientExploder( 101 )"
    },
    "1": {
        "fuction_name": "ActivateClientRadiantExploder",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "exploder id": "string id of exploder to activate"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Activates a client side radiant exploder",
        "example": "ActivateClientRadiantExploder( \"light_switch\" )"
    },
    "2": {
        "fuction_name": "ActorIKEnabled",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Determines whether this actor can use IK functions. Returns true if IK is available, otherwise false.",
        "example": "if (guy ActorIKEnabled()) ..."
    },
    "3": {
        "fuction_name": "AddAwarenessIndicator",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "pos": "awareness location",
            "material": "awareness material"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Draw an awareness indicator",
        "example": "AddAwarenessIndicator(ai.origin, \"hit_material_green\" )"
    },
    "4": {
        "fuction_name": "AddBonusCardStat",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "bonuscard": "Bonus Card define from _bonuscards.gsh",
            "statname": "The name of the stat you wish to set",
            "statincrease": "The amount you would like to increase the stat",
            "currentclassnum": "The loadout the player is using"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the indicated stat for that bonus card",
        "example": "self AddBonusCardStat( BONUSCARD_OVERKILL, \"kills\", 1, self.class_num )"
    },
    "5": {
        "fuction_name": "AddDemoBookmark",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "type": "the type of bookmark",
            "time": "the time of recording the bookmark",
            "client1": "the client related to the bookmark",
            "client2": "other client which is associated with the bookmark",
            "scoreEventPriority": "",
            "entityNumber": "The entity number",
            "eType": "Entity type",
            "birthTime": "Birth Time",
            "overrideEntityCamera": "Whether to override Entity Camera"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "adds the information to the demo bookmarking system",
        "example": "AddDemoBookmark( bookmark_string, gettime(), self GetEntityNumber(), 255, 0, inflictorEntNum, inflictorEntType, inflictorBirthTime, false, self.grenade_multiattack_ent GetEntityNumber() )"
    },
    "6": {
        "fuction_name": "AddEntityInfluencer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "valid spawn influencer preset name.",
            "entity": "Attached to entity.  Goes away when entity is deleted. Unless a time is set.",
            "team mask": "teams that this influencer will affect"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Adds a new influencer of <name> attached to <entity>",
        "example": "influencer_id = AddEntityInfluencer( name, player, allies_mask )"
    },
    "7": {
        "fuction_name": "AddFriendlyScrambler",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "x": "X coord (float)",
            "y": "Y coord (float)",
            "handle": "will be used to remove the scrambler (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Adds new friendly scrambler to the compass",
        "example": "player AddFriendlyScrambler( scrambler.origin[0], scrambler.origin[1], scrambler.handle )"
    },
    "8": {
        "fuction_name": "AddInfluencer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "valid spawn influencer preset name.",
            "origin": "center point of the influencer",
            "team mask": "teams that this influencer will affect"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Adds a new influencer of <name> at <origin>",
        "example": "influencer_id = AddInfluencer( name, origin, allies_mask )"
    },
    "9": {
        "fuction_name": "AddOrientedInfluencer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "valid spawn influencer preset name.",
            "origin": "center point of the influencer",
            "angles": "angles of entity",
            "team mask": "teams that this influencer will affect"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Adds a new influencer of <name> at <origin> and <angles>",
        "example": "influencer_id = AddOrientedInfluencer( name, origin, angles, allies_mask )"
    },
    "10": {
        "fuction_name": "AddSensorGrenadeArea",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "position": "origin",
            "handle": "will be used to remove the sensor"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Adds new sensor grenade radius indicator to the compass",
        "example": "player AddSensorGrenadeArea( sensor.origin, sensor.handle )"
    },
    "11": {
        "fuction_name": "AddSpawnPoints",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "team": "The team"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Adds spawnpoints to the spawn system",
        "example": "AddSpawnPoints( \"allies\", \"mp_tdm_spawn\" )"
    },
    "12": {
        "fuction_name": "AddTestClient",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Adds a test client to the map and returns a reference to that client.",
        "example": "ent[i] = AddTestClient()"
    },
    "13": {
        "fuction_name": "AddToInterestPool",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "value": "Amount the event adds to the pool. (integer)",
            "priority": "How important is the event. (integer)",
            "lifespan": "Time the event stays in the pool. (float)",
            "point of interest": "Position the AI will investigate. (vector3)",
            "originator": "Entity that caused the event."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Add a script event to the sentient's interest pool.",
        "example": "point = self AddToInterestPool( 500, 10, 5, ai.origin, ai )"
    },
    "14": {
        "fuction_name": "AddZombieBoxWeapon",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weapon": "The weapon to add",
            "weaponModelName": "The model name of the weapon",
            "isDualWield": "True if the weapon is dual wield, false otherwise"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Adds a zombie box weapon",
        "example": "AddZombieBoxWeapon( weapon, weapon.worldModel, weapon.isDualWield )"
    },
    "15": {
        "fuction_name": "AimAtEntityIK",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set this actor to aim at the specified entity. Call this function without any entity specified to turn it off.",
        "example": "guy AimAtEntityIK( otherguy )"
    },
    "16": {
        "fuction_name": "AimAtPosIK",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set this actor to aim at the specified position. Call this function without any position specified to turn it off.",
        "example": "guy AimAtPosIK( pos )"
    },
    "17": {
        "fuction_name": "AimingAtFriendly",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if localclient 0 has crosshairs on friendly",
        "example": "isFriend = AimingAtFriendly()"
    },
    "18": {
        "fuction_name": "AllClientsPrint",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": "the string to print"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Cause all clients to print the localized version of this string.",
        "example": "AllClientsPrint( \"Game Complete\" )"
    },
    "19": {
        "fuction_name": "AllocateSoundRandoms",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "num randoms": "number of randoms"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Allocate a pool of random sounds",
        "example": "AllocateSoundRandoms(randoms.size - nScriptThreadedRandoms)"
    },
    "20": {
        "fuction_name": "AllowActionSlotInput",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the controller you to enable the action slots"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "always allow action slot input",
        "example": "AllowActionSlotInput(localclientnum)"
    },
    "21": {
        "fuction_name": "AllowedStances",
        "return_type": "void",
        "called_by": "<actor_or_player>",
        "mandatory_parameters": {
            "stance": "(string) A stance, can be 'prone', 'crouch', 'stand'. Any number of stances may be added."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the list of the actor's allowed stances.",
        "example": "self AllowedStances( \"crouch\", \"prone\" )"
    },
    "22": {
        "fuction_name": "AllowRoundAnimation",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "flag": "1 to allow, 0 to disallow"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "sets the allow round animation flag to enabled or disabled",
        "example": "AllowRoundAnimation( 1 )"
    },
    "23": {
        "fuction_name": "AllowScoreboard",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the controller you to enable the action slots"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "allow scoreboard or not",
        "example": "AllowScoreboard(localclientnum)"
    },
    "24": {
        "fuction_name": "AllowTacticalInsertion",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "allow": "true or false"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "If false, disallows tactical insertions in the bounding area of this entity. Allows tactical insertions otherwise",
        "example": "my_trigger AllowTacticalInsertion( false )"
    },
    "25": {
        "fuction_name": "AllWeaponAttachmentsUnlocked",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weapon": "weapon"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Are all the weapon attachments unlocked for this weapon?",
        "example": "player AllWeaponAttachmentsUnlocked( weapon )"
    },
    "26": {
        "fuction_name": "AnimHasNotetrack",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "animation": "an animation",
            "note track": "a constant string with the name of the note track"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "queries the given animation for a note track",
        "example": "if ( IsDefined( facialanim ) && AnimHasNotetrack( facialanim, \"dialogue\" ) ) ..."
    },
    "27": {
        "fuction_name": "AnimMappingSearch",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Searches animation mapping table to return a animation name when given a animation mapping alias name.",
        "example": "self AnimMappingSearch(\"anim_arrive_cover_left_crouch\")"
    },
    "28": {
        "fuction_name": "AnimRelative",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "notify": "The notify to send",
            "origin": "The starting position of the anim script",
            "angles": "The starting angle of the anim script",
            "animation": "The animation"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Runs an animscript on an entity.",
        "example": "driver AnimRelative( \"germantruck_driver_closedoor\", org , angles, driver.closedooranim )"
    },
    "29": {
        "fuction_name": "AnimScripted",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "notify": "The notify to send",
            "origin": "The starting position of the anim script",
            "angles": "The starting angle of the anim script",
            "animation": "The animation"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Runs an animscript on an entity.",
        "example": "driver AnimScripted( \"germantruck_driver_closedoor\", org , angles, driver.closedooranim )"
    },
    "30": {
        "fuction_name": "Announcement",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": "The announcement.",
            "duration": "How long, in seconds, to display the announcement."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sends an announcement to all clients.",
        "example": null
    },
    "31": {
        "fuction_name": "ApplyBallisticTarget",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "targetPos": "The position to launch the vehicle towards"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Launch a vehicle with just enough force at a target.",
        "example": "dropRaps ApplyBallisticTarget( (50,50,10) )"
    },
    "32": {
        "fuction_name": "AreAllMissionsAtScore",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "score": "A score that all missions must be at to return true (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if all missions are at the score specified",
        "example": "is_score_achieved = self AreAllMissionsAtScore( 10000 )"
    },
    "33": {
        "fuction_name": "AreMeshesStreamed",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if this entity's meshes are streamed in",
        "example": "thing areMeshesStreamed()"
    },
    "34": {
        "fuction_name": "arenagetcurrentseason",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the current arena season",
        "example": "ArenaGetCurrentSeason()"
    },
    "35": {
        "fuction_name": "ArenaGetSlot",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the current arena slot",
        "example": "ArenaGetSlot()"
    },
    "36": {
        "fuction_name": "AreTexturesLoaded",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check to see if start-of-level textures are loaded - if they're not, the streamer forces a black screen.",
        "example": "while( !areTexturesLoaded() ) { wait(0.05); }"
    },
    "37": {
        "fuction_name": "AreTexturesStreamed",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if this entity's textures are streamed in",
        "example": "thing areTexturesStreamed()"
    },
    "38": {
        "fuction_name": "ArraySort",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "array": "array to sort",
            "origin": "the origin from which to compare"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns a sorted array of entities by closest or farthest distance from <origin>",
        "example": null
    },
    "39": {
        "fuction_name": "ArraySortClosest",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "array": "array to sort",
            "origin": "the origin from which to compare"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns a sorted array of entities by closest from <origin>",
        "example": null
    },
    "40": {
        "fuction_name": "ArtilleryIconLocation",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "Position of icon",
            "teamNum": "Team number",
            "isActive": "Whether the icon is active or not"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the artillery icon location",
        "example": "ArtilleryIconLocation( self.origin, 1, true )"
    },
    "41": {
        "fuction_name": "ASMSetAnimationRate",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "rate": "(float)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "change the delta animation rate for the entity using ASM.",
        "example": "self ASMSetAnimationRate( 0.3 )"
    },
    "42": {
        "fuction_name": "Attach",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "modelname": "The model name to attach (string)."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Attach a model to an entity.",
        "example": "self Attach( \"panzerflak_ammo\", \"tag_weapon_left\" )"
    },
    "43": {
        "fuction_name": "AttachShieldModel",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "modelname": "The model name to attach (string)."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Attach a shield model to a player.",
        "example": "self AttachShieldModel( \"weapon_riot_shield\", \"tag_weapon_left\" )"
    },
    "44": {
        "fuction_name": "AttachWeapon",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "weapon": "The weapon to attach."
        },
        "optional_parameters": {
            "renderoptions": "The render options for the weapon",
            "acvi": "The attachment cosmetic variations"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Attaches a weapon to the entity.",
        "example": "self AttachWeapon( weapon )"
    },
    "45": {
        "fuction_name": "BadPlace_Box",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "The name of the bad place. If name is not \"\", the bad place can be moved or deleted by using the unique name.",
            "duration": "If duration > 0, the bad place will automatically delete itself after this time. If duration <= 0, the bad place must have a name and will last until manually deleted.",
            "origin": "The origin of the box.",
            "halfSize": "The halfSize of the box.",
            "team": "You must specify at least one team for which this place is bad, but can give several.  The allowed teams are 'axis', 'allies', and 'neutral'."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates a bad place box. AI will flee this position if they can, and will not go into it if they can avoid it.",
        "example": "BadPlace_Box( \"moody\", -1, level.moodyfall_mn, level.moodyfall_halfSize, \"neutral\" )"
    },
    "46": {
        "fuction_name": "BadPlace_Cylinder",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "The name of the bad place. If name is not \"\", the bad place can be moved or deleted by using the unique name.",
            "duration": "If duration > 0, the bad place will automatically delete itself after this time. If duration <= 0, the bad place must have a name and will last until manually deleted.",
            "origin": "The origin of the cylinder.",
            "radius": "The radius of the cylinder.",
            "height": "The height of the cylinder.",
            "team": "You must specify at least one team for which this place is bad, but can give several.  The allowed teams are 'axis', 'allies', and 'neutral'."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates a bad place cylinder. AI will flee this position if they can, and will not go into it if they can avoid it.",
        "example": "BadPlace_Cylinder( \"moody\", -1, level.moodyfall_mn, level.moodyfall_radius, \"neutral\" )"
    },
    "47": {
        "fuction_name": "BadPlace_Delete",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "bad place identifier": "The bad place to delete"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Deletes a bad place. It is okay to delete a bad place name that doesn't exist. It is not okay to delete the special name \"\".",
        "example": "BadPlace_Delete( \"bpFlak1\" )"
    },
    "48": {
        "fuction_name": "BallSetTarget",
        "return_type": "void",
        "called_by": "<ball>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the target of the ball to the given entity, and resets if no entity is specified.",
        "example": "self BallSetTarget( player )"
    },
    "49": {
        "fuction_name": "Ban",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "clientnum": "The client number of the player to ban."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Bans the specified player.",
        "example": "Ban( 2 )"
    },
    "50": {
        "fuction_name": "BeamTrace",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "start_pos": "(point) The start position for the trace.",
            "end_pos": "(point) The end position for the trace.",
            "hit_characters": "(bool) Tell the trace to hit characters or not.",
            "ignore_ent": "(entity) Entity to ingore for trace."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Performs a bullet trace between two points and returns an array of information about the trace result.",
        "example": "a_trace = BeamTrace( org1, org2 )"
    },
    "51": {
        "fuction_name": "BloodImpact",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "value": "Has to be one of: \"none\", \"hero\" or \"normal\""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the blood impact type on the character",
        "example": "guy BloodImpact ( \"none\" )"
    },
    "52": {
        "fuction_name": "BlurAndTint_FX",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "localClientNum": "Client number of the player"
        },
        "optional_parameters": {
            "level": "0 - 1"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Plays RadioActive/Fire FX",
        "example": "entity BlurAndTint_FX(0, true, 1)"
    },
    "53": {
        "fuction_name": "Bobbing",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "direction vector": "The direction of the bobbing",
            "amplitude": "The amount of the bobbing in units",
            "period": "The period of the bobbing in seconds"
        },
        "optional_parameters": {
            "phase": "The phase offset of the bobbing"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Causes a script entity to bob around its origin, along a given vector dir",
        "example": "self Bobbing( directionVir, 0.3, 0.4, 0.0f )"
    },
    "54": {
        "fuction_name": "BonusCardActiveCount",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "classnum": "The current class num of the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns how many bonus cards are active, cannot be called on a larry",
        "example": "cardCount = self BonusCardActiveCount( self.class_num )"
    },
    "55": {
        "fuction_name": "BoundsWouldTelefrag",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "mins": "Mins of bounding box",
            "maxs": "Maxs of bounding box"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the passed in bounding box would telefrag a player if another player was spawned there.",
        "example": "if ( BoundsWouldTelefrag( vehicle GetAbsMins(), vehicle GetAbsmaxs() ) ) ..."
    },
    "56": {
        "fuction_name": "BulletSpread",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start": "The bullet starting point",
            "end": "The bullet ending point",
            "spread": "Amount of spread"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "uses spread to return a new end position",
        "example": "endpos = BulletSpread( self.origin, target.origin, 1.0 )"
    },
    "57": {
        "fuction_name": "BulletTrace",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "start_pos": "(point) The start position for the trace.",
            "end_pos": "(point) The end position for the trace.",
            "hit_characters": "(bool) Tell the trace to hit characters or not.",
            "ignore_ent": "(entity) Entity to ingore for trace."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Performs a bullet trace between two points and returns an array of information about the trace result.",
        "example": "a_trace = BulletTrace( org1, org2 )"
    },
    "58": {
        "fuction_name": "BulletTracePassed",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start": "The bullet start point",
            "end": "The bullet end point",
            "hit characters": "An entity to ignore",
            "ignore entity": "An entity to ignore"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Allows script to do a bullet point trace with ( MASK_SHOT & ~CONTENTS_SKY ) returns true if the trace does not hit anything",
        "example": "passed = BulletTracePassed( grenade.origin, self.origin + (0,0,TROPHY_TRACE_Z), false, self )"
    },
    "59": {
        "fuction_name": "CamAnimScripted",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "The player to play animation on",
            "cam_anim": "The animation to play",
            "start_time": "The start time of the animation",
            "align_origin": "The origin to align to",
            "align_angles": "The angles to align to"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Plays the camera script on a player.",
        "example": "CamAnimScripted( player, \"proto_melee_cam\", gettime(), origin, angles )"
    },
    "60": {
        "fuction_name": "CameraForceDisableScriptCam",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Disable the script cam from client script.",
        "example": "player CameraForceDisableScriptCam( true )"
    },
    "61": {
        "fuction_name": "CameraSetLensId",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "id": "int"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": null,
        "example": "entity CameraSetLensId(0)"
    },
    "62": {
        "fuction_name": "CameraSetUpdateCallback",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the function that will get called during the camera update",
        "example": "player CameraSetUpdateCallback( &function )"
    },
    "63": {
        "fuction_name": "CanClaimNode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "pathnode to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the node is unclaimed, false otherwise.",
        "example": "if ( CanClaimNode( cover, team ) )"
    },
    "64": {
        "fuction_name": "CanPath",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start": ""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if a path can be found between these positions.",
        "example": "if ( self CanPath( self.origin, targetpos ) )"
    },
    "65": {
        "fuction_name": "ChangeAdvertisedStatus",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "onOff": "(boolean)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Changes the advertised status",
        "example": "changeAdvertisedStatus( onOff )"
    },
    "66": {
        "fuction_name": "CheckIfSongUnlocked",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "aliasname": "The sound alias to play (string)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": "self CheckIfSongUnlocked( \"frag_out\" )"
    },
    "67": {
        "fuction_name": "CheckNavMeshDirection",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start": "start of the trace",
            "dir": "direction to trace",
            "dist": "distance to trace"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Run a trace on NavMesh to get the furthest position a character can move in that direction",
        "example": "pos = CheckNavMeshDirection( (10,20,30), ( 1, 1, 0 ), 25 )"
    },
    "68": {
        "fuction_name": "CleanupSpawnedDynEnts",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Removed all dyn ents that were dynamically spawned (gib pieces, destructible parts, etc)",
        "example": "CleanupSpawnedDynEnts()"
    },
    "69": {
        "fuction_name": "ClearAlternateAimParams",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Forces the local player to use default values for aim assist.  Only works in zombie/campaign mode. Can only be called on players",
        "example": "self ClearAlternateAimParams()"
    },
    "70": {
        "fuction_name": "ClearAnim",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "The animation or animtree node to clear",
            "time": "The blending time for the clear"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets an animation's goal weight (and the goal weights of all of its descendents) to zero over the specified time.",
        "example": "self ClearAnim( %root, 0)"
    },
    "71": {
        "fuction_name": "ClearAnimLimited",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "The animation or animtree node to clear",
            "time": "The blending time for the clear"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets an animation's goal weight to zero over the specified time.",
        "example": "self ClearAnimLimited( %root, 0)"
    },
    "72": {
        "fuction_name": "ClearLastUpdatedCollectibles",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": null,
        "example": null
    },
    "73": {
        "fuction_name": "ClearMaterialOverride",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Clears the material override",
        "example": "self ClearMaterialOverride()"
    },
    "74": {
        "fuction_name": "ClearNearestEnemyScrambler",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "clears closest enemy scrambler from the compass",
        "example": "player ClearNearestEnemyScrambler( )"
    },
    "75": {
        "fuction_name": "ClearPlayerCorpses",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Removes all player corpses from the level",
        "example": "ClearPlayerCorpses( )"
    },
    "76": {
        "fuction_name": "ClearPlayerGravity",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears the gravity override for the player.",
        "example": "player ClearPlayerGravity()"
    },
    "77": {
        "fuction_name": "ClearSpawnPoints",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {
            "list": "which list of spawnpoints to clear"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears all spawnpoints out of the system",
        "example": "ClearSpawnPoints()"
    },
    "78": {
        "fuction_name": "ClearSpawnPointsBaseWeight",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "team mask": "teams that this command will affect"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears the objective base weights set in the spawn points",
        "example": "ClearSpawnPointsBaseWeight( team_mask )"
    },
    "79": {
        "fuction_name": "ClearStepTriggerSound",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Clears the sound triggered by steps",
        "example": "trigPlayer ClearStepTriggerSound()"
    },
    "80": {
        "fuction_name": "ClearStowedWeapon",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears the stowed weapon for the player",
        "example": "self ClearStowedWeapon()"
    },
    "81": {
        "fuction_name": "ClearStreamerRequest",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "Request slot"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Clear a hint from a request slot (0-7)",
        "example": "clearStreamerRequest(0)"
    },
    "82": {
        "fuction_name": "ClearTargetEntity",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears the current target for this vehicle or turret.",
        "example": "roof_turret ClearTargetEntity()"
    },
    "83": {
        "fuction_name": "ClearTopScorers",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears the top scorer for the end game screen.",
        "example": "ClearTopScorers()"
    },
    "84": {
        "fuction_name": "ClientAnnouncement",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "clientnum": "The client number that the announcement is sent to.",
            "string": "The announcement.",
            "duration": "How long, in seconds, to display the announcement."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sends an announcement to a single client.",
        "example": null
    },
    "85": {
        "fuction_name": "ClientClaimTrigger",
        "return_type": "void",
        "called_by": "<client>",
        "mandatory_parameters": {
            "trigger": "A trigger entity."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Claim a single user trigger.",
        "example": "other ClientClaimTrigger( self )"
    },
    "86": {
        "fuction_name": "ClientPrint",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "client": "A client entity.",
            "string": "A message to print."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Print a localized version of this string for a given client",
        "example": null
    },
    "87": {
        "fuction_name": "ClientReleaseTrigger",
        "return_type": "void",
        "called_by": "<client>",
        "mandatory_parameters": {
            "trigger": "A trigger entity."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Release a single user trigger.",
        "example": "other ClientReleaseTrigger( self )"
    },
    "88": {
        "fuction_name": "ClientSysRegister",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "The unique name of the system to be registered"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Declares a system who's state will be communicated over to the client script system when it changes.  Takes a unique name, and returns the id of the system.",
        "example": "index = ClientSysRegister(\"FakeFire\")"
    },
    "89": {
        "fuction_name": "ClientSysSetState",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "id": "The integer id of the client system.  Returned from call to ClientSysRegister.",
            "state": "Arbitrary string state.  Will be sent to the client script system."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the state of a pre registered client system for all clients.  The state will be communicated to the client script system.",
        "example": "ClientSysSetState(level._ClientSys[\"FakeFire\"], \"Event1Phase1\")"
    },
    "90": {
        "fuction_name": "CloneAndRemoveEntity",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "entity field"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates a new entity at the position/orientation/pose of the original, and kills the original",
        "example": "CloneAndRemoveEntity( ent )"
    },
    "91": {
        "fuction_name": "codcaster_keyline_enable",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "type": "0-disable 1-enable"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enable or disable the CODCaster Keyline effect",
        "example": "entity CODCasterKeyline_Enable( 0 )"
    },
    "92": {
        "fuction_name": "CodeGetClientField",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "The entity to search the name in",
            "name": "Unique name to identify the field."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the value for a given client field.",
        "example": "val = CodeGetClientField(ent, \"my_field\")"
    },
    "93": {
        "fuction_name": "CodeGetPlayerStateClientField",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "A player",
            "name": "Unique name to identify the field."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the value for a given player state client field.",
        "example": "val = CodeGetPlayerStateClientField(ent, \"my_field\")"
    },
    "94": {
        "fuction_name": "CodeGetUIModelClientField",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "A player",
            "name": "Unique name to identify the field."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the value for a given player uimodel client field.",
        "example": "val = CodeGetUIModelClientField(ent, \"my_field\")"
    },
    "95": {
        "fuction_name": "CodeGetWorldClientField",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "Unique name to identify the field."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the value for a given client field.",
        "example": "val = CodeGetWorldClientField(\"my_field\")"
    },
    "96": {
        "fuction_name": "CodeIncrementClientField",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity",
            "name": "Unique name to identify the field."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Increments the value for a given client field.",
        "example": "CodeIncrementClientField(ent, \"my_field\")"
    },
    "97": {
        "fuction_name": "CodeIncrementPlayerStateClientField",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "A player",
            "name": "Unique name to identify the field."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Increments the value for a given player state client field.",
        "example": "CodeIncrementPlayerStateClientField(ent, \"my_field\")"
    },
    "98": {
        "fuction_name": "CodeIncrementUIModelClientField",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity",
            "name": "Unique name to identify the field."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Increments the value for a given client field.",
        "example": "CodeIncrementUIModelClientField(ent, \"my_field\")"
    },
    "99": {
        "fuction_name": "CodeIncrementWorldClientField",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "Unique name to identify the field."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Increments the value for a given world client field.",
        "example": "CodeIncrementWorldClientField(\"my_field\")"
    },
    "100": {
        "fuction_name": "CodeSetClientField",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity",
            "name": "Unique name to identify the field.",
            "value": "Value to transmit."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the value for a given client field.",
        "example": "CodeSetClientField(ent, \"my_field\", 1)"
    },
    "101": {
        "fuction_name": "CodeSetPlayerStateClientField",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "A player",
            "name": "Unique name to identify the field.",
            "value": "Value to transmit."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the value for a given player state client field.",
        "example": "CodeSetPlayerStateClientField(ent, \"my_field\", 1)"
    },
    "102": {
        "fuction_name": "CodeSetUIModelClientField",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "A player",
            "name": "Unique name to identify the field.",
            "value": "Value to transmit."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the value for a given player uimodel client field.",
        "example": "CodeSetUIModelClientField(ent, \"my_field\", 1)"
    },
    "103": {
        "fuction_name": "CodeSetWorldClientField",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "Unique name to identify the field.",
            "value": "Value to transmit."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the value for a given world client field.",
        "example": "CodeSetWorldClientField(\"my_field\", 1)"
    },
    "104": {
        "fuction_name": "CollisionTestPointsInBox",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": null
    },
    "105": {
        "fuction_name": "CollisionTestPointsInCone",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": null
    },
    "106": {
        "fuction_name": "CollisionTestPointsInCylinder",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": null
    },
    "107": {
        "fuction_name": "CollisionTestPointsInPill",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": null
    },
    "108": {
        "fuction_name": "CollisionTestPointsInSphere",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of collision result structures",
        "example": null
    },
    "109": {
        "fuction_name": "ConnectPaths",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Connects the paths that intersect with the entity. If the entity is a script_brushmodel then it must have DYNAMICPATH set to connect paths.",
        "example": "vehicle ConnectPaths()"
    },
    "110": {
        "fuction_name": "ConsumableDecrement",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Decrement a specified consumable for the player by the specified amount",
        "example": "self ConsumableDecrement( \"blackjack\", \"awarded\", 1 )"
    },
    "111": {
        "fuction_name": "ConsumableGet",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the value of the specified consumable for the player",
        "example": "self ConsumableGet( \"blackjack\", \"awarded\" )"
    },
    "112": {
        "fuction_name": "ConsumableIncrement",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Increment a specified consumable for the player by the specified amount",
        "example": "self ConsumableIncrement( \"blackjack\", \"awarded\", 1 )"
    },
    "113": {
        "fuction_name": "ConsumableSet",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a specified consumable for the player to the specified amount",
        "example": "self ConsumableSet( \"blackjack\", \"awarded\", 1 )"
    },
    "114": {
        "fuction_name": "CountPlayers",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns a count of the current players, even if they are still connecting to the game.",
        "example": "count = CountPlayers()"
    },
    "115": {
        "fuction_name": "CreateDynEntAndLaunch",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "model": "",
            "pos": "position to spawn at.",
            "angles": "angles to spawn at.",
            "hitpos": "the hit position",
            "force": "The force of the launch"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates and launches a dynent.",
        "example": "CreateDynEntAndLaunch( spawn_models[i], origin, angles, origin, velocity, anim._effect[\"animscript_gibtrail_fx\"] )"
    },
    "116": {
        "fuction_name": "CreateSoundRandom",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "The position",
            "name": "The sound name",
            "min wait": "The minimum wait time",
            "max wait": "The maximum wait time"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Create sound random at the position",
        "example": "CreateSoundRandom(randSound.origin, randSound.script_sound, randSound.script_wait_min, randSound.script_wait_max)"
    },
    "117": {
        "fuction_name": "CreateStreamerHint",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "Location at which to spawn the streamer hint.",
            "factor": "The relative importance of this entity's viewpoint to the main viewpoint."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Allows scripter to create a streamer hint entity viewpoint to the player's viewpoint.",
        "example": "streamHintEnt = createStreamerHint( level.player.origin, 0.333 )"
    },
    "118": {
        "fuction_name": "CurrentSessionMode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the current session mode index",
        "example": "sessionMode = CurrentSessionMode()"
    },
    "119": {
        "fuction_name": "CylinderDamage",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "cylinder_vec": "contains the direction and the length of the cylinder relative to the base origin",
            "origin": "Origin of damage",
            "near_radius": "Radius of the damage at the near end",
            "far_radius": "Radius of the damage at the far end",
            "max_damage": "Max damage, this is the damage at the origin",
            "min_damage": "Max damage, this is the damage at the edge of the radius"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "cylinder_dir_vector should contains the direction and the length of the cylinder relative to the base origin",
        "example": null
    },
    "120": {
        "fuction_name": "DamageConeTrace",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "damage position": "The point the sight starts at"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Determines how much the entity can be seen from the given position. Performs multiple traces and returns an approximation to how much of the entity is visible from the given point (between 0 and 1). In SinglePlayer this will always be 1 if the entity is partially visible.",
        "example": "turretDamageFraction = entity damageConeTrace( turret.origin + (0,0,40), turret )"
    },
    "121": {
        "fuction_name": "DeactivateClientExploder",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "exploder id": "id of exploder to deactivate"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Deactivates a client side exploder",
        "example": "DeactivateClientExploder( 101 )"
    },
    "122": {
        "fuction_name": "DeactivateClientRadiantExploder",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "exploder id": "string id of exploder to deactivate"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Deactivates a client side radiant exploder",
        "example": "DeactivateClientRadiantExploder( \"light_switch\" )"
    },
    "123": {
        "fuction_name": "Delete",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Removes an entity from the game in the same manner as a trigger_kill",
        "example": "self Delete()"
    },
    "124": {
        "fuction_name": "DeletePathNode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "The node to delete"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Delete a dynamically created path node or cover node",
        "example": "DeletePathNode( node )"
    },
    "125": {
        "fuction_name": "DemoIsAnyFreeMoveCamera",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": null,
        "example": null
    },
    "126": {
        "fuction_name": "DemoIsDollyCamera",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": null,
        "example": null
    },
    "127": {
        "fuction_name": "DemoIsEditCamera",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": null,
        "example": null
    },
    "128": {
        "fuction_name": "DemoIsMovieCamera",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": null,
        "example": null
    },
    "129": {
        "fuction_name": "DeployRiotShield",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "owner": ""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the index in a particular class",
        "example": "DeployRiotShield( owner, shield )"
    },
    "130": {
        "fuction_name": "DepthInWater",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the depth (in inches) that the entity is in water.  Returns depth in inches, or 0 if the entity isn't in water.  Will work for all water types.",
        "example": "depth = get_players()[0] DepthInWater()"
    },
    "131": {
        "fuction_name": "DepthOfPlayerInWater",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the depth (in inches) that the player is in water.  Returns depth in inches, or 0 if the entity isn't in water.  Will work for all water types.  More effecient than depthinwater but will only work for players",
        "example": "depth = get_players()[0] DepthOfPlayerInWater()"
    },
    "132": {
        "fuction_name": "Detach",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "modelname": "The model name to detach (string)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "detaches an attached model from an entity",
        "example": "self Detach( \"explosivepack\", \"tag_weapon_right\" )"
    },
    "133": {
        "fuction_name": "DetachAll",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "detaches all attached models from an entity",
        "example": "self DetachAll()"
    },
    "134": {
        "fuction_name": "DetachShieldModel",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "modelname": "The model name to detach (string)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Detaches an attached shield model from a player.",
        "example": "self DetachShieldModel( \"weapon_riot_shield\", \"tag_weapon_left\" )"
    },
    "135": {
        "fuction_name": "Detonate",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Detonate the entity and set the owner to the player which is specified.",
        "example": "self Detonate( attacker )"
    },
    "136": {
        "fuction_name": "DirectionalHitIndicator",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "victims0": "A bit array of entities 0-31 that got hit"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Create a directional hit indicator",
        "example": "attacker DirectionalHitIndicator( victimArray0, victimArray1 )"
    },
    "137": {
        "fuction_name": "DisableAimAssist",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Disables Aim assist on the entity. Entity has to be either a brush model or an actor or a vehicle or a script_model.",
        "example": "player DisableAimAssist()"
    },
    "138": {
        "fuction_name": "DisableDestructiblePieces",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "label": "the name of the field listed in the destructible gdt to disable"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Disables all destructible pieces that have this label set in the destructible gdt",
        "example": "DisableDestructiblePieces( \"heavy_armor\" )"
    },
    "139": {
        "fuction_name": "DisableGrenadeSuicide",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stops cooked grenades from killing the player.",
        "example": null
    },
    "140": {
        "fuction_name": "DisableGrenadeTouchDamage",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Resets the grenade touch damage flag of the entity",
        "example": "self DisableGrenadeTouchDamage()"
    },
    "141": {
        "fuction_name": "DisableOffhandSpecial",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Disable the ability to activate a player's special offhand weapons",
        "example": "player DisableOffhandSpecial()"
    },
    "142": {
        "fuction_name": "DisableOnRadar",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the icon to be shown on the minimap",
        "example": "actor DisableOnRadar()"
    },
    "143": {
        "fuction_name": "DisableSpawnPointList",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "list": "list to disable",
            "team mask": "teams that this command will affect"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "disables spawn point list for a the team_mask",
        "example": "DisableSpawnPointList()"
    },
    "144": {
        "fuction_name": "DisableSpeedBlur",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "REmoves a speed blur on on the screen",
        "example": "DisableSpeedBlur( <localClientNum> )"
    },
    "145": {
        "fuction_name": "DisableVehicleSounds",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Disables all sounds from a vehicle",
        "example": "self DisableVehicleSounds()"
    },
    "146": {
        "fuction_name": "DisconnectPaths",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Disconnects the paths that intersect with the entity. If the entity is a script_brushmodel then it must have DYNAMICPATH set to disconnect paths.",
        "example": "level.ArmoredCar DisconnectPaths()"
    },
    "147": {
        "fuction_name": "DoDamage",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "health": "The amount of damage to do",
            "source position": "The position that the damage comes from"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Does damage to this entity",
        "example": "player DoDamage(25, gasEffectArea.origin, player.lastPoisonedBy, grenade_obj, 0, \"MOD_EXPLOSIVE\", 0, GetWeapon(\"tabun_gas_mp\"), -1, false)"
    },
    "148": {
        "fuction_name": "DoesWeaponReplaceSpawnWeapon",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the new weapon is an alt mode of the spawn weapon. Only certain alt variations are valid (not-gl)",
        "example": "if ( DoesWeaponReplaceSpawnWeapon( self.spawnWeapon, newWeapon ) )"
    },
    "149": {
        "fuction_name": "DontInterpolate",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "pop the entity's position instantaneously to where it moves this time step, rather than smoothly moving there from the previous position",
        "example": "entity DontInterpolate()"
    },
    "150": {
        "fuction_name": "DoubleXPTimerFired",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Used to decrement consumable double xp promotions",
        "example": null
    },
    "151": {
        "fuction_name": "DragonStrike_Enable",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "type": "0-disable 1-enable"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enable or disable the DragonStrike effect",
        "example": "entity DragonStrike_enable( 0 )"
    },
    "152": {
        "fuction_name": "DragonStrike_SetColorRadiusSpinPulse",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set Dragon Strike Cicle position",
        "example": "entity DragonStrike_SetColorRadiusSpinPulse( 1.0, 0.5, 0.25, 100.0, 0.5, 1.0 )"
    },
    "153": {
        "fuction_name": "DragonStrike_SetPosition",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set Dragon Strike Cicle position",
        "example": "entity DragonStrike_SetPosition( vec3 )"
    },
    "154": {
        "fuction_name": "DrawNode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "pathnode"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Draws a node",
        "example": "DrawNode( self.node)"
    },
    "155": {
        "fuction_name": "DropNodEToFloor",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "node to drop"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Drop the node to the floor.",
        "example": "DropNodeToFloor( node )"
    },
    "156": {
        "fuction_name": "EACPathSet",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "vec3": "The value."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the value of a eac path drone.",
        "example": "SetEACPATH( origin )"
    },
    "157": {
        "fuction_name": "Earthquake",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "scale": "scale of the earthquake. Must be greater than 0.",
            "duration": "The duration of the earthquake. Must be greater than 0.",
            "radius": "The radius of the earthquake. Must be greater than 0."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Create an earthquake",
        "example": "Earthquake( 0.22, 7, player.origin, 150 )"
    },
    "158": {
        "fuction_name": "EnableAimAssist",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enables Aim assist on the entity. Entity has to be either a brush model or an actor or a vehicle or a script_model.",
        "example": "player EnableAimAssist()"
    },
    "159": {
        "fuction_name": "EnableAllDestructiblePieces",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enables all destructible pieces that were previously disabled",
        "example": "EnableAllDestructiblePieces()"
    },
    "160": {
        "fuction_name": "EnableGrenadeSuicide",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enables cooked grenades killing the player.",
        "example": null
    },
    "161": {
        "fuction_name": "EnableGrenadeTouchDamage",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the grenade touch damage flag of the entity",
        "example": "self EnableGrenadeTouchDamage()"
    },
    "162": {
        "fuction_name": "EnableInfluencer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "influencer id": "The influencer to enable/disable",
            "enable": "True to enable. False to disable"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enables or disables the given influencer",
        "example": "EnableInfluencer( influencer_id, true )"
    },
    "163": {
        "fuction_name": "EnableLinkTo",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "enables linkto for an entity",
        "example": "self.bombtrigger EnableLinkTo()"
    },
    "164": {
        "fuction_name": "EnableNavMeshTrigger",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "targetname": "The targetname of the trigger entity.",
            "enable": "Whether to enable disable the given volume for pathfinding."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enables/disables a given navmesh trigger",
        "example": "EnableNavMeshTrigger( \"some_trigger\", true )"
    },
    "165": {
        "fuction_name": "EnableObstacle",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "enable": "Whether to enable or disable the obstacle"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enables or disables the hkai obstacle associated with a given entity.",
        "example": "ent EnableObstacle( true )"
    },
    "166": {
        "fuction_name": "EnableOffhandSpecial",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enable the ability to activate a player's special offhand weapons",
        "example": "player EnableOffhandSpecial()"
    },
    "167": {
        "fuction_name": "EnableOnRadar",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the icon to be shown on the minimap",
        "example": "actor EnableOnRadar()"
    },
    "168": {
        "fuction_name": "EnableSpawnPointList",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "list": "list to enable",
            "team mask": "teams that this command will affect"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "enables spawn point list for a the team_mask",
        "example": "EnableSpawnPointList()"
    },
    "169": {
        "fuction_name": "EnableSpeedBlur",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the player",
            "amount": "Blur Amount ( 0.0 - 1.0 )",
            "inner radius": "The size of the inner radius ( 0.0 - 1.0 )",
            "inner outerradius": "The size of the inner radius ( 0.0 - 1.0 )"
        },
        "optional_parameters": {
            "velocityShouldScale": "false don't scale with velocity, true scale",
            "velocityScale": "Specify the velocity when the scale is 1.0",
            "blurInTime": "Specify the time it takes to complete a blur in",
            "blurOutTime": "Specify the time it takes to complete a blur out",
            "shouldOffset": "Specify whether the blur should change as you move left/right or up/down"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets a speed blur on on the screen with parameters",
        "example": "EnableSpeedBlur( localClientNum, .02, .5, .75, true, 300.0 )"
    },
    "170": {
        "fuction_name": "EnableVehicleSounds",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enables all sounds from a vehicle",
        "example": "self EnableVehicleSounds()"
    },
    "171": {
        "fuction_name": "EndCamAnimScripted",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Ends the camera script on a player.",
        "example": "EndCamAnimScripted( player )"
    },
    "172": {
        "fuction_name": "EndExtraCamAnimScripted",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "player": "The player to play animation on",
            "extra_cam_index": "The extra camera index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Ends the extracam camera script on a player.",
        "example": "EndExtraCamAnimScripted( player, 0 )"
    },
    "173": {
        "fuction_name": "evSetRanges",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number.",
            "geometryRange": "geometry draw distance.",
            "targetRange": "target object draw distance."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the visual range for EV mode",
        "example": "evSetRanges( localclientnum, geometryRange, targetRange )"
    },
    "174": {
        "fuction_name": "ExitLevel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "exits the current level",
        "example": "ExitLevel( false )"
    },
    "175": {
        "fuction_name": "ExperimentsGetVariant",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the variant for a user for an experiment",
        "example": "variant = player ExperimentsGetVariant( experimentName )"
    },
    "176": {
        "fuction_name": "ExtraCamAnimScripted",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "The player to play animation on",
            "extra_cam_index": "The extra camera index",
            "cam_anim": "The animation to play",
            "start_time": "The start time of the animation",
            "align_origin": "The origin to align to",
            "align_angles": "The angles to align to"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Plays the camera script on an extracam player.",
        "example": "ExtraCamAnimScripted( player, 0, \"proto_melee_cam\", gettime(), origin, angles )"
    },
    "177": {
        "fuction_name": "FakeFire",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "owner": "The player who fakes fire",
            "origin": "the origin of the fake fire",
            "weapon": "The weapon used",
            "shot count": "Number of shots fired"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Simulates gun fire.  Sound and radar blip.",
        "example": "decoy FakeFire( player, position, \"turret_mp\", 20 )"
    },
    "178": {
        "fuction_name": "FindAnimByName",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "tree": "Anim tree name",
            "anim": "Name of anim"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Find specified animation( using animation name ) in a specified animtree( using atr name).",
        "example": "animnamehash = FindAnimByName(\"generic_human\", \"chicken_dance\")"
    },
    "179": {
        "fuction_name": "FindDRFilter",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "object": "entity to check for flags on",
            "filterset": "filterset to use"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "optimized code replacement for find_dr_filter",
        "example": "object FindDRFilter( filterset )"
    },
    "180": {
        "fuction_name": "FindPath",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start": ".",
            "end": "."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if a path can be found between these positions.",
        "example": "if ( self FindPath( self.origin, potentialpos ) )"
    },
    "181": {
        "fuction_name": "FlashbackFinish",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Finishes the flashback",
        "example": "self FlashbackFinish()"
    },
    "182": {
        "fuction_name": "FlashbackStart",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weapon": "The weapon in the player loadout."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Starts the flashback and returns the new origin",
        "example": "newpos = self FlashbackStart( <weapon> )"
    },
    "183": {
        "fuction_name": "FlushSubtitles",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum to flush the subtitles for"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Flush and clear any current subtitles on the screen for this specific client",
        "example": "FlushSubtitles(0) "
    },
    "184": {
        "fuction_name": "FootstepDoEverything",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the footsteps to play sound and play the footstep fx",
        "example": "FootstepDoEverything()"
    },
    "185": {
        "fuction_name": "FootstepDoFootstepFX",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the footsteps to play the effect",
        "example": "FootstepDoFootstepFX()"
    },
    "186": {
        "fuction_name": "FootstepDoNothing",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the footsteps to do nothing. Not to play sound or play any fx",
        "example": "FootstepDoNothing()"
    },
    "187": {
        "fuction_name": "FootstepDoSound",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the footsteps to play sound",
        "example": "FootstepDoSound()"
    },
    "188": {
        "fuction_name": "ForceAmbientRoom",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "The sound name"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Force play an ambient sound",
        "example": "ForceAmbientRoom( \"sndHealth_LowHealth\" )"
    },
    "189": {
        "fuction_name": "ForceDelete",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Forces Removal of a  entity. Does not wait till next snapshot to remove it.  Will cause crash if called on animated entity",
        "example": "thing forcedelete()"
    },
    "190": {
        "fuction_name": "ForceGameModeMappings",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number to play the animation on",
            "modeName": "Name of the mode to switch to or \"default\" for user defaults"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Forces the users controller mappings for a specific game mode (or resets to user defaults)",
        "example": "ForceGameModeMappings( localClientNum, \"default\" )"
    },
    "191": {
        "fuction_name": "ForcePainOn",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "toggles pain.forcePain to true;  next damage reaction guarenteed",
        "example": "ai ForcePainOn()"
    },
    "192": {
        "fuction_name": "ForceStreamBundle",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "Name of the script bundle to stream"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Force the assets in a script bundle to stream in",
        "example": "ForceStreamBundle( \"cin_ram_02_03_ai\" )"
    },
    "193": {
        "fuction_name": "ForceStreamMaterial",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "material": "Material to force stream"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Forces the streamer to load texture LODs for a material even if it isn't yet visible.  Returns true when all levels are loaded.  Call StopForceStreamingMaterial when you no longer need it, or Steve will be upset that you're wasting Streamer memory.",
        "example": "areAllForcedLodsLoaded = ForceStreamMaterial( material, mipsToNotForce )"
    },
    "194": {
        "fuction_name": "ForceStreamWeaponRenderOptions",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "weapon": "Weapon to look up the materials to stream with",
            "weaponOptions": "Render Options to look up the materials to stream with"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Forces all materials for the combination of weapon and render options to stream in",
        "example": "ForceStreamWeaponRenderOptions( localClientNum, weapon, weaponOptions )"
    },
    "195": {
        "fuction_name": "ForceStreamWeapons",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Forces all weapon materials to stream in",
        "example": "forceStreamWeapons()"
    },
    "196": {
        "fuction_name": "ForceStreamXModel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "model": "The model to force stream"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Forces the streamer to load model and texture LODs for a model even if it isn't yet visible.  Returns true when all levels are loaded.  Call StopForceStreamingXModel when you no longer need it, or Steve will be upset that you're wasting Streamer memory.",
        "example": "areAllForcedLodsLoaded = CScr_ForceStreamXModel( model, meshLodsToNotForce, textureLodsToNotForce, alsoStreamLowerLods=true )"
    },
    "197": {
        "fuction_name": "ForceTModeVisible",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "The entity the value is being set for"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Forces an entity to be visible as if a player was seeing it via tmode",
        "example": "ForceTModeVisible( aiGuy, true )"
    },
    "198": {
        "fuction_name": "FXBlockSight",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "the entity to use for the origin for tje line of sight blocker",
            "radius": "the radius of the 'smoke screen' blocker"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Uses a general entity and a radius to set a line of sight blocker on the server for some AI. Destroyed when the entity is freed.",
        "example": "FXBlockSight( fxent, 64 )"
    },
    "199": {
        "fuction_name": "GadgetActivate",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "The gadget slot to activate. (integer)",
            "weapon": "The gadget weapon"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "turns gadget on in slot.",
        "example": "self GadgetActivate( slot )"
    },
    "200": {
        "fuction_name": "GadgetCharging",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "The gadget slot. (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the gadget charging state.",
        "example": "self GadgetCharging( slot, true )"
    },
    "201": {
        "fuction_name": "GadgetDeactivate",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "The gadget slot to deactivate. (integer)",
            "weapon": "The gadget weapon"
        },
        "optional_parameters": {
            "penalty": "The power penalty type"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "turns gadget off in slot.",
        "example": "self GadgetDeactivate( slot, weapon, GADGET_OFF_PENALTY_SHUT_OFF )"
    },
    "202": {
        "fuction_name": "GadgetFlickering",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "The gadget slot to test or apply flickering state. (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Tests a gadget is flickering and can optionally set flickering.",
        "example": "self GadgetFlickering( slot, true, 200 )"
    },
    "203": {
        "fuction_name": "GadgetGetSlot",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weapon": "The weapon in the player loadout."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get gadget slot for weapon.",
        "example": "self GadgetGetSlot( weapon )"
    },
    "204": {
        "fuction_name": "GadgetIsActive",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "The gadget slot to test. (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the gadget is active.",
        "example": "self GadgetIsActive( slot )"
    },
    "205": {
        "fuction_name": "GadgetIsPrimed",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "The gadget slot to test. (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the gadget is primed.",
        "example": "self GadgetIsPrimed( slot )"
    },
    "206": {
        "fuction_name": "GadgetIsReady",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "The gadget slot to test. (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the gadget is ready.",
        "example": "self GadgetIsReady( slot )"
    },
    "207": {
        "fuction_name": "GadgetPowerChange",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "The gadget slot apply the power change. (integer)",
            "change": "The amount to change the power by. (float)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Applies a power change to the gadget power.",
        "example": "self GadgetPowerChange( slot, -20 )"
    },
    "208": {
        "fuction_name": "GadgetPowerGet",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "The gadget slot (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the power remaining for gadget.",
        "example": "power = self GadgetPowerGet( slot )"
    },
    "209": {
        "fuction_name": "GadgetPowerReset",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "The gadget slot apply the power reset. (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Applies a power reset.",
        "example": "self GadgetPowerReset( slot )"
    },
    "210": {
        "fuction_name": "GadgetPowerSet",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "The gadget slot apply the power change. (integer)",
            "value": "The amount to set power to. (float)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the power override to value. Works always.",
        "example": "self GadgetPowerSet( slot, 100 )"
    },
    "211": {
        "fuction_name": "GadgetPulseGetOwner",
        "return_type": "entity",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the owner of the vision pulse you an entity is pulsed by if it exists",
        "example": "entity GadgetPulseGetOwner(<localclientnum>)"
    },
    "212": {
        "fuction_name": "GadgetPulseResetReveal",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Resets the reveal on an entity for this player",
        "example": "entity GadgetPulseResetReveal()"
    },
    "213": {
        "fuction_name": "GadgetPulseRevealed",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Tests whether an enemy is currently revealed for this player",
        "example": "reveal = entity GadgetPulseRevealed()"
    },
    "214": {
        "fuction_name": "GadgetSetActivateTime",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "The gadget slot. (integer)",
            "time": "The activation time. (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the activation time of this gadget.",
        "example": "self GadgetSetActivateTime( slot, time )"
    },
    "215": {
        "fuction_name": "GadgetSetEntity",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "The gadget slot.",
            "entity": "The entity used by the gadget."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the entity used by this gadget.",
        "example": "self GadgetSetEntity( slot, ent )"
    },
    "216": {
        "fuction_name": "GadgetSetInfrared",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number.",
            "bool": "0 disables infrared, 1 enables it."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enables or disables infrared for the gadget",
        "example": "GadgetSetInfrared( localclientnum, newVal )"
    },
    "217": {
        "fuction_name": "GadgetStateChange",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "The gadget slot to activate. (integer)",
            "weapon": "The gadget weapon",
            "state": "The state to change it to"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "changes the gadget state in a slot.",
        "example": "self GadgetStateChange( slot )"
    },
    "218": {
        "fuction_name": "GadgetTargetResult",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "hit_miss": "hit or miss"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": "GadgetTargetResult(true)"
    },
    "219": {
        "fuction_name": "GameModeIsMode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "gamemode": "(int)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true/false if the current game mode is the given mode",
        "example": "if ( GameModeIsMode( level.GAMEMODE_WAGER_MATCH ) )"
    },
    "220": {
        "fuction_name": "GeneratePointsAroundCenter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "Position to start the search around.",
            "maxSearchRadius": "the maximum radius away from origin.",
            "innerSpacing": "the distance between points at the minRadius."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "generate uniformly distributed points around a center in 2D (XY) plane",
        "example": "array = GeneratePointsAroundCenter( enemy.origin, 500, 80, 100, 40, (-0.3,0,0) )"
    },
    "221": {
        "fuction_name": "GenerateScriptEvent",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates a script event at the actor's origin, with default radius",
        "example": "self GenerateScriptEvent()"
    },
    "222": {
        "fuction_name": "GetAbsMaxs",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get absolute maximum bounds of the entity in world space.",
        "example": "absMaxs = wallModel GetAbsMaxs()"
    },
    "223": {
        "fuction_name": "GetAbsMins",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get absolute minimum bounds of the entity in world space.",
        "example": "absMins = wallModel GetAbsMins()"
    },
    "224": {
        "fuction_name": "GetActiveLocalClients",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the number of active local clients",
        "example": "active_clients = GetActiveLocalClients()"
    },
    "225": {
        "fuction_name": "GetActorArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of the human AI",
        "example": "aiarray = GetActorArray( \"ralph\", \"targetname\" )"
    },
    "226": {
        "fuction_name": "GetActorSpawnerArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of all of the actor spawners in a level.",
        "example": "spawners = GetSpawnerArray()"
    },
    "227": {
        "fuction_name": "GetActorSpawnerTeamArray",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "team": "a team name, either 'axis', 'allies', or 'neutral'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of all of the spawners in a level",
        "example": "enemies = GetActorSpawnerTeamArray( \"axis\", \"neutral\" )"
    },
    "228": {
        "fuction_name": "GetActorTeamArray",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "team": "a team name, either 'axis', 'allies', or 'neutral'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of the human AI",
        "example": "aiarray = GetActorTeamArray( \"axis\", \"neutral\" )"
    },
    "229": {
        "fuction_name": "GetActorTeamCountRadius",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "Center of sphere",
            "radius": "Radius of sphere"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns number of human actor AI within a sphere on a given set of teams",
        "example": "nearbyOthersCount = GetActorTeamCountRadius( self.origin, 500, \"axis\", \"neutral\" )"
    },
    "230": {
        "fuction_name": "GetActorWeaponOptions",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return's the actors current weapon options, ex: weapon camo option.",
        "example": "self GetActorWeaponOptions()"
    },
    "231": {
        "fuction_name": "GetAIArchetypeArray",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of the AI for the given archetype and optionally given team",
        "example": "aiarray = GetAIArchetypeArray( \"human\" )"
    },
    "232": {
        "fuction_name": "GetAIArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of the human AI",
        "example": "aiarray = GetAIArray( \"my_ai\", \"targetname\" )"
    },
    "233": {
        "fuction_name": "GetAICount",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the current ai count.",
        "example": "aicount = GetAICount()"
    },
    "234": {
        "fuction_name": "GetAIFxName",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "localClientNum": "Local client to check",
            "aiFxBundleKey": "Script bundle key defined within the AI's aiFxTable."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns a FX name corresponding to the AI's aiFxBundle key/value pair.",
        "example": "fxName = self GetAIFxName( localClientNum, surfaceTable )"
    },
    "235": {
        "fuction_name": "GetAILimit",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the max ai count set by script.",
        "example": "ailimit = GetAILimit()"
    },
    "236": {
        "fuction_name": "GetAimAngles",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "targetPos": "",
            "aimTag": "",
            "prevAimTagAngles": "",
            "prevAimAngles": "",
            "maxAngles": "",
            "maxAimDeltas": ""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array with the angles of the aimTag and the relative aiming delta angles from this orientation.",
        "example": "aim_angles = ent GetAimAngles( shootPos, \"tag_aim\", (0, 30, 0), (15, 10, 0), (60, 60, 0), (5, 5, 0), 11 )"
    },
    "237": {
        "fuction_name": "GetAISpeciesArray",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of the AI",
        "example": "aiarray = GetAISpeciesArray( \"axis\", \"all\" )"
    },
    "238": {
        "fuction_name": "GetAITeamArray",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "team": "a team name, either 'axis', 'allies', or 'neutral'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of the human AI and vehicle AI",
        "example": "aiarray = GetAITeamArray( \"axis\", \"neutral\" )"
    },
    "239": {
        "fuction_name": "GetAITriggerFlags",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the spawn flags that will allow AI to activate triggers",
        "example": "spawn(\"trigger_radius\", (0,0,0), GetAITriggerFlags())"
    },
    "240": {
        "fuction_name": "GetAllCharacterBodies",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "sessionMode": "Session Mode Index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns all character indices, even disabled ones, for the current session mode (or specified session mode)",
        "example": "heroIndices = GetAllCharacterBodies()"
    },
    "241": {
        "fuction_name": "GetAllCharacterHeads",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "sessionmode": "Session Mode Index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns all character indices, even disabled ones, for the current session mode (or specified session mode)",
        "example": "heroIndices = GetAllCharacterHeads()"
    },
    "242": {
        "fuction_name": "GetAllNodes",
        "return_type": "pathnode",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets all of the nodes in a level",
        "example": "nodes = GetAllNodes()"
    },
    "243": {
        "fuction_name": "GetAmmoCount",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weapon": "The weapon for which we need ammo count"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the count of ammo left",
        "example": "n_ammo = self GetAmmoCount( w_weapon )"
    },
    "244": {
        "fuction_name": "GetAngleDelta",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "animation name": "Name of the animation"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the angle delta of the animation",
        "example": "angleDelta = getAngleDelta( arrivalAnim, 0, normalizedLength )"
    },
    "245": {
        "fuction_name": "GetAngleFromBits",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the angle (0 - 360) from the (compressed) bits",
        "example": "yaw = GetAngleFromBits( bits, 3 )"
    },
    "246": {
        "fuction_name": "GetAngles",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the rotation of the entity",
        "example": "angles = self GetAngles()"
    },
    "247": {
        "fuction_name": "GetAnimCurrFrameCount",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "a primitive animation: calling this function on a non-primitive animation will fail"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get current frame for the given animation when its running.",
        "example": "CurrFrameNum = GetAnimCurrFrameCount(climbAnim)"
    },
    "248": {
        "fuction_name": "GetAnimForCharacter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "characterIndex": "The index of the character in the current game-mode's character table",
            "sessionmode": "Session Mode Index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the name of the animation to use for the character pose in the frontend",
        "example": "frontendVignetteAnim = GetAnimForCharacter( characterIndex, \"mp\" )"
    },
    "249": {
        "fuction_name": "GetAnimFrameCount",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "animation": "a primitive animation: calling this function on a non-primitive animation will fail"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get total number of frames for the given animation.",
        "example": "FrameNum = GetAnimFrameCount(climbAnim)"
    },
    "250": {
        "fuction_name": "GetAnimLength",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "animation": "a primitive animation: calling this function on a non-primitive animation will fail"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the length of an animation",
        "example": "cycleTime = GetAnimLength( climbAnim )"
    },
    "251": {
        "fuction_name": "GetAnimStateCategory",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the current anim state category for an Actor.",
        "example": "category = GetAnimStateCategory( )"
    },
    "252": {
        "fuction_name": "GetAnimTagOrigin",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "animation name": "Name of the animation.",
            "normalized time": "0.0 to 1.0 time within the animation.",
            "tag name": "Name of the tag to look up within the animation."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the local tag position within the animation at the specified normalized time, has no consideration to bone hierarchy.",
        "example": "tagPosition = GetAnimTagOrigin( arrivalAnim, 0, \"tag_sync\" )"
    },
    "253": {
        "fuction_name": "GetAnimTime",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "animation to manipulate"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the normalized animation time for the given animation.",
        "example": "if ( (self GetAnimTime( %walk_and_run_loops ) ) < 0.5 )"
    },
    "254": {
        "fuction_name": "GetAnyNodeArray",
        "return_type": "pathnode",
        "called_by": null,
        "mandatory_parameters": {
            "pos": "search origin",
            "radius": "radius to search within"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets an array of nodes within given radius",
        "example": "node = GetCoverNodeArray( self.origin, 256 )"
    },
    "255": {
        "fuction_name": "GetArchetypeFromClassname",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Given classname, returns archetype name if its an AITYPE or VEHICLE.",
        "example": "GetArchetypeFromClassname(\"spawner_enemy_54i_human_sniper_sniperrifle\")"
    },
    "256": {
        "fuction_name": "GetAssignedTeam",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "The player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns the player's team as assigned by matchmaking. 0 = No Team, 1 = OpFor, 2 = Allies, 3 = Spectator.",
        "example": "team = GetAssignedTeam( player )"
    },
    "257": {
        "fuction_name": "GetAssignedTeamName",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "The player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns the player's team as assigned by matchmaking. 0 = No Team, 1 = OpFor, 2 = Allies, 3 = Spectator.",
        "example": "team = GetAssignedTeam( player )"
    },
    "258": {
        "fuction_name": "GetAtrLoaded",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "return an array of anim tree name loaded onto the server.",
        "example": "trees = GetAtrLoaded()"
    },
    "259": {
        "fuction_name": "GetAttachIgnoreCollision",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "modelindex": "The index of the model attached to the entity, starting at 0, so for instance 3 will get the fourth model attached. (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the ignore collision flag of the attached model at the given attachment slot",
        "example": "model_ignore_collision = self GetAttachIgnoreCollision( index )"
    },
    "260": {
        "fuction_name": "GetAttachmentCosmeticVariantForWeapon",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "custom Class": "Class Num",
            "loadoutSlot": "Loadout Slot (primary or secondary)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the AttachmentCosmeticVariantIndexes data to be passed in to GetWeapon",
        "example": "acvi = self GetAttachmentCosmeticVariantForWeapon( class_num, \"primary\" )"
    },
    "261": {
        "fuction_name": "GetAttachmentCosmeticVariantIndexes",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weaponname": "the name of the base weapon to return"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the AttachmentCosmeticVariantIndexes data to be passed in to GetWeapon",
        "example": "GetAttachmentCosmeticVariantIndexes( \"mp7_mp\", \"acog\", 2, \"grip\", 1 )"
    },
    "262": {
        "fuction_name": "GetAttachmentNames",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns array containing the names for each type of attachment.",
        "example": "attachmentNames = GetAttachmentNames()"
    },
    "263": {
        "fuction_name": "GetAttachModelName",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "modelindex": "The index of the model attached to the entity, starting at 0, so for instance 3 will get the fourth model attached. (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the name of the attached model at the given attachment slot",
        "example": "model_name = self GetAttachModelName( index )"
    },
    "264": {
        "fuction_name": "GetAttachSize",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the number of attached models for this entity.",
        "example": "size = self GetAttachSize()"
    },
    "265": {
        "fuction_name": "GetAttachTagName",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "modelindex": "The index of the model attached to the entity, starting at 0, so for instance 3 will get the fourth model attached. (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the tagname of the attached model at the given attachment slot",
        "example": "tag_name = self GetAttachTagName( index )"
    },
    "266": {
        "fuction_name": "GetBaseWeaponItemIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weaponName": "full weapon name e.g. m16_acog_mp."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the base weapon item index from the statstable",
        "example": "baseWeaponName = GetBaseWeaponItemIndex( \"m16_acog_mp\" )"
    },
    "267": {
        "fuction_name": "GetBestInfluencepos",
        "return_type": "void",
        "called_by": "<ai>",
        "mandatory_parameters": {
            "index": "which influence map to use",
            "low": "the low threshold value to check against",
            "high": "the high threshold value to check against"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns the influence map position for ai, this is custom logic to return the closest posistion between the passed in thresholds",
        "example": "dir = self GetBestInfluencePos( index, low, high)"
    },
    "268": {
        "fuction_name": "GetBestSpawnPoint",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "point team": "Team that we need the points for",
            "influencer team": "Influencer teams to compare the points against",
            "vis team": "Team mask to use for enemy vis tests"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns a sorted array of spawnpoints in order from best to worst for the given team",
        "example": "GetSortedSpawnPoints()"
    },
    "269": {
        "fuction_name": "GetBitsForAngle",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the compressed bits for an angle with <num bits> granularity",
        "example": "bits = GetBitsForAngle( angle, 3 )"
    },
    "270": {
        "fuction_name": "GetBodyAccentColorCountForHero",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "sessionMode": "The character's sessionMode",
            "heroIndex": "The index of the hero in the current game-mode's character table",
            "bodyIndex": "The index of the body for the specific hero"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the number of accents for the specified body model of a specific hero",
        "example": "modelName = GetBodyAccentColorCountForHero( localClientNum, 0, 0 )"
    },
    "271": {
        "fuction_name": "GetBodyRenderOptionsPacked",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets the packed value of body render options (body type, style, colors)",
        "example": "gibEntity GetBodyRenderOptionsPacked()"
    },
    "272": {
        "fuction_name": "GetBrushModelCenter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "The brush model entity"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the center of the Brush Model entity",
        "example": "center = GetBrushModelCenter( self )"
    },
    "273": {
        "fuction_name": "GetBuildKitAttachmentCosmeticVariantIndexes",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "weapon object"
        },
        "optional_parameters": {
            "upgraded": "bool whether this should be the upgraded version. If so extclip and fmj will be added"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get attachment cosmetic variant indexes for the weapon from the player's build kit",
        "example": "acvi = self GetBuildKitAttachmentCosmeticVariantIndexes( ar_standard )"
    },
    "274": {
        "fuction_name": "GetBuildKitWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "weapon object"
        },
        "optional_parameters": {
            "upgraded": "bool whether this should be the upgraded version. If so extclip and fmj will be added"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get weapon object (including attachments) for the weapon from the player's build kit",
        "example": "weapon = self GetBuildKitWeapon( ar_standard )"
    },
    "275": {
        "fuction_name": "GetBuildKitWeaponOptions",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "weapon object"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get weapon options for the weapon from the player's build kit",
        "example": "weapon_options = self GetBuildKitWeaponOptions( ar_standard, packapunch_camo_index )"
    },
    "276": {
        "fuction_name": "GetCamAngles",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the camera view angles",
        "example": "player GetCamPos()"
    },
    "277": {
        "fuction_name": "GetCamAnglesByLocalClientNum",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the camera angles of the local client given",
        "example": "cam_angles = GetCamAnglesByLocalClientNum( 0 )"
    },
    "278": {
        "fuction_name": "GetCamAnimTime",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "cam_anim": "The animation to play"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the duration of an xcam in milliseconds.",
        "example": "GetCamAnimTime( \"proto_melee_cam\" )"
    },
    "279": {
        "fuction_name": "GetCamPos",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the camera position",
        "example": "player GetCamPos()"
    },
    "280": {
        "fuction_name": "GetCamPosByLocalClientNum",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the camera position of the local client given",
        "example": "cam_origin = GetCamPosByLocalClientNum( 0 )"
    },
    "281": {
        "fuction_name": "GetCentroid",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the centroid of an entity",
        "example": "centroid = self GetCentroid()"
    },
    "282": {
        "fuction_name": "GetCharacterAssetName",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "characterIndex": "The index of the character in the current game-mode's character table",
            "sessionmode": "Session Mode Index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the asset name for a character for the current session mode",
        "example": "heroName = GetCharacterAssetName( characterIndex, \"mp\" )"
    },
    "283": {
        "fuction_name": "GetCharacterBodyModelColorCount",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "characterIndex": "The index of the character in the current game-mode's character table",
            "bodyStyleIndex": "The index of the body style in the character",
            "sessionmode": "Session Mode Index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the body model count for a character for the current session mode",
        "example": "heroBodyModelCount = GetCharacterBodyModelCount( characterIndex, \"mp\" )"
    },
    "284": {
        "fuction_name": "GetCharacterBodyModelCount",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "characterIndex": "The index of the character in the current game-mode's character table",
            "sessionMode": "Session Mode Index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the body model count for a character for the current session mode",
        "example": "heroBodyModelCount = GetCharacterBodyModelCount( characterIndex, \"mp\" )"
    },
    "285": {
        "fuction_name": "GetCharacterBodyStyleIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "gender": "Whether or not to use the male bodytype",
            "bodyStyleDisplayName": "The name of the body style"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the index of the body style designated by the given display name",
        "example": "bodyStyleIndex = GetCharacterBodyStyleIndex( true, \"Technomancer\" )"
    },
    "286": {
        "fuction_name": "GetCharacterCustomizationForXUID",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "xuid": "The xuid of the player to get customization for"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": null,
        "example": "GetCharacterCustomizationForXUID( <xuid>)"
    },
    "287": {
        "fuction_name": "GetCharacterDisplayName",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "characterIndex": "The index of the character in the current game-mode's character table",
            "sessionmode": "Session Mode Index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the display name for a character for the current session mode",
        "example": "heroName = GetCharacterDisplayName( characterIndex, \"mp\" )"
    },
    "288": {
        "fuction_name": "GetCharacterFields",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "characterIndex": "The index of the character in the current game-mode's character table",
            "sessionmode": "Session Mode Index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns info for the character pose playerbodytype",
        "example": "heroFields = GetCharacterFields( characterIndex, \"mp\" )"
    },
    "289": {
        "fuction_name": "GetCharacterHeadRenderOptions",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "headIndex": "The index of the character in the current game-mode's character table"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Calculates the packed helmet render option - to be passed to SetBodyRenderOptions()",
        "example": "helmetRenderOptions = GetCharacterHeadRenderOptions( 0 )"
    },
    "290": {
        "fuction_name": "GetCharacterHelmetHidesHead",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "characterIndex": "The index of the character in the current game-mode's character table",
            "helmetIndex": "The index of the helmet belonging to that character",
            "sessionMode": "The session mode ( mp cp zm )"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns whether or not the characters head should be hidden based on the helmet",
        "example": "hideHead = GetCharacterHelmetHidesHead( 0, 0, 0 )"
    },
    "291": {
        "fuction_name": "GetCharacterHelmetModelColorCount",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "characterIndex": "The index of the character in the current game-mode's character table",
            "helmetStyleIndex": "The index of the helmet style in the character",
            "sessionmode": "Session Mode Index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the helmet model count for a character for the current session mode",
        "example": "heroHelmetModelCount = GetCharacterHelmetModelCount( characterIndex, \"mp\" )"
    },
    "292": {
        "fuction_name": "GetCharacterHelmetModelCount",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "characterIndex": "The index of the character in the current game-mode's character table",
            "sessionmode": "Session Mode Index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the helmet model count for a character for the current session mode",
        "example": "heroHelmetModelCount = GetCharacterHelmetModelCount( characterIndex, \"mp\" )"
    },
    "293": {
        "fuction_name": "GetCharacterHelmetRenderOptions",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "characterIndex": "The index of the character in the current game-mode's character table",
            "helmetIndex": "The index of the helmet belonging to that character",
            "colorIndex1": "The index of accent color 1",
            "colorIndex2": "The index of accent color 2",
            "colorIndex3": "The index of accent color 3"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Calculates the packed helmet render option - to be passed to SetBodyRenderOptions()",
        "example": "helmetRenderOptions = GetCharacterHelmetRenderOptions( 0, 1, 1, 2, 3 )"
    },
    "294": {
        "fuction_name": "GetCharacterIndex",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets the character index",
        "example": "index = self GetCharacterIndex()"
    },
    "295": {
        "fuction_name": "GetCharacterModeRenderOptions",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "session_mode": "Session Mode enum index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Calculates the packed mode render option - to be passed to SetBodyRenderOptions()",
        "example": "modeRenderOptions = GetCharacterModeRenderOptions( SESSIONMODE_MULTIPLAYER )"
    },
    "296": {
        "fuction_name": "GetClassIndexFromName",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the index in a particular class",
        "example": "GScr_GetClassIndexFromName( \"CLASS_SMG\" )"
    },
    "297": {
        "fuction_name": "GetClientFieldVersion",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the version of the specifiec client field, in the specified client field set - or 0 if the field isn't registered.",
        "example": "if(GetClientFieldVersion( \"world\", \"fog_volume_active\" ))"
    },
    "298": {
        "fuction_name": "GetClientTime",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets the current client time in milliseconds",
        "example": "currTime = ent GetClientTime()"
    },
    "299": {
        "fuction_name": "GetClones",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "local client num": "local client"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get an array of all the clones",
        "example": "clones = GetClones( localClientNum )"
    },
    "300": {
        "fuction_name": "GetClosestPointOnNavMesh",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "Position to start the search around."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get a point on NavMesh that's closest to the given position within radius. Returns the adjusted position if found one, or undefined if not found. If distFromBoundary is defined, the point found on NavMesh will then be moved again to get it away from boundary",
        "example": "posOnNavMesh = GetClosestPointOnNavMesh( (10,20,30), 25, 15 )"
    },
    "301": {
        "fuction_name": "GetClosestPointOnNavVolume",
        "return_type": "void",
        "called_by": "<flying_ai>",
        "mandatory_parameters": {
            "position": "Position to start the search around."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get a point on nav volume that's closest to the given position within radius. Returns the adjusted position if found one, or undefined if not found.",
        "example": "posOnNavVolume = self GetClosestPointOnNavVolume( (10,20,30), 25 )"
    },
    "302": {
        "fuction_name": "GetContractName",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "contractIndex": "Contract ID"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the name of the specified contract",
        "example": "contractName = GetContractName( contractIndex )"
    },
    "303": {
        "fuction_name": "GetContractRequiredCount",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "contractIndex": "Contract ID"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the required count for the specified contract",
        "example": "contractName = GetContractRequiredCount( contractIndex )"
    },
    "304": {
        "fuction_name": "GetContractRequirements",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "contractIndex": "The index of the contract"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of contract requirements. Each requirement takes up two indices, 'reqType' and 'reqData'.",
        "example": "mapNames = GetContractRequirements( contractIndex )"
    },
    "305": {
        "fuction_name": "GetContractResetConditions",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "contractIndex": "Contract ID"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the reset conditions of the specified contract",
        "example": "resetConditions = GetContractResetConditions( contractIndex )"
    },
    "306": {
        "fuction_name": "GetControllerPosition",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the controller you want the position of"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "get current deflection of control, returns values via an array with vector values for \"look\" and \"move\" which correspond to those controls.  Values are -1 to 1 and represent the given axis on the vector",
        "example": "pos = self GetControllerPosition() ..."
    },
    "307": {
        "fuction_name": "GetControllerType",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns the controller type of the player",
        "example": "player GetControllerType()"
    },
    "308": {
        "fuction_name": "GetCorpseAnim",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the animation that the corpse will play",
        "example": "deathAnim = self GetCorpseAnim()"
    },
    "309": {
        "fuction_name": "GetCorpseArray",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of all of the items in a level.",
        "example": "origins = GetCorpseArray()"
    },
    "310": {
        "fuction_name": "GetCounterTotal",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "counterType": "The counter type"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the counter count for the given counter",
        "example": "count = GetCounterTotal( \"global_comebacks\" )"
    },
    "311": {
        "fuction_name": "GetCoverNodeArray",
        "return_type": "pathnode",
        "called_by": null,
        "mandatory_parameters": {
            "pos": "search origin",
            "radius": "radius to search within"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets an array of cover nodes within given radius",
        "example": "node = GetCoverNodeArray( self.origin, 256 )"
    },
    "312": {
        "fuction_name": "GetCrateHeadObjective",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the equipment head objective as described in the grenadeweapon gdt.",
        "example": "crateObjective = GetCrateHeadObjective( uav )"
    },
    "313": {
        "fuction_name": "GetCurrentAnimScriptedName",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get current frame for the given animation when its running.",
        "example": "animName = GetCurrentAnimScriptedName()"
    },
    "314": {
        "fuction_name": "GetCurrentEventId",
        "return_type": "void",
        "called_by": "<ai_or_player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the id from the current event.",
        "example": "eventId = self GetCurrentEventId()"
    },
    "315": {
        "fuction_name": "GetCurrentEventName",
        "return_type": "void",
        "called_by": "<ai_or_player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the name of the current event.",
        "example": "eventId = self GetCurrentEventName()"
    },
    "316": {
        "fuction_name": "GetCurrentEventOriginator",
        "return_type": "entity",
        "called_by": "<ai_or_player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the originator from the current event if any",
        "example": "target = self GetCurrentEventOriginator()"
    },
    "317": {
        "fuction_name": "GetCurrentEventType",
        "return_type": "void",
        "called_by": "<ai_or_player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the type from the current event.",
        "example": "type = self GetCurrentEventType()"
    },
    "318": {
        "fuction_name": "GetCurrentEventTypeName",
        "return_type": "void",
        "called_by": "<ai_or_player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the type string name from the current event.",
        "example": "type = self GetCurrentEventTypeName()"
    },
    "319": {
        "fuction_name": "GetCurrentGunRank",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "index": "the index of the gun to get"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the gun current rank",
        "example": "rank - GetCurrentGunRank(0)"
    },
    "320": {
        "fuction_name": "GetCurrentWeaponIncludingMelee",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client number of the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the name of the weapon being used by the specified local client, and will return the melee weapon if the client is in a melee state",
        "example": "currentWeapon = GetCurrentWeapon( localClientNum )"
    },
    "321": {
        "fuction_name": "GetCustomTeamName",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "teamid": "TeamID"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the team name",
        "example": "name = GetCustomTeamName( teamid )"
    },
    "322": {
        "fuction_name": "GetCyberComAbilityName",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "flag": "flag field"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the cybercom ability name given the flag, type",
        "example": "GetCyberComAbilityName(  flag, type )"
    },
    "323": {
        "fuction_name": "getCybercomType",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets the active cybercom type",
        "example": "cybercom_type = player getCybercomType()"
    },
    "324": {
        "fuction_name": "GetCyberComWeapon",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "flag": "flag field",
            "type": "type of weapon",
            "upgraded": "true if the weapon is upgraded"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the cybercom gadget weapon given the flag, type, and if upgraded",
        "example": "GetCyberComWeapon(  flag, type, upgraded )"
    },
    "325": {
        "fuction_name": "GetDamageableEntArray",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the entities that can be damaged. Can optionally take an origin, radius, and a flag to check 3D.",
        "example": "entities = GetDamageableEntArray( maxDist, true )"
    },
    "326": {
        "fuction_name": "GetDebugEye",
        "return_type": "void",
        "called_by": "<player or actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the debug position of the eye for an AI or Player",
        "example": "eyePos = player GetDebugEye()"
    },
    "327": {
        "fuction_name": "GetDecorations",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets an array of booleans that represents all the decorations the player has earned",
        "example": "medals = e_player GetDecorationsEarned()"
    },
    "328": {
        "fuction_name": "GetDefaultClassSlot",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "classname": "the classname of the item",
            "slotname": "The slot to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the item in a particular default class slot",
        "example": "GetDefaultClassSlot( \"cqb\", \"primary\" ); // Returns primary weapon reference"
    },
    "329": {
        "fuction_name": "GetDemoVersion",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the demo version value",
        "example": "if ( GetDemoVersion() )"
    },
    "330": {
        "fuction_name": "GetDistanceFromScreenCenter",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "localClientNum": "Local client to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the distance from the screen center to the entity",
        "example": "ent GetDistanceFromScreenCenter( localClientNum )"
    },
    "331": {
        "fuction_name": "GetDroppedWeapons",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array containing all the dropped weapons in the level",
        "example": null
    },
    "332": {
        "fuction_name": "getdynent",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the dynent with the specified targetname",
        "example": "twig = getdynent(\"twig\")"
    },
    "333": {
        "fuction_name": "getdynentarray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get a dynent array with the specified targetname",
        "example": "twigs = getdynentarray(\"twig\")"
    },
    "334": {
        "fuction_name": "GetEnemies",
        "return_type": "entity",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of enemies.",
        "example": "enemies = self GetEnemies()"
    },
    "335": {
        "fuction_name": "GetEnemyScramblerAmount",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the amount alpha of the enemy scrambler applied",
        "example": "alpha = player GetEnemyScramblerAmount( )"
    },
    "336": {
        "fuction_name": "GetEnt",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "name": "name to search for",
            "key": "key that name goes with"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Looks up entities by key and name",
        "example": "spawner = GetEnt( \"doorguy1\", \"targetname\" )"
    },
    "337": {
        "fuction_name": "GetEntArray",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Looks up entities by key and name and a return an array of the matched entities",
        "example": "spawners = GetEntArray( \"doorguy1\", \"targetname\" )"
    },
    "338": {
        "fuction_name": "GetEntArrayByType",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "localclientnum": "Which local client's entity list to use.",
            "type": "Type of the entity. Look into shared.gsh for the ET enum"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets an array of entities that have the given the type of the entity ( for example, ET_MISSILE )",
        "example": "grenades = GetEntArray( 0, ET_MISSILE )"
    },
    "339": {
        "fuction_name": "GetEntArrayFromArray",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "array": "array of entities",
            "name": "name to search for",
            "key": "key that name goes with"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Searches given array entities by key and name and a return an array of the matched entities",
        "example": "spawners = GetEntArrayFromArray( array, \"doorguy1\", \"targetname\" )"
    },
    "340": {
        "fuction_name": "GetEntByNum",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "entity number": "(integer) The number of the entity to get"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets an entity from its entity number",
        "example": "entity = GetEntByNum( entnum )"
    },
    "341": {
        "fuction_name": "getEnterButton",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the enter button.",
        "example": "getEnterButton()"
    },
    "342": {
        "fuction_name": "GetEntityAnimRate",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "get the entity animation rate - ZOMBIES ONLY",
        "example": "rate = self GetEntityAnimRate()"
    },
    "343": {
        "fuction_name": "GetEntityNumber",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the entity number of the entity",
        "example": "hitEntNum = hitEnt getEntityNumber()"
    },
    "344": {
        "fuction_name": "GetEntityType",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the type of entity",
        "example": "inflictorEntType = grenade getEntityType()"
    },
    "345": {
        "fuction_name": "GetEntNavMaterial",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "ai_or_vehicle": "An AI character or an AI vehicle"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "get NavMesh material at where the entity stands",
        "example": "material = GetEntNavMaterial( ai_actor )"
    },
    "346": {
        "fuction_name": "GetEntNum",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the entity number for this entity",
        "example": "self GetEntNum()"
    },
    "347": {
        "fuction_name": "GetEquipmentHeadObjective",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the equipment head objective as described in the grenadeweapon gdt.",
        "example": "headObjective = GetEquipmentHeadObjective( bouncingbettty )"
    },
    "348": {
        "fuction_name": "GetEquippedBodyAccentColorForHero",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "sessionMode": "The character's session mode",
            "heroIndex": "The index of the hero in the current game-mode's character table or in case of lobby client, his queue position",
            "bodyIndex": "The index of the body",
            "colorIndex": "The index of the accent color"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns an array of the equipped body accent colors of a specific hero",
        "example": "colorArray = GetEquippedBodyAccentColorForHero( localClientNum, 0 )"
    },
    "349": {
        "fuction_name": "GetEquippedBodyForHero",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "sessionMode": "The character's sessionMode",
            "heroIndex": "The index of the hero in the current game-mode's character table"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the name of the equipped body model of a specific hero",
        "example": "modelName = GetEquippedBodyForHero( localClientNum, SESSIONMODE_MULTIPLAYER, 0 )"
    },
    "350": {
        "fuction_name": "GetEquippedBodyIndexForHero",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "sessionMode": "Character Session Mode",
            "heroIndex": "The index of the hero in the current game-mode's character table or in case of lobby client, his queue position"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the index of the equipped body model of a specific hero",
        "example": "bodyIndex = GetEquippedBodyIndexForHero( localClientNum, 0 )"
    },
    "351": {
        "fuction_name": "GetEquippedCharacterIndexForLobbyClientHero",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "lobbyClientQueueIndex": "Queue index for lobby client, from which we get all his other information"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the name of the equipped helmet accents colors of a specific hero",
        "example": "colorArray = GetEquippedHelmetAccentColorForHero( localClientNum, 0 )"
    },
    "352": {
        "fuction_name": "GetEquippedHeadIndexForHero",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "sessionMode": "The character's sessionMode"
        },
        "optional_parameters": {
            "getForLobbyClient": "If this is set then check for the equipped head on the client in the lobbyQueueIndex position"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the index of the equipped head index",
        "example": "helmetIndex = GetEquippedHeadIndexForHero( localClientNum )"
    },
    "353": {
        "fuction_name": "GetEquippedHelmetAccentColorForHero",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "sessionMode": "The character session mode",
            "heroIndex": "The index of the hero in the current game-mode's character table",
            "helmetIndex": "The index of the helmet",
            "colorIndex": "The index of the accent color"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the name of the equipped helmet accents colors of a specific hero",
        "example": "colorArray = GetEquippedHelmetAccentColorForHero( localClientNum, 0 )"
    },
    "354": {
        "fuction_name": "GetEquippedHelmetForHero",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "sessionMode": "The character's sessionMode",
            "heroIndex": "The index of the hero in the current game-mode's character table"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the name of the equipped helmet model of a specific hero",
        "example": "modelName = GetEquippedHelmetForHero( localClientNum, SESSIONMODE_MULTIPLAYER, 0 )"
    },
    "355": {
        "fuction_name": "GetEquippedHelmetIndexForHero",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "sessionMode": "The character's sessionMode",
            "heroIndex": "The index of the hero in the current game-mode's character table or in case of lobby client, his queue position"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the index of the equipped helmet index of a specific hero",
        "example": "helmetIndex = GetEquippedHelmetIndexForHero( localClientNum, 0 )"
    },
    "356": {
        "fuction_name": "GetEquippedHeroIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "sessionMode": "The character's sessionMode"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the index of the equipped hero for the client",
        "example": "heroIndex = GetEquippedHeroIndex( localClientNum )"
    },
    "357": {
        "fuction_name": "GetEquippedHeroMode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the mode of the equipped hero for the client",
        "example": "heroIndex = GetEquippedHeroMode( localClientNum )"
    },
    "358": {
        "fuction_name": "GetEquippedLoadoutItemForHero",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "heroIndex": "The index of the hero in the current game-mode's character table"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the hero's ability is equipped, 0 if the weapon is equipped.",
        "example": "isAbilityEquipped = GetEquippedLoadoutItemForHero( localClientNum, 0 )"
    },
    "359": {
        "fuction_name": "GetEquippedShowcaseWeaponForHero",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "sessionMode": "The character's sessionMode",
            "heroIndex": "The index of the hero in the current game-mode's character table or in case of lobby client, his queue position"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the showcase weapon of a specific hero",
        "example": "showcaseWeapon = GetEquippedShowcaseWeaponForHero( localClientNum, 0 )"
    },
    "360": {
        "fuction_name": "GetEventPointOfInterest",
        "return_type": "void",
        "called_by": "<ai_or_player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the point of interest from the current event.",
        "example": "point = self GetEventPointOfInterest()"
    },
    "361": {
        "fuction_name": "GetEye",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the eye position of the entity.",
        "example": "eye_pos = self GetEye()"
    },
    "362": {
        "fuction_name": "GetEyeApprox",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the eye position of the entity with some added offset.",
        "example": "approx_eye_pos = self GetEyeGetEyeApprox()"
    },
    "363": {
        "fuction_name": "GetFirstHeadOfGender",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "gender": "\"male\" or \"female\""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the first head of gender (\"male\" or \"female\")",
        "example": "headIndex = GetFirstHeadOfGender( \"male\", \"mp\" )"
    },
    "364": {
        "fuction_name": "GetFirstHeroOfGender",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "gender": "\"male\" or \"female\""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the first hero of gender (\"male\" or \"female\")",
        "example": "characterIndex = GetFirstHeroOfGender( \"male\", \"mp\" )"
    },
    "365": {
        "fuction_name": "GetFirstTouchFraction",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "other entity": "Entity to check against",
            "start": "Starting point of the trace",
            "end": "Ending point of the trace"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the trace fraction of a capsule trace against the other entity",
        "example": "fraction = GetFirstTouchFraction( player, trigger, old_origin, current_origin )"
    },
    "366": {
        "fuction_name": "GetFlowGraphDef",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "The name of the flow graph asset"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "returns a struct representing the flow graph definition asset",
        "example": "flowGraphDef = GetFlowGraphDef( \"my_flow_graph\" )"
    },
    "367": {
        "fuction_name": "GetFogSettings",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the current fog settings as an array.",
        "example": "fogsettings = getfogsettings()"
    },
    "368": {
        "fuction_name": "GetFootstepStrings",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns an array containing all the footstep names",
        "example": "footstepNameArray = GetFootstepStrings()"
    },
    "369": {
        "fuction_name": "GetFreeActorCount",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get number of free actors.",
        "example": "GetFreeActorCount()"
    },
    "370": {
        "fuction_name": "GetFreerunTrackIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the unique id for this mission",
        "example": "level.index = GetFreerunTrackIndex( \"mp_Freerun_01\" )"
    },
    "371": {
        "fuction_name": "GetFriendlyScramblerAmount",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the amount alpha of the friendly scrambler applied",
        "example": "alpha = player GetFriendlyScramblerAmount( )"
    },
    "372": {
        "fuction_name": "GetGadgetPower",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the current power level of the player gadget",
        "example": "power = GetGadgetPower( localClientNum )"
    },
    "373": {
        "fuction_name": "GetGameTypeEnumFromName",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "gameTypeName": "game type name e.g. \"tdm\".",
            "isHardcore": "True if the hardcore mode is on"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the enum value corresponding to the current game type from global leaderboard gametype entries.",
        "example": "gameTypeEnum = GetGameTypeEnumFromName( \"tdm\", false )"
    },
    "374": {
        "fuction_name": "GetGametypeSetting",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "setting": "The setting name as a string."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the value of a gametype setting.",
        "example": "GetGametypeSetting( \"scoreLimit\" )"
    },
    "375": {
        "fuction_name": "GetGrappleTargetArray",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of all of the grapple targets",
        "example": "enemies = GetGrappleTargetArray()"
    },
    "376": {
        "fuction_name": "GetGroundEnt",
        "return_type": "entity",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the entity beneath the calling entity",
        "example": "ground_ent = self GetGroundEnt()"
    },
    "377": {
        "fuction_name": "GetHeadGender",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "headIndex": "The index of the head"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the given head's gender (\"male\" or \"female\")",
        "example": "gender = GetHeadGender( headIndex, \"mp\" )"
    },
    "378": {
        "fuction_name": "GetHealthOverlayTime",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the time the health overlay has been on",
        "example": "power = GetHealthOverlayTime( localClientNum )"
    },
    "379": {
        "fuction_name": "GetHeliDamageState",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the damage state of the heli.",
        "example": "vehicle GetHeliDamageState( )"
    },
    "380": {
        "fuction_name": "GetHelmetAccentColorCountForHero",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "heroIndex": "The index of the hero in the current game-mode's character table",
            "helmetIndex": "The index of the helmet for the specific hero"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the number of accents for the specified helmet model of a specific hero",
        "example": "accentColorCount = GetHelmetAccentColorCountForHero( localClientNum, 0, 0 )"
    },
    "381": {
        "fuction_name": "GetHeroBodyModelIndices",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "heroIndex": "The index of the hero"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the given hero's body models for the current session mode",
        "example": "heroBodyModelNames = GetHeroBodyModels( heroIndex, \"mp\" )"
    },
    "382": {
        "fuction_name": "GetHeroes",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns all hero indices for the current session mode (or specified session mode)",
        "example": "heroIndices = GetHeroes()"
    },
    "383": {
        "fuction_name": "GetHeroGender",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "heroIndex": "The index of the hero"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the given hero's gender (\"male\" or \"female\")",
        "example": "gender = GetHeroGender( heroIndex, \"mp\" )"
    },
    "384": {
        "fuction_name": "GetHeroHeadModelIndices",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns all hero indices for the current session mode",
        "example": "heroHelmetModelNames = GetHeroHelmetModels( heroIndex, \"mp\" )"
    },
    "385": {
        "fuction_name": "GetHeroHelmetModelIndices",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "heroIndex": "The index of the hero"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the given hero's helmet models for the current session mode",
        "example": "heroHelmetModelNames = GetHeroHelmetModelIndices( heroIndex, \"mp\" )"
    },
    "386": {
        "fuction_name": "GetHorizontalOffsetFromScreenCenter",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "localClientNum": "Local client to check"
        },
        "optional_parameters": {
            "width": "width to check against"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the distance from the screen center to the entity",
        "example": "ent GetDistanceFromScreenCenter( localClientNum )"
    },
    "387": {
        "fuction_name": "GetInfluenceAt",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "influenceMapIndex": "Index of the influence map",
            "origin": "The location to check for influence value"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the influence value at the origin position on the influence map, undefined if no value can be found.",
        "example": "GetInfluenceAt(influenceMapIndex, origin)"
    },
    "388": {
        "fuction_name": "GetInfluenceFacePos",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the faces pos on the influence map",
        "example": "pos = GetInfluenceFacePos( faceIndex )"
    },
    "389": {
        "fuction_name": "GetInfluenceNumFaces",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the number faces on the influence",
        "example": "numFaces = GetInfluenceNumFaces()"
    },
    "390": {
        "fuction_name": "GetInfluencerPreset",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "valid spawn influencer preset name."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Adds a new influencer of <name> at <origin> and <angles>",
        "example": "preset_array = GetInfluencerPreset( name )"
    },
    "391": {
        "fuction_name": "GetInfluencerTimeoutRemaining",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "influencer id": "The influencer id"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the remaining influencer timeout in milliseconds.  Returns a negative number if no timeout.",
        "example": "GetInfluencerTimeout( influencer_id )"
    },
    "392": {
        "fuction_name": "GetInKillcam",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "local_client_num": "The local client to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "returns if the client is in killcam or not.",
        "example": null
    },
    "393": {
        "fuction_name": "GetInterestPoolAwareness",
        "return_type": "void",
        "called_by": "<ai>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current interest pool awareness level regardless of actual awareness level.",
        "example": "interestAwareness = self GetInterestPoolAwareness()"
    },
    "394": {
        "fuction_name": "GetInterestPoolValue",
        "return_type": "void",
        "called_by": "<ai_or_player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the sentient's interest pool value.",
        "example": "value = self GetInterestPoolValue()"
    },
    "395": {
        "fuction_name": "GetItemArray",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of all of the items in a level.",
        "example": "origins = GetItemArray()"
    },
    "396": {
        "fuction_name": "GetItemAttachment",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "itemIndex": "The item index",
            "attachmentNum": "The attachment number for the index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the attachment for a particular item",
        "example": "GetItemAttachment( 10, 1 ); // returns attachment 1 for item 10"
    },
    "397": {
        "fuction_name": "GetItemAttachmentAllocationCost",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "itemIndex": "The item index",
            "attachmentNum": "The attachment number for the index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the allocation cost of an attachment for a particular item",
        "example": "GetItemAttachmentAllocationCost( 10, 1 ); // returns allocation cost of attachment 1 for item 10"
    },
    "398": {
        "fuction_name": "GetItemGroupForWeaponName",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weaponName": "Name of weapon to get item group"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the ref for a specific weapon name",
        "example": "ref = GetItemGroupForWeapon( weapon )"
    },
    "399": {
        "fuction_name": "GetItemGroupFromItemIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "itemIndex": "Item index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the ref for a specified item index",
        "example": "ref = GetItemGroupFromItemIndex( itemIndex )"
    },
    "400": {
        "fuction_name": "GetKillCamEntity",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "local_client_num": "The local client to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "returns the killcamentity.",
        "example": null
    },
    "401": {
        "fuction_name": "GetKnownLength",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "playbackId": "The sound id"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the known length of the sound",
        "example": "length = GetKnownLength( level.mySnd )"
    },
    "402": {
        "fuction_name": "GetLastOutWaterTime",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the last time the player was not completely submerged",
        "example": "time = player GetLastOutWaterTime()"
    },
    "403": {
        "fuction_name": "GetLightColor",
        "return_type": "void",
        "called_by": "<light>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current color of the light, as an RGB vector.",
        "example": "color = self GetLightColor()"
    },
    "404": {
        "fuction_name": "GetLightExponent",
        "return_type": "void",
        "called_by": "<light>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current exponent of the light.",
        "example": "exponent = self GetLightExponent()"
    },
    "405": {
        "fuction_name": "GetLightFovOuter",
        "return_type": "void",
        "called_by": "<light>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current outer fov of a spot light.",
        "example": "fov = self GetLightFovOuter()"
    },
    "406": {
        "fuction_name": "GetLightIntensity",
        "return_type": "void",
        "called_by": "<light>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current intensity of the light.",
        "example": "intensity = self GetLightIntensity()"
    },
    "407": {
        "fuction_name": "GetLightRadius",
        "return_type": "void",
        "called_by": "<light>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current radius of the light.",
        "example": "radius = self GetLightRadius()"
    },
    "408": {
        "fuction_name": "GetLinkedEnt",
        "return_type": "entity",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the entity that the calling entity is linked to",
        "example": "linked_ent = self GetLinkedEnt()"
    },
    "409": {
        "fuction_name": "GetLoadoutAllocation",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "custom Class": "Class Num"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get how many allocation points are spent in the custom class",
        "example": "allocationSpent = self GetLoadoutAllocation( 0 )"
    },
    "410": {
        "fuction_name": "GetLoadoutGunSmithVariantIndex",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "custom Class": "Class Num"
        },
        "optional_parameters": {
            "getSecondary": "defaults to false, if set will get you the variant index of the secondary"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the GunSmith Variant index of the primary weapon, pass 1 as an option to get the secondary",
        "example": "gunSmithPrimaryIndex = self GetLoadoutGunSmithVariantIndex( 0, 0 )"
    },
    "411": {
        "fuction_name": "GetLoadoutItem",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "custom Class": "Class Num",
            "loadoutSlot": "Loadout Slot"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the index of the item in the custom class",
        "example": "primary = self GetLoadoutItem( 0, primary )"
    },
    "412": {
        "fuction_name": "GetLoadoutItemRef",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "custom Class": "Class Num",
            "loadoutSlot": "Loadout Slot"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the reference of the item in the custom class",
        "example": "primary = self GetLoadoutItemRef( 0, primary )"
    },
    "413": {
        "fuction_name": "GetLoadoutPerks",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "custom Class": "Class Num"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the list of specialties in the custom class",
        "example": "primary = self GetLoadoutPerks( 0 )"
    },
    "414": {
        "fuction_name": "GetLoadoutWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "custom Class": "Class Num",
            "loadoutSlot": "Loadout Slot (primary or secondary)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the full weapon name (including attachments) of the item in the custom class",
        "example": "primary = self GetLoadoutWeapon( 0, primary )"
    },
    "415": {
        "fuction_name": "GetLobbyClientCount",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the number of connected or connecting clients",
        "example": "clientCount = GetClientCount()"
    },
    "416": {
        "fuction_name": "GetLocalClientAngles",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "client": "the client to get angles for"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the local client angles",
        "example": "client_angles = GetLocalClientAngles()"
    },
    "417": {
        "fuction_name": "GetLocalClientDriver",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the local client index of the driver of the vehicle if the driver is a local client or undefined.",
        "example": "driver = self GetLocalClientDriver( )"
    },
    "418": {
        "fuction_name": "GetLocalClientEyePos",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "client": "the client to get eye pos for"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets the local client eye pos",
        "example": "eye_pos = GetLocalClientEyePos( 0 )"
    },
    "419": {
        "fuction_name": "GetLocalClientFOV",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "client": "the client index to get fov for"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the local client field of view in degrees",
        "example": "client_fov = GetLocalClientFOV()"
    },
    "420": {
        "fuction_name": "GetLocalClientNumber",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the local client number.",
        "example": "clientNum = self GetLocalClientNumber()"
    },
    "421": {
        "fuction_name": "GetLocalClientPos",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "client": "the client to get position"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns pos of localclient",
        "example": "origin = GetLocalClientPos( 0 )"
    },
    "422": {
        "fuction_name": "GetLocalGunnerAngles",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "gunnerIndex": "The index of the gunner seat"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the angles of the specified gunner, local to the vehicle itself.",
        "example": "localAngles = self GetLocalGunnerAngles( 0 )"
    },
    "423": {
        "fuction_name": "GetLocalPlayer",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "local client num": "local client"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the local player predicted centity.",
        "example": "GetLocalPlayer( 0 )"
    },
    "424": {
        "fuction_name": "GetLocalPlayers",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get an array of all the local players",
        "example": "players = GetLocalPlayers()"
    },
    "425": {
        "fuction_name": "GetLocalPlayerTeam",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Number of the local client to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets the team of the local player",
        "example": "team = GetLocalPlayerTeam( 0 )"
    },
    "426": {
        "fuction_name": "GetMapAtIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "index": "the index of the map you're looking for."
        },
        "optional_parameters": {
            "dlcindex": "dlc1..N if DLC.  If ommitted, use \"base\".",
            "sessionmodeabbrev": "cp,mp,zm.  If ommitted, use current game mode abbreviation"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Get the name of the map at the given index in a mode's maptable.  Returns undefined if the given index doesn't index the given maptable",
        "example": "GetMapAtIndex( \"cp_mi_sing_blackstation\" )"
    },
    "427": {
        "fuction_name": "GetMapFields",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {
            "currentmap": "the name of the current map.  If ommitted, use Dvar sv_mapname",
            "dlcindex": "dlc1..N if DLC.  If ommitted, use \"base\".",
            "sessionmodeabbrev": "cp,mp,zm.  If ommitted, use current game mode abbreviation"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Get the outro movie of the current map in the maptable.  Returns undefined if currentmap wasn't found",
        "example": "fields = GetMapFields( GetNextMap(\"cp_mi_sing_blackstation\") )"
    },
    "428": {
        "fuction_name": "GetMapIntroMovie",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the intro movie of the current map in the maptable.  Returns undefined if currentmap wasn't found",
        "example": "world.nextIntroMovie = GetMapIntroMovie( GetNextMap(\"cp_mi_sing_blackstation\") )"
    },
    "429": {
        "fuction_name": "GetMapOrder",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the index of the current map in the maptable.  Returns -1 if currentmap wasn't found",
        "example": "if( GetMapOrder( \"cp_mi_sing_blackstation\" ) > GetMapOrder( world.highestMapCompletion ) { world.highestMapCompletion = \"cp_mi_sing_blackstation\"; }"
    },
    "430": {
        "fuction_name": "GetMapOutroMovie",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the outro movie of the current map in the maptable.  Returns undefined if currentmap wasn't found",
        "example": "world.nextOutroMovie = GetMapIntroMovie( GetNextMap(\"cp_mi_sing_blackstation\") )"
    },
    "431": {
        "fuction_name": "GetMaxLocalClients",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the max number of local clients",
        "example": "max_clients = GetMaxLocalClients()"
    },
    "432": {
        "fuction_name": "GetMaxReverseSpeed",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get maximum reverse speed of a vehicle.",
        "example": "speed = vehicle GetMaxReverseSpeed()"
    },
    "433": {
        "fuction_name": "GetMaxs",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get maximum bounds of the entity",
        "example": "maxs = wallModel GetMaxs()"
    },
    "434": {
        "fuction_name": "GetMaxVehicles",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return the maximum number of vehicles that can be instantiated simultaneously.  This is platform-specific.",
        "example": "vehicleSlotsFree = GetMaxVehicles() - level.vehicles_list.size"
    },
    "435": {
        "fuction_name": "GetMeleeChainCount",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the number of melee kills achieved by the player within their current streak.",
        "example": "entity GetMeleeChainCount( )"
    },
    "436": {
        "fuction_name": "getmicrosecondsraw",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets raw system microseconds; used for profiling, only gives lower 32 bits as script doesn't support uint64_t properly right now",
        "example": "start_time = GetMicrosecondsRaw()"
    },
    "437": {
        "fuction_name": "GetMigrationStatus",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": null,
        "example": null
    },
    "438": {
        "fuction_name": "GetMillisecondsRaw",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets raw system milliseconds; use for profiling long routines as it is only an integer",
        "example": "start_time = GetMillisecondsRaw()"
    },
    "439": {
        "fuction_name": "GetMins",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get minimum bounds of the entity",
        "example": "mins = wallModel GetMins()"
    },
    "440": {
        "fuction_name": "GetMissileOwner",
        "return_type": "entity",
        "called_by": "<missile>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the entity that owns this missile",
        "example": "javelinOwner = GetMissileOwner( thisMissile )"
    },
    "441": {
        "fuction_name": "GetMissionName",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the name of the mission this map is part of",
        "example": "level.mission = GetMissionName( \"cp_mi_cairo_ramses2\" )"
    },
    "442": {
        "fuction_name": "GetMissionUniqueID",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the unique id for this mission",
        "example": "level.unique_id = GetMissionUniqueID( \"cp_mi_cairo_ramses2\" )"
    },
    "443": {
        "fuction_name": "GetMissionVersion",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the unique id for this mission",
        "example": "level.unique_id = GetMissionVersion( \"cp_mi_cairo_ramses2\" )"
    },
    "444": {
        "fuction_name": "GetMoveDelta",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "animation name": "Name of the animation"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the move delta for the animation",
        "example": "localDeltaVector = GetMoveDelta( animation, 0, 1, entity )"
    },
    "445": {
        "fuction_name": "GetMovementType",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the movement type for the entity",
        "example": "movement_type = self GetMovementType()"
    },
    "446": {
        "fuction_name": "GetMoverEnt",
        "return_type": "entity",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the moving entity the player is sitting on .",
        "example": "if(player GetMoverEnt())"
    },
    "447": {
        "fuction_name": "GetMoveSpeedScale",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the speed scale multiplier for the entity",
        "example": "speed_modifier = self GetMoveSpeedScale()"
    },
    "448": {
        "fuction_name": "GetNavMeshFaceNormal",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "Position to start the search around.",
            "searchRadius": "Radius to search within."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the face normal vector of the closest navmesh point to the passed in position, within the search radius.",
        "example": "navmeshNormal = GetNavMeshFaceNormal( (10,20,30), 25 )"
    },
    "449": {
        "fuction_name": "GetNavMeshTriggersForPoint",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "pos": "The test position."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns a list of the names of navmesh triggers that a given point resides in",
        "example": "targetNames = GetNavMeshTriggersForPoint( pos )"
    },
    "450": {
        "fuction_name": "GetNearestNode",
        "return_type": "pathnode",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "location to search for the nearest node"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the node nearest to this origin or undefined if no close node exists.",
        "example": "node = GetNearestNode( guy.origin )"
    },
    "451": {
        "fuction_name": "GetNearestPathPoint",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "The point from which to search from",
            "radius": "The maximum radius in which to search"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the nearest point on the navmesh for the given origin and radius or undefined if no point can be found.",
        "example": null
    },
    "452": {
        "fuction_name": "GetNextMap",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the name of the next map in the maptable.  Returns \"\" if this is the last map, undefined if currentmap wasn't found",
        "example": "GetNextMap( \"cp_mi_sing_blackstation\" )"
    },
    "453": {
        "fuction_name": "GetNextTraversalNodeOnPath",
        "return_type": "pathnode",
        "called_by": null,
        "mandatory_parameters": {
            "start": "the  index for the starting node"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": "GetNextTraversalNodeOnPath(1)"
    },
    "454": {
        "fuction_name": "GetNode",
        "return_type": "pathnode",
        "called_by": null,
        "mandatory_parameters": {
            "name": "name to search for",
            "key": "key that name goes with"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets a node with the given name, key pair",
        "example": "node = GetNode( self.target, \"targetname\" )"
    },
    "455": {
        "fuction_name": "GetNodeArray",
        "return_type": "pathnode",
        "called_by": null,
        "mandatory_parameters": {
            "name": "name to search for",
            "key": "key that name goes with"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets an array of nodes that have the given name, key pair",
        "example": "node = GetNodeArray( self.target, \"targetname\" )"
    },
    "456": {
        "fuction_name": "GetNodeArraySorted",
        "return_type": "pathnode",
        "called_by": null,
        "mandatory_parameters": {
            "name": "name to search for",
            "key": "key that name goes with",
            "pos": "search origin",
            "r": "the radius to sort in"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets an array of nodes that have the given name, key pair, within given radius, sorts them",
        "example": "nodes = GetNodeArraySorted(self.target, \"targetname\", self.origin, 256 )"
    },
    "457": {
        "fuction_name": "GetNodeEdge",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "node volume"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of points which corresponds to the node volume's traversal edge. The traversal edge is represented as a piecewise linear function.",
        "example": "points = GetNodeEdge( myNode )"
    },
    "458": {
        "fuction_name": "GetNodeIndexOnPath",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "The node to get the other node for"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": "GetNodeIndexOnPath(node)"
    },
    "459": {
        "fuction_name": "GetNodeOwner",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "node": "which node to get the owner of."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the owner of the node.",
        "example": "node_owner = GetNodeOwner( node ) )"
    },
    "460": {
        "fuction_name": "GetNodeRegion",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node1": "pathnode to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the region of the give node, if there is one. Returns undefined otherwise.",
        "example": "if ( GetNodeRegion( myNode ) )"
    },
    "461": {
        "fuction_name": "GetNodesInRadius",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "location to search for nodes at",
            "max radius": "maximum distance of nodes to return",
            "min radius": "maximum distance of nodes to return"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets all of the nodes (max of 256) within a cylinder, in unsorted order",
        "example": "nodes = GetNodesInRadius( guy.origin, 512, 0, 128, \"Path\" )"
    },
    "462": {
        "fuction_name": "GetNodesInRadiusSorted",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "location to search for nodes at",
            "max radius": "maximum distance of nodes to return",
            "min radius": "maximum distance of nodes to return"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets all of the nodes (max of 256) within a cylinder, sorted by closest to <origin>",
        "example": "nodes = GetNodesInRadiusSorted( guy.origin, 512, 0, 128, \"Path\" )"
    },
    "463": {
        "fuction_name": "GetNonPredictedLocalPlayer",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "local client num": "local client"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the local player non predicted centity.",
        "example": "GetNonPredictedLocalPlayer( 0 )"
    },
    "464": {
        "fuction_name": "GetNormalHealth",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get health in a normalized range of 0 to 1",
        "example": "normal_health = self GetNormalHealth()"
    },
    "465": {
        "fuction_name": "GetNorthYaw",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get North Yaw",
        "example": "northvector = (cos(getnorthyaw()), sin(getnorthyaw()), 0)"
    },
    "466": {
        "fuction_name": "GetNotetracksInDelta",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "animation": "the animation for which notetrack information is needed",
            "time": "The time in the animation around which notetrack information is needed in the range 0-1"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get a list of notetracks and times within a specific time delta of a specific time in an animation",
        "example": "notetrackArray = GetNotetracksInDelta( anim, 0.4 )"
    },
    "467": {
        "fuction_name": "GetNotetrackTimes",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "animation": "an animation",
            "note track": "a constant string with the name of the note track"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets an array of the times during an animation that the given notetrack occurs. The times returned are fractional (0 to 1).",
        "example": "exitAlignTimes = GetNotetrackTimes( exitAnim, \"exit_align\" )"
    },
    "468": {
        "fuction_name": "GetNumberOfCollectiblesForLevel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the number of collectibles for the given level",
        "example": "collectibleCount = GetNumberOfCollectiblesForLevel( GetRootMapName() )"
    },
    "469": {
        "fuction_name": "GetNumChallengesComplete",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "mission_name": "(string) The name of the mission to check completed challenges in"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the number of challenges completed in a given mission",
        "example": "is_default = self GetNumChallengesComplete( \"angola\" )"
    },
    "470": {
        "fuction_name": "GetNumConnectedPlayers",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {
            "include bots": "The optional check to include test clients (bots). (bool)"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the number of players that are connected to our game.  Ignores bots by default.",
        "example": "num_players_and_bots = GetNumConnectedPlayers( true )"
    },
    "471": {
        "fuction_name": "GetNumExpectedPlayers",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the number of players that we're expecting to join our game.",
        "example": "num_players = GetNumExpectedPlayers()"
    },
    "472": {
        "fuction_name": "GetNumFreeEntities",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "local client number": "Which local client to spawn the entity for."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the number of free fake entities",
        "example": "numfree = GetNumFreeEntities( localClientNum )"
    },
    "473": {
        "fuction_name": "GetNumParts",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "model": "The model to get parts for"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return number of bones in the model",
        "example": "numParts = GetNumParts( model )"
    },
    "474": {
        "fuction_name": "GetNumZBarrierPieces",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns number of pieces in specified zbarrier ent.",
        "example": "numPieces = ent GetNumZBarrierPieces())"
    },
    "475": {
        "fuction_name": "GetOrigin",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the origin of the entity",
        "example": "origin = self GetOrigin()"
    },
    "476": {
        "fuction_name": "GetOtherNodeInNegotiationPair",
        "return_type": "pathnode",
        "called_by": null,
        "mandatory_parameters": {
            "node": "The node to get the other node for"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the other node of the passed in negotiation node. Returns the begin node if end is passed and vice versa.",
        "example": "end_node = GetOtherNodeInNegotiationPair( begin_node )"
    },
    "477": {
        "fuction_name": "GetOwner",
        "return_type": "entity",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "localClientNum": "Local client to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get an entity's owner",
        "example": "ent GetOwner( localClientNum )"
    },
    "478": {
        "fuction_name": "GetParentEntity",
        "return_type": "entity",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets the parent entity.  Requires client-side linking to be set up on the entity.",
        "example": "parent = self GetParentEntity( )"
    },
    "479": {
        "fuction_name": "GetPartName",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "model": "The model to get parts for",
            "index": "The bone index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the bone name for the model and index",
        "example": "boneName = GetPartName( model, 1 )"
    },
    "480": {
        "fuction_name": "GetPathfindingRadius",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the radius used for pathfinding operations.",
        "example": "radius = ent GetPathfindingRadius()"
    },
    "481": {
        "fuction_name": "GetPathMetric",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "origin": "the goal for the path"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get path metric for the path from the ai to origin",
        "example": "path_metric = level.ai_for_pathing GetPathMetric( dropPos )"
    },
    "482": {
        "fuction_name": "GetPlaybackTime",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "playbackId": "The sound id"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the playback time for the sound given by playbackId",
        "example": "time = GetPlaybackTime( level.mySnd )"
    },
    "483": {
        "fuction_name": "GetPlayerCorpse",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets the most recent corpse fort he player",
        "example": "cybercom_type = player GetPlayerCorpse()"
    },
    "484": {
        "fuction_name": "GetPlayerGibDef",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns string of gibdef for current player",
        "example": null
    },
    "485": {
        "fuction_name": "GetPlayerGravity",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the gravity or gravity override value for the player.",
        "example": "player GetPlayerGravity()"
    },
    "486": {
        "fuction_name": "GetPlayerLastOutWaterTime",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets the last time the player was not underwater",
        "example": "waterTime = player GetPlayerLastOutWaterTime()"
    },
    "487": {
        "fuction_name": "GetPlayerName",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets the character index",
        "example": "player_name = self GetPlayerName()"
    },
    "488": {
        "fuction_name": "GetPlayers",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of the currently connected players.  Used internally to the script call get_players().",
        "example": "players = GetPlayers()"
    },
    "489": {
        "fuction_name": "GetPlayerSelectedGestureName",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "gestureType": "The type of gesture to get"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the equipped gesture animation name",
        "example": "gesture = player GetPlayerSelectedGestureName( 0 )"
    },
    "490": {
        "fuction_name": "GetPlayerSelectedTauntName",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "tauntType": "The type of taunt to get"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the equipped taunt animation name",
        "example": "taunt = player GetPlayerSelectedTauntName( 0 )"
    },
    "491": {
        "fuction_name": "GetPlayerSpawnId",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "The player that we are spawning in"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the current spawn id for the player (used for debugging purposes only)",
        "example": "spawnId = GetPlayerSpawnId( player )"
    },
    "492": {
        "fuction_name": "GetPlayerSpeed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the speed value for the player.",
        "example": "player GetPlayerSpeed()"
    },
    "493": {
        "fuction_name": "GetPlayerVehicle",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "player": "The player to check vehicle for"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns undefined if the player is not in a vehicle",
        "example": "vehicle = GetPlayerVehicle( self )"
    },
    "494": {
        "fuction_name": "GetPointInBounds",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "ratio_ForwardBack": "1.0 is full forward, -1.0 is full backwards.",
            "ratio_LeftRight": "1.0 is full left, -1.0 is full right.",
            "ratio_UpDown": "1.0 is full up, -1.0 is full down."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns a point within an entity's bounds.",
        "example": "targetForwardPnt = helo GetPointInBounds( 1.0, 0.0, 0.0 )"
    },
    "495": {
        "fuction_name": "GetPrimaryDeltaAnim",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the primary delta anim playing on this entity, or the name of the animation if the entity is in an animscripted state.",
        "example": "anim = self GetPrimaryDeltaAnim()"
    },
    "496": {
        "fuction_name": "GetRandomCompatibleAttachmentsForWeapon",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weapon": "The weapon name."
        },
        "optional_parameters": {
            "num desired attachments": "Max number of compatible attachments desired. If the number is more than available attachments for the weapon, it will just not return that many."
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of compatible attachments. If num desired attachments are specified then that many attachments will be returned if possible",
        "example": "GetRandomCompatibleAttachmentsForWeapon( weaponObject, 4 )"
    },
    "497": {
        "fuction_name": "GetRandomPointOnNavVolume",
        "return_type": "void",
        "called_by": "<flying_ai>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get a random point on nav volume. Returns the position if found one, or undefined if not found.",
        "example": "random = self GetRandomPointOnNavVolume()"
    },
    "498": {
        "fuction_name": "GetRealTime",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the real system time in milliseconds",
        "example": "time = GetRealTime()"
    },
    "499": {
        "fuction_name": "GetRefFromItemIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "itemIndex": "Item index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the ref for a specified item index",
        "example": "ref = GetRefFromItemIndex( itemIndex )"
    },
    "500": {
        "fuction_name": "GetReflectionLocs",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets array of the locations of all of the reflection_probes in the level",
        "example": "reflection_locs = GetReflectionLocs()"
    },
    "501": {
        "fuction_name": "GetReflectionOrigin",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Given a position, returns the position of the reflection probe in use there",
        "example": "probe_pos = GetReflectionOrigin( camera_pos )"
    },
    "502": {
        "fuction_name": "GetRetrievableWeapons",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of weapons that need watchers so they can be retrieved by the player.",
        "example": "retrievableWeapons = GetRetrievableWeapons()"
    },
    "503": {
        "fuction_name": "GetRevealPulseMaxRadius",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the max radius for the reveal vision pulse",
        "example": "power = GetRevealPulseMaxRadius( localClientNum )"
    },
    "504": {
        "fuction_name": "GetRevealPulseOrigin",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the pulse origin for the local client reveal pulse",
        "example": "power = GetRevealPulseOrigin( localClientNum )"
    },
    "505": {
        "fuction_name": "GetRevealPulseRadius",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the radius for the local client reveal pulse",
        "example": "power = GetRevealPulseRadius( localClientNum )"
    },
    "506": {
        "fuction_name": "GetRootMapName",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the root map of a mission",
        "example": "level.rootMap = GetRootMapName( \"cp_mi_cairo_ramses2\" )"
    },
    "507": {
        "fuction_name": "GetRope",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "targetname": "The targetname of the rope you interested in"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the rope index based on targetname. Use it for ropes setuped in radiant. Returns -1, if not found.",
        "example": "GetRope( \"testrope\" )"
    },
    "508": {
        "fuction_name": "GetRoundsPlayed",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "value": "The number of rounds played"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get rounds played in match state",
        "example": "GetRoundsPlayed( game[\"roundsplayed\"] )"
    },
    "509": {
        "fuction_name": "GetScriptBundle",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the script bundle struct.",
        "example": "settings = GetScriptBundle( \"doorsettings\" )"
    },
    "510": {
        "fuction_name": "GetScriptBundleList",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the script bundle list array.",
        "example": "settings = GetScriptBundleList( \"doorsettings\" )"
    },
    "511": {
        "fuction_name": "GetScriptBundleNames",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns all the names of the script bundles of the specified type in an array.",
        "example": "settings = GetScriptBundleNames( \"scene\" )"
    },
    "512": {
        "fuction_name": "GetScriptBundles",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns a list of script bundles based on the type.",
        "example": "settings = GetScriptBundles( \"scenes\" )"
    },
    "513": {
        "fuction_name": "GetScriptMoverArray",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of all of the script_origins in a level.",
        "example": "origins = GetScriptMoverArray()"
    },
    "514": {
        "fuction_name": "GetServerHighestClientFieldVersion",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the server's highest clientfield version.",
        "example": "if ( my_version < GetServerHighestClientFieldVersion() )"
    },
    "515": {
        "fuction_name": "GetShootAtPos",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the position an attacker would shoot at to hit this entity.For AI or player this is the eye position.For other entities it's the tag_eye if there is one else the center of the entity bounding box.",
        "example": "targetPos = self.enemy GetShootAtPos(self)"
    },
    "516": {
        "fuction_name": "GetShoutcasterSetting",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "setting": "The setting name as a string."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets the value of a shoutcaster setting.",
        "example": "GetGametypeSetting( \"who is going to win\" )"
    },
    "517": {
        "fuction_name": "GetSkiptoName",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the skip to name with the given index",
        "example": null
    },
    "518": {
        "fuction_name": "GetSkipTos",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get all skip tos for the level",
        "example": "skiptos = GetSkipTos()"
    },
    "519": {
        "fuction_name": "GetSnapshotIndexArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of the indices of current snapshots for all connected clients.",
        "example": "snapindices = GetSnapshotIndexArray( )"
    },
    "520": {
        "fuction_name": "GetSoundFromSurfaceTable",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "surfacefxtable": "Surface fx table.",
            "surface type": "Surface type"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the fx for a given surface type from the surfacefxtable.",
        "example": "fx = GetSoundFromSurfaceTable( fx_surface_table, surface_type )"
    },
    "521": {
        "fuction_name": "GetSpawnerArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of all of the spawners in a level.",
        "example": "spawners = GetSpawnerArray()"
    },
    "522": {
        "fuction_name": "GetSpawnerTeamArray",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "team": "a team name, either 'axis', 'allies', or 'neutral'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of all of the spawners in a level",
        "example": "enemies = GetSpawnerTeamArray( \"axis\", \"neutral\" )"
    },
    "523": {
        "fuction_name": "GetSpawnStructForCharacter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "characterIndex": "The index of the character in the current game-mode's character table",
            "sessionmode": "Session Mode Index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the targetname of the script_struct to use for the character pose in the frontend",
        "example": "frontendVignetteAnim = GetSpawnStructForCharacter( characterIndex, \"mp\" )"
    },
    "524": {
        "fuction_name": "GetSpecialistIndex",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the specialist index for the player",
        "example": "specialistIndex = player GetSpecialistIndex()"
    },
    "525": {
        "fuction_name": "GetStance",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the stance of the player. It only works for the player.",
        "example": "stance = player GetStance()"
    },
    "526": {
        "fuction_name": "GetStartAngles",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "The current origin of the animation in world coordinates",
            "angle": "The current angle set of the animation in world coordinates",
            "animation": "The currently running animation"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the starting angles for an animation, in world coordinates, given its current position, and angles",
        "example": "org1 = GetStartAngles( climborg, climbang, buddyanim1, [0.5] )"
    },
    "527": {
        "fuction_name": "GetStartOrigin",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "The current origin of the animation in world coordinates",
            "angle": "The current angle set of the animation in world coordinates",
            "animation": "The currently running animation"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the starting origin for an animation, in world coordinates, given its current position, and angles",
        "example": "org1 = GetStartOrigin( climborg, climbang, buddyanim1, [0.5] )"
    },
    "528": {
        "fuction_name": "GetStartTime",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the start time for the current round.",
        "example": "GetStartTime()"
    },
    "529": {
        "fuction_name": "GetStowedWeapon",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the stowed weapon for the player",
        "example": "stowed = self GetStowedWeapon()"
    },
    "530": {
        "fuction_name": "GetStreamerRequestProgress",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "Request slot"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the progress (between 0-100) of the streamer request slot",
        "example": "getStreamerRequestProgress(0)"
    },
    "531": {
        "fuction_name": "GetStreamingProgress",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets a progress value between 0 (no progress) and 1 (complete) for all the models and meshes that the script is currently forcing",
        "example": "progress = GetStreamingProgress()"
    },
    "532": {
        "fuction_name": "GetTagAngles",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the angles of the tag",
        "example": "angles = self GetTagAngles( \"tag\" )"
    },
    "533": {
        "fuction_name": "GetTagOrigin",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the origin of the tag",
        "example": "origin = self GetTagOrigin( \"tag\" )"
    },
    "534": {
        "fuction_name": "GetTargetEntity",
        "return_type": "entity",
        "called_by": "<turret_or_vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the target entity of this turret or vehicle weapon",
        "example": "target = roof_turret GetTargetEntity( ); target = tank GetTargetEntity( )"
    },
    "535": {
        "fuction_name": "GetTargetLockEntity",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localclientnum": "localclientnum"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get locked target",
        "example": "target = self GetTargetLockEntity(<localclientnum>)"
    },
    "536": {
        "fuction_name": "GetTargetLockEntityArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get locked target",
        "example": "target = self GetTargetLockEntityArray(<localclientnum>)"
    },
    "537": {
        "fuction_name": "GetTargetOrigin",
        "return_type": "void",
        "called_by": "<turret_or_vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the target origin of this turret or vehicle weapon",
        "example": "origin = roof_turret GetTargetOrigin( ); origin = tank GetTargetOrigin( )"
    },
    "538": {
        "fuction_name": "GetTeam",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return true if the team of an entity if it can be found, undefined otherwise.",
        "example": "orig_team = self GetTeam()"
    },
    "539": {
        "fuction_name": "GetTeamPlayersAlive",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "team": "A string value, either 'axis' or 'allies' or 'team3'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the number of players still alive on a given team",
        "example": null
    },
    "540": {
        "fuction_name": "GetTeamSatellite",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "team": "The name of a team. Must be either Must be 'axis', 'allies', 'team3' or 'none'."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets whether a team has Satellite or not",
        "example": "GetTeamSatellite( \"allies\" )"
    },
    "541": {
        "fuction_name": "GetTeamScore",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "team": "The name of a team. Must be either 'axis' or 'allies' or 'team3'."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get a team's score",
        "example": "if ( GetTeamScore( \"allies\" ) > getTeamScore(\"axis\") ) ..."
    },
    "542": {
        "fuction_name": "GetTeamSpyplane",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "team": "The name of a team. Must be either Must be 'axis', 'allies', 'team3' or 'none'."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets whether a team has Spyplane or not",
        "example": "GetTeamSpyplane( \"allies\" )"
    },
    "543": {
        "fuction_name": "GetTime",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the level time in Milliseconds from the start of the level.",
        "example": "nextNodeTime = GetTime() + 500"
    },
    "544": {
        "fuction_name": "GetTopPlayersBodyModel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "topPlayerIndex": "The index of the top player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the name of the equipped body model of the top player in the game by index",
        "example": "modelName = GetTopPlayersBodyModel( localClientNum, 2 )"
    },
    "545": {
        "fuction_name": "GetTopPlayersBodyRenderOptions",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "topPlayerIndex": "The index of the top player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the render options for the body for the top player in the game by index",
        "example": "renderOptions = GetTopPlayersBodyRenderOptions( localClientNum, 2 )"
    },
    "546": {
        "fuction_name": "GetTopPlayersGesture",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "topPlayerIndex": "The index of the top player",
            "CharacterGestureTypes": "The CharacterGestureTypes enum value of the gesture to use"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the selected gesture of type CharacterGestureTypes for the given player",
        "example": "gesture_anim = GetTopPlayersGesture( localClientNum, 2, 2 );\t// GESTURE_TYPE_BOAST = 2"
    },
    "547": {
        "fuction_name": "GetTopPlayersHelmetModel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "topPlayerIndex": "The index of the top player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the name of the equipped helmet model of the top player in the game by index",
        "example": "modelName = GetTopPlayersHelmetModel( localClientNum, 2 )"
    },
    "548": {
        "fuction_name": "GetTopPlayersHelmetRenderOptions",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "topPlayerIndex": "The index of the top player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the render options for the body for the top player in the game by index",
        "example": "renderOptions = GetTopPlayersHelmetRenderOptions( localClientNum, 2 )"
    },
    "549": {
        "fuction_name": "GetTopPlayersIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the index of the client array or undefined if the client player is not a top scorer",
        "example": "topPlayerIndex = self GetTopPlayersIndex( localClientNum )"
    },
    "550": {
        "fuction_name": "GetTopPlayersTaunt",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "topPlayerIndex": "The index of the top player",
            "CharacterGestureTypes": "The CharacterTauntTypes enum value of the taunt to use"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the selected taunt of type CharacterTauntTypes for the given player",
        "example": "taunt_anim = GetTopPlayersTaunt( localClientNum, 2, 0 );\t// TAUNT_TYPE_FIRST_PLACE = 0"
    },
    "551": {
        "fuction_name": "GetTopPlayersTeam",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "topPlayerIndex": "The index of the top player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the team of the player top player in the game by index",
        "example": "team = GetTopPlayersTeam( localClientNum, 2 )"
    },
    "552": {
        "fuction_name": "GetTopPlayersWeaponInfo",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "topPlayerIndex": "The index of the top player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the equipped weapon of the top player in the game",
        "example": "weapon = GetTopPlayersWeaponInfo( localClientNum, 2 )"
    },
    "553": {
        "fuction_name": "GetTopPlayersWeaponModel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "topPlayerIndex": "The index of the top player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the name of the equipped weapon model of the top player in the game by index",
        "example": "modelName = GetTopPlayersWeaponModel( localClientNum, 2 )"
    },
    "554": {
        "fuction_name": "GetTopPlayersWeaponRenderOptions",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question",
            "topPlayerIndex": "The index of the top player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the render options for the weapon for the top player in the game by index",
        "example": "renderOptions = GetTopPlayersWeaponRenderOptions( localClientNum, 2 )"
    },
    "555": {
        "fuction_name": "GetTopScorerCount",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the player in question"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the number of clients in the top scorers array",
        "example": "numClients = GetTopScorerCount( localClientNum )"
    },
    "556": {
        "fuction_name": "GetTotalAmmo",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the player",
            "weaponName": "Name of the desired weapon to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the total amount of ammo the client has for the currently equipped weapon",
        "example": "ammoCount = GetTotalAmmo( localClientNum, \"ak47_mp\" )"
    },
    "557": {
        "fuction_name": "GetTotalServerPauseTime",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the total time the server has been paused since the map started.",
        "example": "val = GetTotalServerPauseTime()"
    },
    "558": {
        "fuction_name": "gettotalunlockedweaponattachments",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weapon": "weapon"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get total number of attachments that are unlocked for the weapon specified",
        "example": "player GetTotalUnlockedWeaponAttachements( weapon )"
    },
    "559": {
        "fuction_name": "GetTouchingVolume",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "Position of bounding box",
            "mins": "The minimum extents of the bounding box",
            "maxs": "The maximum extents of the bounding box"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the entities that are inside the bounds given",
        "example": "entities = GetTouchingVolume( self.origin, mins, maxs )"
    },
    "560": {
        "fuction_name": "GetTriggerAccumulate",
        "return_type": "void",
        "called_by": "<trigger>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the accumulate value from the trigger",
        "example": "self GetTriggerAccumulate()"
    },
    "561": {
        "fuction_name": "GetTurretArcLimits",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return turret info for arc mins and maxs",
        "example": "limits turret GetTurretArcLimits()"
    },
    "562": {
        "fuction_name": "GetTurretOwner",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the \"owner\" of this turret",
        "example": "turret_user = roof_turret GetTurretOwner()"
    },
    "563": {
        "fuction_name": "GetTurretTarget",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current target of this turret",
        "example": "target = roof_turret GetTurretTarget()"
    },
    "564": {
        "fuction_name": "GetUpgradedPieceNumLives",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "piece number": "The piece index."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the number of lives, or pull reps it should take a zombie to dislodge this piece, if it's upgraded.",
        "example": "piece.numLives = ent GetUpgradedPieceNumLives(1)"
    },
    "565": {
        "fuction_name": "GetUTC",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the UTC time.",
        "example": "val = GetUTC()"
    },
    "566": {
        "fuction_name": "GetValidCoverPeekOuts",
        "return_type": "void",
        "called_by": "<pathnode>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of directions an AI can peek out from a cover node. Possible values are 'over', 'left', and 'right'.",
        "example": "GetValidCoverPeekOuts( node )"
    },
    "567": {
        "fuction_name": "GetVehicleArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of all of the vehicles in a level",
        "example": "enemies = GetVehicleArray( \"drones\", \"targetname\" )"
    },
    "568": {
        "fuction_name": "GetVehicleSpawnerArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of all of the vehicle spawners in a level",
        "example": "enemies = GetVehicleSpawnerArray( \"bob\", \"targetname\" )"
    },
    "569": {
        "fuction_name": "GetVehicleSpawnerTeamArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "team": "a team name, either 'axis', 'allies', or 'neutral'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of all of the vehicle spawners in a level with the specified team",
        "example": "enemies = GetVehicleSpawnerTeamArray( \"axis\", \"neutral\" )"
    },
    "570": {
        "fuction_name": "GetVehicleTeamArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of all of the vehicles in a level that are not sentients",
        "example": "enemies = GetVehicleTeamArray( \"axis\", \"neutral\" )"
    },
    "571": {
        "fuction_name": "GetVehicleTriggerFlags",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the spawn flags that will allow vehicles to activate triggers",
        "example": "spawn(\"trigger_radius\", (0,0,0), GetVehicleTriggerFlags())"
    },
    "572": {
        "fuction_name": "GetVelocity",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "entity": "An entity."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the entity's velocity.",
        "example": "vel = thing GetVelocity()"
    },
    "573": {
        "fuction_name": "GetVisibleNode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start": "starting origin of the path",
            "end": "ending origin of the path"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the farthest visible node on the path from <start> to <end> or undefined if no path exists.",
        "example": "node = GetVisibleNode( guy.origin, enemy.origin, guy )"
    },
    "574": {
        "fuction_name": "GetVisibleNodes",
        "return_type": "pathnode",
        "called_by": null,
        "mandatory_parameters": {
            "node": "pathnode to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of nodes visible to this node",
        "example": "nodes = GetVisibleNodes( cover.node )"
    },
    "575": {
        "fuction_name": "GetVisionPulseMaxRadius",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the max radius for the localClients vision pulse",
        "example": "power = GetVisionPulseMaxRadius( localClientNum )"
    },
    "576": {
        "fuction_name": "GetVisionPulseRadius",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the current radius for the localClients vision pulse",
        "example": "power = GetVisionPulseRadius( localClientNum )"
    },
    "577": {
        "fuction_name": "getvrcamangles",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the VR camera angles of the player",
        "example": null
    },
    "578": {
        "fuction_name": "GetVRCamAnglesByLocalClientNum",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the camera angles of the local client given",
        "example": "cam_angles = GetVRCamAnglesByLocalClientNum( 0 )"
    },
    "579": {
        "fuction_name": "getvrcampos",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the VR camera position of the player",
        "example": null
    },
    "580": {
        "fuction_name": "GetVRCamPosByLocalClientNum",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the camera position of the local client given",
        "example": "cam_origin = GetVRCamPosByLocalClientNum( 0 )"
    },
    "581": {
        "fuction_name": "GetVRControllerAngles",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the controller you want the orientation of",
            "handIdx": "0 for dominant hand, 1 for secondary hand. Secondary hand is not guaranteed to exist"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "gets the world-space angles of the tracked VR controller",
        "example": "pos = self GetVRControllerAngles( 0, (60, 0, 0) ) ..."
    },
    "582": {
        "fuction_name": "GetVRControllerGripButton",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the controller you want",
            "handIdx": "0 for dominant hand, 1 for secondary hand. Secondary hand is not guaranteed to exist"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "returns true if the grip button is pressed",
        "example": "holding = self GetVRControllerGripButton( 0 ) ..."
    },
    "583": {
        "fuction_name": "GetVRControllerPosition",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the controller you want the position of",
            "handIdx": "0 for dominant hand, 1 for secondary hand. Secondary hand is not guaranteed to exist"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "gets the world-space position of the tracked VR controller",
        "example": "pos = self GetVRControllerPosition( 0 ) ..."
    },
    "584": {
        "fuction_name": "GetVRControllerXButton",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the controller you want",
            "handIdx": "0 for dominant hand, 1 for secondary hand. Secondary hand is not guaranteed to exist"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "returns true if the grip button is pressed",
        "example": "holding = self GetVRControllerXButton( 0 ) ..."
    },
    "585": {
        "fuction_name": "GetWallRunWallNormal",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the normal of the wall the player is running on (or was running on)",
        "example": "wall_normal = player GetWallRunWallNormal()"
    },
    "586": {
        "fuction_name": "GetWatcherWeapons",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns array of weapons that need watchers so they will die when the player respawns",
        "example": "watcherWeapons = GetWatcherWeapons()"
    },
    "587": {
        "fuction_name": "GetWaterHeight",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "pos": "Query position"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the height of the water at this position",
        "example": "height = getwaterheight( self.origin )"
    },
    "588": {
        "fuction_name": "GetWeapon",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weaponname": "the name of the base weapon to return"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the requested weapon object based on game mode agnostic weapon name string",
        "example": "GetWeapon( \"ar_standard\", \"acog\" )"
    },
    "589": {
        "fuction_name": "GetWeaponAccuracy",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity. Must be AI.",
            "weapon name": "The weapon name."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns accuracy at the distance from the current enemy.",
        "example": "getweaponaccuracy( self, \"ak47\" ), getweaponaccuracy( ai, ai.primaryweapon )"
    },
    "590": {
        "fuction_name": "GetWeaponAttachments",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": null
    },
    "591": {
        "fuction_name": "GetWeaponChargeLevel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the current charge level for charged shot weapons",
        "example": "charge = player GetWeaponChargeLevel()"
    },
    "592": {
        "fuction_name": "GetWeaponForCharacter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "characterIndex": "The index of the character in the current game-mode's character table",
            "sessionmode": "Session Mode Index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the weapon at the given index",
        "example": "modelName = GetWeaponForCharacter( 0, \"mp\" )"
    },
    "593": {
        "fuction_name": "GetWeaponForwardDir",
        "return_type": "void",
        "called_by": "<weapon>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the weapon's forward direction",
        "example": "weapon GetWeaponForwardDir()"
    },
    "594": {
        "fuction_name": "GetWeaponHackRatio",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the players hack completion ratio",
        "example": "GetWeaponHackRatio(localClientNum, 1, \"hotgun_zm\")"
    },
    "595": {
        "fuction_name": "GetWeaponModelForCharacter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "characterIndex": "The index of the character in the current game-mode's character table",
            "sessionmode": "Session Mode Index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the name of the weapon model of at the given index",
        "example": "modelName = GetWeaponModelForCharacter( 0, \"mp\" )"
    },
    "596": {
        "fuction_name": "GetWeaponMuzzlePoint",
        "return_type": "void",
        "called_by": "<weapon>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the weapon's muzzle point",
        "example": "weapon GetWeaponMuzzlePoint()"
    },
    "597": {
        "fuction_name": "GetWeaponOptic",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "Weapon name"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the weapon optic attachment name",
        "example": "attachmentName = player GetWeaponOptic( weapon )"
    },
    "598": {
        "fuction_name": "GetWeaponPosFrac",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "local client num": "Player to get weapon pos frac for."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets the weapon pos frac of the player. It only works for the player.",
        "example": "if ( player GetWeaponPosFrac(0) > 0.5 ) )..."
    },
    "599": {
        "fuction_name": "GetWeaponWithAttachments",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weaponname": "the name of the base weapon with attachments to return"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the requested weapon object",
        "example": "GetWeapon( \"mp7_mp+acog\" )"
    },
    "600": {
        "fuction_name": "GetWeaponWorldModel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns weaopn world model",
        "example": "model = GetWeaponWorldModel(\"lmg\")"
    },
    "601": {
        "fuction_name": "GetWeaponXCam",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weapon object": "The weapon entity",
            "camera": "The camera to get"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the weapon XCam",
        "example": "weapon GetWeaponXCam( GetWeapon( weaponName ), \"cam_cac_weapon\" )"
    },
    "602": {
        "fuction_name": "GetXCamForCharacter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "characterIndex": "The index of the character in the current game-mode's character table",
            "sessionmode": "Session Mode Index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the name of the xcam to use for the character pose in the frontend",
        "example": "frontendVignetteAnim = GetXCamForCharacter( characterIndex, \"mp\" )"
    },
    "603": {
        "fuction_name": "GetXCamMouseControl",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the controller you want the mouse yaw/pitch of"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the current \"yaw\" and \"pitch\" of the mouse xcam.  Returns an array with two keys, \"yaw\" and \"pitch\".",
        "example": "xcammouse = GetXCamMouseControl( localclientnum ) ..."
    },
    "604": {
        "fuction_name": "GetXModelCenterOffset",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "modelname": "The name of the xmodel"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Calculates the offset to the center of the model from the origin",
        "example": "offset = GetXModelCenterOffset( \"modelname\" )"
    },
    "605": {
        "fuction_name": "GetZBarrierArray",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of all of the zbarrier objects in a level.",
        "example": "zbarriers = GetZBarrierArray()"
    },
    "606": {
        "fuction_name": "GetZBarrierAttackSlotHorzOffset",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the horizontal offset used to offset the position of each attack slot relative to the zbarrier object.  Odd numbers will start in the center of the barrier and offset to each side.  Even numbers will start each side of the center - with no central spot specified.",
        "example": "horzOffset = ent GetZBarrierAttackSlotHorzOffset()"
    },
    "607": {
        "fuction_name": "GetZBarrierNumAttackSlots",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the number of attack slots used by this zbarrier.",
        "example": "numSlots = ent GetZBarrierNumAttackSlots()"
    },
    "608": {
        "fuction_name": "GetZBarrierPieceAnimLengthForState",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "index": "The index of the piece we care about.",
            "state": "Name of state of interest - choices are 'open', 'closed', 'opening', 'closing'."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the length in seconds for the animation associated with the supplied state for a piece, in seconds.",
        "example": "wait(ent GetZBarrierPieceAnimLengthForState(0, \"opening\", 0.9))"
    },
    "609": {
        "fuction_name": "GetZBarrierPieceAnimState",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "piece number": "The piece index."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the anim state name to be used for zombies tearing this board down.",
        "example": "anim_state = ent GetZBarrierPieceAnimState(1)"
    },
    "610": {
        "fuction_name": "GetZBarrierPieceAnimSubState",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "piece number": "The piece index."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the anim sub-state name to be used for zombies tearing this board down.",
        "example": "anim_state = ent GetZBarrierPieceAnimSubState(1)"
    },
    "611": {
        "fuction_name": "GetZBarrierPieceIndicesInState",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "state": "Name of state of interest - choices are 'open', 'closed', 'opening', 'closing'."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of integer indices of the zbarriers pieces that are in the specified state.",
        "example": "open_pieces = ent GetZBarrierPieceIndicesInState(\"open\")"
    },
    "612": {
        "fuction_name": "GetZBarrierPieceState",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "piece number": "The piece index."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the state of the piece indexed in the zbarrier ent. States are open, opening, closed and closing.",
        "example": "pieceState = ent GetZBarrierPieceState(1)"
    },
    "613": {
        "fuction_name": "GetZBarrierReachThroughAttackAnimState",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the anim state name for reach through attacks used by this zbarrier.",
        "example": "attackStateName = ent GetZBarrierReachThroughAttackAnimState()"
    },
    "614": {
        "fuction_name": "GetZBarrierTauntAnimState",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the anim state name for taunts used by this zbarrier.",
        "example": "tauntStateName = ent GetZBarrierTauntAnimState()"
    },
    "615": {
        "fuction_name": "Ghost",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Used when the entity should be sent over the network to clients but not be drawn",
        "example": "model Ghost()"
    },
    "616": {
        "fuction_name": "Gib",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "gibtype": "Type of gib"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gib an entity",
        "example": "self gib( \"normal\", temp_array )"
    },
    "617": {
        "fuction_name": "GlassRadiusDamage",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "Origin of damage",
            "radius": "Radius of damage",
            "max_damage": "Max damage, this is the damage at the origin",
            "min_damage": "Max damage, this is the damage at the edge of the radius"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Damages glass in the radius",
        "example": "GlassRadiusDamage( origin, range, max_damage, min_damage, means_of_damage )"
    },
    "618": {
        "fuction_name": "GrenadeExplosionEffect",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "Position of the fx"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Create a grenade explosion effect at the position",
        "example": null
    },
    "619": {
        "fuction_name": "GroundTrace",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "start": "The bullet start point",
            "end": "The bullet end point",
            "hit characters": "When set to true, this will trace for character hits",
            "ignore entity": "An entity to ignore"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Allows script to do a point trace with MASK_SHOT + MASK_ITEM. Returns hit position, hit entity, hit surface normal.",
        "example": "trace = GroundTrace(magicBulletOrigin.origin, eyePos, true, undefined)"
    },
    "620": {
        "fuction_name": "HasAnimTree",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if the entity has an anim tree",
        "example": "self HasAnimTree()"
    },
    "621": {
        "fuction_name": "HasASM",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if this entity has an ASM.",
        "example": "if ( HasASM( self ) ) {"
    },
    "622": {
        "fuction_name": "HasDObj",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "local client number": "number of the local client on the machine."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the entity currently has a dobj.",
        "example": "if(ent HasDObj(0))"
    },
    "623": {
        "fuction_name": "HasPart",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "tagname": "The tag to search for. (string)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether the entity has the given tagname as part of its skeleton.",
        "example": "has_part = self HasPart( \"tag_weapon\", \"weapon_saw\" )"
    },
    "624": {
        "fuction_name": "HeliTurretDogTrace",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "place that check if you can see if being performed",
            "dog": "the dog that the helicopter wants to see",
            "hitNum": "if you run this more than once make sure to populate this with the return of the last as it will increase efficiency"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Determines if you helicopter turret can see the dog.",
        "example": "if (0 == (copter HeliTurretSightTrace(heli_turret_point, dog, lastHit))"
    },
    "625": {
        "fuction_name": "HeliTurretSightTrace",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "place that check if you can see if being performed",
            "player": "the player that the helicopter wants to see",
            "hitNum": "if you run this more than once make sure to populate this with the return of the last as it will increase efficiency"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Determines if you helicopter turret can see an the players eyes.",
        "example": "if (0 == (copter HeliTurretSightTrace(heli_turret_point, player, lastHit))"
    },
    "626": {
        "fuction_name": "Hide",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Hide the entity",
        "example": "self Hide()"
    },
    "627": {
        "fuction_name": "HideFromTeam",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "team": "The team to show the entity to."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Hides the entity from a particular team",
        "example": "self HideFromTeam( friend_team )"
    },
    "628": {
        "fuction_name": "hideinfovolume",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entnum": "the entity number of the info volume"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stops an info volume from being drawn",
        "example": "InfoVolumeDebug_HideVolume( info_volume GetEntityNumber() )"
    },
    "629": {
        "fuction_name": "HideMiscModels",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "targetname": "targetname of misc model(s)."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Hide all misc models with this targetname",
        "example": "HideMiscModels( \"crash_destruct\" )"
    },
    "630": {
        "fuction_name": "HidePart",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "tagname": "The tag to hide. All surfaces with a vertex weighted to the tag will be hidden and have no bullet collision. (string)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Hide part of an entity.",
        "example": "self HidePart( \"tag_weapon\", \"weapon_saw\" )"
    },
    "631": {
        "fuction_name": "HideZBarrierPiece",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "piece number": "The piece index."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stops the indexed piece from being drawn.",
        "example": "ent HideZBarrierPiece(1)"
    },
    "632": {
        "fuction_name": "IncrementCounter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "counterType": "The counter type",
            "increment": "The increment type"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Increments the counter",
        "example": "IncrementCounter( \"global_comebacks\", level.globalComebacks )"
    },
    "633": {
        "fuction_name": "incrementSpecificWeaponPickedUpCount",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "the weapon"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "increment the count of the times we've picked up this weapon (uniquely identified by weapon+attachemnts; see function: areWeaponsEqual )",
        "example": "self incrementSpecificWeaponPickedUpCount( weapon )"
    },
    "634": {
        "fuction_name": "InfoVolumeDebugInit",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Initializes the info volume debug array",
        "example": "DebugInfoVolume()"
    },
    "635": {
        "fuction_name": "InitClientObjectives",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "client on which to clear the objectives."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Delete a spawned effect.",
        "example": "InitObjectives( 0 )"
    },
    "636": {
        "fuction_name": "InLastStand",
        "return_type": "void",
        "called_by": "<client>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check the last stand state for the client",
        "example": "if ( self InLastStand() )"
    },
    "637": {
        "fuction_name": "IPrintLn",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "text": "text to be written"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Write line to the screen",
        "example": "IPrintLn( \"Where have all the cowboys gone?\" )"
    },
    "638": {
        "fuction_name": "IPrintLnBold",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "text": "text to be written"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "write bold line to the screen",
        "example": "IPrintLnBold( \"Mitchell!\" )"
    },
    "639": {
        "fuction_name": "IsActor",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity object that may be an ai character"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is an ai character",
        "example": "if ( IsActor( gun_owner ) ) ..."
    },
    "640": {
        "fuction_name": "IsActorCorpse",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity object that might be a corpse"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is an actor corpse",
        "example": "if ( IsActorCorpse( corpse ) ) ..."
    },
    "641": {
        "fuction_name": "IsActorSpawner",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity object that may be an actor spawner"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is an actor spawner",
        "example": "if ( IsActorSpawner( ent ) ) ..."
    },
    "642": {
        "fuction_name": "IsADS",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if this local client is in ADS, false otherwise",
        "example": "IsADS( 0 )"
    },
    "643": {
        "fuction_name": "IsAI",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity object that may be an ai character"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is an ai character",
        "example": "if ( IsAI( gun_owner ) ) ..."
    },
    "644": {
        "fuction_name": "IsAirborne",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity object"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is an airborne unit",
        "example": "if ( IsAirborne( gun_owner ) ) ..."
    },
    "645": {
        "fuction_name": "IsAlive",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity object that might be alive or dead"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is alive",
        "example": "if ( IsAlive( gun_owner ) ) ..."
    },
    "646": {
        "fuction_name": "IsAnimLooping",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "animation": "an animation that needs to be identified as a looping or not"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets whether an animation is looped or not",
        "example": "boolLoop = IsAnimLooping( climbAnim )"
    },
    "647": {
        "fuction_name": "IsArchetypeLoaded",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if a given archetype is loaded in the level.",
        "example": "if ( IsArchetypeLoaded( ARCHETYPE_WARLORD ) )"
    },
    "648": {
        "fuction_name": "IsArenaMode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if we are in arena mode",
        "example": "if ( IsArenaMode() ) ..."
    },
    "649": {
        "fuction_name": "IsAssetLoaded",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "assetType": "\"weapon\" or \"material\"",
            "assetName": "The name of the asset - should match zone_source"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check whether or not an asset is loaded.",
        "example": "IsAssetLoaded( \"weapon\", \"rpg\" )"
    },
    "650": {
        "fuction_name": "IsAttached",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "modelname": "The name of the model to test if attached."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if the model is attached to the entity",
        "example": "self IsAttached( \"somemodel\", \"tag_origin\" )"
    },
    "651": {
        "fuction_name": "IsBonusCardActive",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "bonuscard": "BonusCard index from bonuscard.gsh",
            "classnum": "The current class num of the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns if the bonus card is enabled and active in the class, cannot be called on a larry",
        "example": "primary = self IsBonusCardActive( BONUSCARD_PRIMARY_GUNFIGHTER_INDEX, self.class_num )"
    },
    "652": {
        "fuction_name": "IsBot",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the entity is a bot controlled player",
        "example": "if( self IsBot() )"
    },
    "653": {
        "fuction_name": "IsCamAnimLooping",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "cam_anim": "The animation to play"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether or not a specific camera anim loop.",
        "example": "IsCamAnimLooping( \"proto_melee_cam\" )"
    },
    "654": {
        "fuction_name": "IsCameraSpikeToggled",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the camera spike owner"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the camera spike is toggled to be active, 0 otherwise",
        "example": "if ( IsCameraSpikeToggled( 0 ) )"
    },
    "655": {
        "fuction_name": "IsClientCacheStable",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Is the players client cache stable, have we loaded all other clients' resources.",
        "example": "player IsClientCacheStable()"
    },
    "656": {
        "fuction_name": "IsContentScreenFilterPlaying",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns whether or not this player is playing a Graphics Content blocking filter at this moment or not.",
        "example": null
    },
    "657": {
        "fuction_name": "IsCorpse",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity object that might be a corpse"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is a corpse",
        "example": "if ( IsCorpse( gun_owner ) ) ..."
    },
    "658": {
        "fuction_name": "IsCoverNode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "The node to delete"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns true if the node is of type NODE_TYPEFLAGS_COVER_ONLY",
        "example": "IsCoverNode( node )"
    },
    "659": {
        "fuction_name": "IsDangerous",
        "return_type": "void",
        "called_by": "<pathnode>",
        "mandatory_parameters": {
            "team": "Name of the team."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the pathnode is dangerous for the given team",
        "example": "if ( node IsDangerous( team ) ) { //do something }"
    },
    "660": {
        "fuction_name": "IsDedicated",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true/false if we are running on the dedicated server",
        "example": "if ( IsDedicated() )"
    },
    "661": {
        "fuction_name": "IsDemoPlaying",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if a demo is currently playing back",
        "example": "if ( IsDemoPlaying() )"
    },
    "662": {
        "fuction_name": "IsDoubleJumping",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is double jumping.",
        "example": "if(player DoubleJumping())"
    },
    "663": {
        "fuction_name": "IsDriving",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the caller"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if the player is driving a vehicle.",
        "example": "if ( self IsDriving( <localClientNum> ) )"
    },
    "664": {
        "fuction_name": "IsDynEntValid",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns if the dynEnt still valid or not",
        "example": "if( IsDynEntValid( dyn_id) )"
    },
    "665": {
        "fuction_name": "IsEMPJammed",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if this player is jammed by the emp, false otherwise",
        "example": "if ( player IsEMPJammed() )"
    },
    "666": {
        "fuction_name": "IsEntity",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "variable": "variable to test"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether given variable is of type entity.",
        "example": "if ( IsEntity( variable ) ) ..."
    },
    "667": {
        "fuction_name": "IsEntityLinkedToTag",
        "return_type": "void",
        "called_by": "<parententity>",
        "mandatory_parameters": {
            "entity": "The entity that we are checking"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns is the entity is linked to the parententity, ( on a specific tag optional )",
        "example": "if ( player IsEntityLinkedToTag( grenade, \"j_head\" ) )"
    },
    "668": {
        "fuction_name": "IsEventServiced",
        "return_type": "void",
        "called_by": "<ai>",
        "mandatory_parameters": {
            "eventId": "The identifier of the event (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the specified event to serviced.",
        "example": "serviced = self IsEventServiced( 100 )"
    },
    "669": {
        "fuction_name": "IsFiringTurret",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this turret is firing. The entity must be a turret",
        "example": "turret IsFiringTurret()"
    },
    "670": {
        "fuction_name": "IsFlared",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check is a player is under the influence of a flare",
        "example": "if ( player IsFlared() )"
    },
    "671": {
        "fuction_name": "IsFriendly",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localclientnum": "Local client number of the local client you want to test against"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if entity is friendly",
        "example": "if ( entity IsFriendly( <localClientNum>, [predicted] ) )"
    },
    "672": {
        "fuction_name": "IsGadgetMeleeCharging",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Is the player in the process of melee charging ",
        "example": "self IsGadgetMeleeCharging()"
    },
    "673": {
        "fuction_name": "IsGlobalStatsServer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the game is a global stats ranked server",
        "example": "level.ranked |= IsGlobalStatsServer()"
    },
    "674": {
        "fuction_name": "IsGodMode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity object to check for god mode"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is in god mode",
        "example": "if ( IsGodMode( player ) ) ..."
    },
    "675": {
        "fuction_name": "isGrenadeDud",
        "return_type": "void",
        "called_by": "<grenade>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns if a grenade is a dud",
        "example": "if ( grenade isGrenadeDud() )"
    },
    "676": {
        "fuction_name": "IsHidden",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "return true if entity is hidden",
        "example": "self IsHidden()"
    },
    "677": {
        "fuction_name": "IsInHelicopter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if the client is in a helicopter.",
        "example": "if( IsInHelicopter( 0 ) )"
    },
    "678": {
        "fuction_name": "IsInScrCam",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Check if the camera of local client is in scripted camera",
        "example": "inScrCam = IsInScrCam( 0 )"
    },
    "679": {
        "fuction_name": "IsInScritpedAnim",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the entity currently has scripted animation playing.",
        "example": "if(ent IsInScritpedAnim())"
    },
    "680": {
        "fuction_name": "IsInSecondChance",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "To check if player is needs revive",
        "example": "if ( self IsInSecondChance() )"
    },
    "681": {
        "fuction_name": "IsInsideHeightLock",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether the entity is inside the height lock or not",
        "example": "if( self IsInsideHeightLock() ) { //do something }"
    },
    "682": {
        "fuction_name": "IsLaserOn",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "check if the entity has laser turned on.",
        "example": "if ( IsLaserOn( entity ) ) { ..."
    },
    "683": {
        "fuction_name": "IsLinkedTo",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "other": "Entity"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the entity is linked to the other entity",
        "example": "if (ent IsLinkedTo( other )) { // dostuff }"
    },
    "684": {
        "fuction_name": "IsLoadingCinematicPlaying",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Is the player playing the loading cinematic",
        "example": "player IsLoadingCinematicPlaying()"
    },
    "685": {
        "fuction_name": "IsLocalClientDead",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Checks if the pm_type > PM_DEAD",
        "example": "IsLocalClientDead()"
    },
    "686": {
        "fuction_name": "IsLocalClientDriver",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the caller"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the driver of the vehicle.",
        "example": "driver = self IsLocalClientDriver(0)"
    },
    "687": {
        "fuction_name": "IsLocalGame",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the game local only",
        "example": "level.local = IsLocalGame()"
    },
    "688": {
        "fuction_name": "IsLocalPlayer",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if the ent it's called on is a local player.",
        "example": null
    },
    "689": {
        "fuction_name": "IsLocalPlayerViewLinked",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "localClientNum": "The localClientNum of the caller"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns whether or not this entity is linked to the given local client",
        "example": "if ( script_mover IsLocalPlayerWeaponViewOnlyLinked( localClientIndex ) ) { ... }"
    },
    "690": {
        "fuction_name": "IsLocalPlayerWeaponViewOnlyLinked",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns whether or not this player is linked to an enity with weapon view only linking.",
        "example": "weaponviewonlylinked = self IsLocalPlayerWeaponViewOnlyLinked()"
    },
    "691": {
        "fuction_name": "IsMantling",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return true if the player is mantling, false otherwise.",
        "example": "self IsMantling()"
    },
    "692": {
        "fuction_name": "IsMapSubLevel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether or not the map is a sublevel of a mission",
        "example": "level.isSubLevel = IsMapSubLevel( \"cp_mi_cairo_ramses2\" )"
    },
    "693": {
        "fuction_name": "IsMature",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "The player to check if his Graphic Content Flag is on"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks if a player has his Graphic Content Flag is on",
        "example": "IsMature( player )"
    },
    "694": {
        "fuction_name": "ismissileinsideheightlock",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether the entity is inside the height lock or not",
        "example": "if( self IsInsideHeightLock() ) { //do something }"
    },
    "695": {
        "fuction_name": "IsMovingPlatform",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether platform is a moving platform or not",
        "example": "platform IsMovingPlatform()"
    },
    "696": {
        "fuction_name": "IsNavVolumeLoaded",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether nav volume is loaded",
        "example": "if ( IsNavVolumeLoaded() ) ..."
    },
    "697": {
        "fuction_name": "IsNodeEnabled",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "The node to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns true if the node is enabled, false otherwise",
        "example": "IsNodeEnabled( node )"
    },
    "698": {
        "fuction_name": "IsNodeOccupied",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "which node to check."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "See if anyone has claimed a particular node.",
        "example": "if ( IsNodeOccupied( node ) )"
    },
    "699": {
        "fuction_name": "IsOnGround",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if entity is on ground",
        "example": "if( self IsOnGround() ) { //do something }"
    },
    "700": {
        "fuction_name": "IsOnLadder",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return true if the player is on a ladder, false otherwise.",
        "example": "self IsOnLadder()"
    },
    "701": {
        "fuction_name": "IsOnSlide",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return true if the player is in the player movement slide.",
        "example": "self IsOnSlide()"
    },
    "702": {
        "fuction_name": "IsOnTurret",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if the player is currently on a turret",
        "example": "if( IsOnTurret( 0 ) )"
    },
    "703": {
        "fuction_name": "IsPathfinder",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is registered with navigation system so it can do pathfinding and position query",
        "example": "if ( IsPathfinder( tank ) ) ..."
    },
    "704": {
        "fuction_name": "IsPaused",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether a given entity is paused as part of a world pause.",
        "example": "if ( ent IsPaused() )"
    },
    "705": {
        "fuction_name": "IsPeelingOut",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if the vehicle is currently peeling out.",
        "example": "if ( self IsPeelingOut() ) { }"
    },
    "706": {
        "fuction_name": "IsPlayer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity object that may be the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is the player",
        "example": "if ( IsPlayer( gun_owner ) ) ..."
    },
    "707": {
        "fuction_name": "IsPlayerCorpse",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if the ent it's called on is a player corpse.",
        "example": null
    },
    "708": {
        "fuction_name": "IsPlayerDead",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the entity currently has health of 0 or less",
        "example": "if(ent IsPlayerDead())"
    },
    "709": {
        "fuction_name": "IsPlayerDoubleJumping",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the player is currently double jumping (boosting)",
        "example": "if(ent IsPlayerDoubleJumping())"
    },
    "710": {
        "fuction_name": "IsPlayerFiring",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the player is currently firing",
        "example": "if(ent IsDead())"
    },
    "711": {
        "fuction_name": "IsPlayerJumping",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the player is currently jumping",
        "example": "if(ent IsPlayerJumping())"
    },
    "712": {
        "fuction_name": "IsPlayerNumber",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the passed in int is a valid client number",
        "example": null
    },
    "713": {
        "fuction_name": "IsPlayerSliding",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the player is currently sliding",
        "example": "if(ent IsPlayerSliding())"
    },
    "714": {
        "fuction_name": "IsPlayerSprinting",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the player is currently sprinting",
        "example": "if(ent IsPlayerSprinting())"
    },
    "715": {
        "fuction_name": "IsPlayerSwimming",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return if a player is swimming",
        "example": "depth = get_players()[0] IsPlayerSwimming()"
    },
    "716": {
        "fuction_name": "IsPlayerSwimmingOnSurface",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Return if a player is swimming",
        "example": "swimming = player IsPlayerSwimmingOnSurface()"
    },
    "717": {
        "fuction_name": "IsPlayerSwimmingUnderwater",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Return if a player is swimming",
        "example": "swimming = player IsPlayerSwimmingUnderwater()"
    },
    "718": {
        "fuction_name": "IsPlayerTalking",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the player is talking",
        "example": "if(ent IsPlayerTalking())"
    },
    "719": {
        "fuction_name": "IsPlayerUnderwater",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return if a player is underwater",
        "example": "depth = get_players()[0] IsPlayerUnderwater()"
    },
    "720": {
        "fuction_name": "IsPlayerWallRunning",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the player is currently wall running",
        "example": "if(ent IsPlayerWallRunning())"
    },
    "721": {
        "fuction_name": "IsPlayerWallRunningRight",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the player is currently wall running right",
        "example": "if(ent IsPlayerWallRunning())"
    },
    "722": {
        "fuction_name": "IsPlayingAnimScripted",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the entity is playing in scripted animation.",
        "example": "if(player IsPlayingAnimScripted())"
    },
    "723": {
        "fuction_name": "IsPlayingLoopSound",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if the entity is playing a loop sound",
        "example": "car IsPlayingLoopSound()"
    },
    "724": {
        "fuction_name": "IsPointInNavVolume",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "Position to evaluate.",
            "navVolumeName": "Either \"navvolume_small\" or \"navvolume_big\"."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks if a given point is within the specified navigation volume.",
        "example": "result = IsPointInNavVolume( (10,20,30), \"small volume\" )"
    },
    "725": {
        "fuction_name": "IsPointOnNavMesh",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "Position to evaluate."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks if a given point is valid on the NavMesh. This check performs all the necessary validation such as away from boundary, correct material, navmesh trigger, etc.",
        "example": "isValid = IsPointOnNavMesh( (10,20,30), self )"
    },
    "726": {
        "fuction_name": "IsPoisoned",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check is a player is under the influence of gas",
        "example": "if ( player IsPoisoned() )"
    },
    "727": {
        "fuction_name": "IsRagdoll",
        "return_type": "void",
        "called_by": "<player_or_playercorpse>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return true if the entity is a ragdoll body, false otherwise.",
        "example": "if( player IsRagdoll() ) { //do something }"
    },
    "728": {
        "fuction_name": "IsRobot",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if the ent it's called on is a sentient vehicle i.e. a Robot.",
        "example": null
    },
    "729": {
        "fuction_name": "IsScrambled",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the if player is getting scrambled by an enemy",
        "example": "if ( player IsScrambled( ) )"
    },
    "730": {
        "fuction_name": "IsSentient",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity object that may be a sentient character"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is a sentient, that is normally either an ai actor, ai vehicle or the player",
        "example": "if ( IsSentient( vehicle.riders[j] ) ) ..."
    },
    "731": {
        "fuction_name": "IsShoutcaster",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Number of the local client to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the local client is shoutcasting",
        "example": "if ( IsSpectating( localClientNum, false ) )"
    },
    "732": {
        "fuction_name": "IsSlamming",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is slamming.",
        "example": "if(player IsSlamming())"
    },
    "733": {
        "fuction_name": "IsSliding",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is sliding.",
        "example": "if(player IsSliding())"
    },
    "734": {
        "fuction_name": "IsSpawner",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "entity": "An entity object that may be a spawner"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is a spawner",
        "example": "if ( IsSpawner( ent ) ) ..."
    },
    "735": {
        "fuction_name": "IsSpawnPointVisible",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "point": "Spawnpoint origin that needs to be checked",
            "angles": "Spawnpoint angles that needs to be checked",
            "team": "Team that we need to check against the point",
            "ignore player": "The player that we are spawning in"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true or false if a point is visible to the given team",
        "example": "if ( IsSpawnPointVisible( point_position, point_angles, \"axis\", player ) )"
    },
    "736": {
        "fuction_name": "IsSpectating",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Number of the local client to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the local client is spectating",
        "example": "if ( IsSpectating( localClientNum, false ) )"
    },
    "737": {
        "fuction_name": "IsSplitScreen",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the game is a splitscreen game",
        "example": "level.splitscreen = IsSplitScreen()"
    },
    "738": {
        "fuction_name": "IsSplitScreenHost",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if local player is the host",
        "example": "if ( player IsSplitScreenHost() ) { }"
    },
    "739": {
        "fuction_name": "IsSprinting",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is sprinting.",
        "example": "if(player IsSprinting())"
    },
    "740": {
        "fuction_name": "IsStarterPack",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player has starter pack",
        "example": "if ( self IsStarterPack() )"
    },
    "741": {
        "fuction_name": "IsStartingClassDefault",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the starting class is the default class for the level",
        "example": null
    },
    "742": {
        "fuction_name": "IsStreamed",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if this entity is fully streamed in",
        "example": "thing isStream()"
    },
    "743": {
        "fuction_name": "IsStreamerReady",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Is the players streamer ready.",
        "example": "player IsStreamerReady()"
    },
    "744": {
        "fuction_name": "IsSwimming",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the player is swimming.",
        "example": "isSwimming = IsSwimming( localclientnum )"
    },
    "745": {
        "fuction_name": "IsTestClient",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is a test client (Does not have a remote user).",
        "example": "if( self IsTestClient() )"
    },
    "746": {
        "fuction_name": "IsThirdPerson",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Checks if the camera mode to third person if true",
        "example": "IsThirdPerson()"
    },
    "747": {
        "fuction_name": "IsTouching",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "other entity": "Entity."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if <other entity> is touching <entity>",
        "example": "if( player IsTouching( e_goal_volume ) ) { //do something }"
    },
    "748": {
        "fuction_name": "IsTouchingSwept",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "other entity": "Entity."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if <other entity> is touching <entity>",
        "example": "if( player IsTouchingSwept( e_goal_volume ) ) { //do something }"
    },
    "749": {
        "fuction_name": "IsTouchingVolume",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "origin": "Origin of the volume",
            "volume mins": "The min extents of the volume",
            "volume maxs": "The max extents of the volume"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if entity is touching the volume.",
        "example": "if ( crate_ent IsTouchingVolume( origin + (0,0,40), mins, maxs ) )"
    },
    "750": {
        "fuction_name": "IsTraversing",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is traversing.",
        "example": "if(player IsTraversing())"
    },
    "751": {
        "fuction_name": "IsTriggerEnabled",
        "return_type": "void",
        "called_by": "<trigger>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if trigger is enabled. False otherwise",
        "example": "if( trig isTriggerEnabled() )"
    },
    "752": {
        "fuction_name": "IsTurretFiring",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks if this turret is firing",
        "example": "if( IsTurretFiring( roof_turret ) )"
    },
    "753": {
        "fuction_name": "IsTurretLockedOn",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this turret is locked onto a target. The entity must be a turret",
        "example": "turret IsTurretLockedOn()"
    },
    "754": {
        "fuction_name": "IsUnderwater",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the player is underwater.",
        "example": "clipCount = IsUnderwater( localclientnum )"
    },
    "755": {
        "fuction_name": "IsUsingNavVolume",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity object"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is using Nav Volume. Note this is a relatively low level check. For general gameplay check whether an entity is flying, consider using IsAirborne.",
        "example": "if ( IsUsingNavVolume( gun_owner ) ) ..."
    },
    "756": {
        "fuction_name": "isUsingT7Melee",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true T7 Melee system is being used",
        "example": null
    },
    "757": {
        "fuction_name": "IsValidGametype",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "game type": "a string to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the string is a valid game type",
        "example": null
    },
    "758": {
        "fuction_name": "IsVehicle",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity object that may be an ai character"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is an ai character",
        "example": "if ( IsVehicle( gun_owner ) ) ..."
    },
    "759": {
        "fuction_name": "IsVehicleSpawner",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "entity": "An entity object that may be a vehicle spawner"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is a vehicle spawner",
        "example": "if ( IsVehicleSpawner( ent ) ) ..."
    },
    "760": {
        "fuction_name": "IsVisibleByPlayer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if the actor can be seen by a player",
        "example": "if( IsVisibleByPlayer(ent) )"
    },
    "761": {
        "fuction_name": "isvr",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "check if this player has VR enabled",
        "example": null
    },
    "762": {
        "fuction_name": "IsWallRunning",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is wall running.",
        "example": "if(player IsWallRunning())"
    },
    "763": {
        "fuction_name": "IsWallrunNode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "The node to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns true if the node has the PNF_WALLRUN flag set",
        "example": "IsWallrunNode( node )"
    },
    "764": {
        "fuction_name": "IsWheelColliding",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "wheel": "The wheel position, can be 'front_left', 'front_right', 'back_left', 'back_right', 'middle_left', 'middle_right'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns if the given wheel is on the ground.",
        "example": "colliding = self IsWheelColliding( front_left )"
    },
    "765": {
        "fuction_name": "IsWheelPeelingOut",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "wheel": "The wheel position, can be 'front_left', 'front_right', 'back_left', 'back_right', 'middle_left', 'middle_right'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns if the given wheel is sliding.",
        "example": "peeling = self IsWheelPeelingOut( front_left )"
    },
    "766": {
        "fuction_name": "IsWheelSliding",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "wheel": "The wheel position, can be 'front_left', 'front_right', 'back_left', 'back_right', 'middle_left', 'middle_right'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns if the given wheel is sliding.",
        "example": "sliding = self IsWheelSliding( front_left )"
    },
    "767": {
        "fuction_name": "IsWorldPaused",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns whether or not the world is currently paused",
        "example": "if ( IsWorldPaused() )"
    },
    "768": {
        "fuction_name": "IsZBarrier",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the entity called on is a zbarrier.",
        "example": "if(ent IsZBarrier())"
    },
    "769": {
        "fuction_name": "IsZBarrierClosed",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the state of all of the zbarrier's pieces is 'closed'.",
        "example": "closed = ent IsZBarrierClosed())"
    },
    "770": {
        "fuction_name": "IsZBarrierOpen",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the state of all of the zbarrier's pieces is 'open'.",
        "example": "open = ent IsZBarrierOpen())"
    },
    "771": {
        "fuction_name": "ItemWeaponSetAmmo",
        "return_type": "void",
        "called_by": "<item>",
        "mandatory_parameters": {
            "clipAmmo": "Ammo for the clip",
            "reserveAmmo": "Reserve ammo"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the weapon ammo to the given clip ammo and reserve ammo. Can give an alternate weapon index",
        "example": "weap ItemWeaponSetAmmo( clip, extra, 1 )"
    },
    "772": {
        "fuction_name": "Kick",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "clientnum": "The client number of the player to kick."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Kicks the specified player.",
        "example": "Kick( 2 )"
    },
    "773": {
        "fuction_name": "Kill",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Kills this entity. If the entity could not be killed, errors. Automatically sets setCanDamage( true ).",
        "example": "level.player kill()"
    },
    "774": {
        "fuction_name": "KillClientRadiantExploder",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "exploder id": "string id of exploder to deactivate"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Deactivates a client side radiant exploder",
        "example": "DeactivateClientRadiantExploder( \"light_switch\" )"
    },
    "775": {
        "fuction_name": "KillServer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "kills the server",
        "example": "KillServer()"
    },
    "776": {
        "fuction_name": "LaserOff",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Turns off entity's laser sight.",
        "example": "self LaserOff()"
    },
    "777": {
        "fuction_name": "LaserOn",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Turns on entity's laser sight.",
        "example": "self LaserOn()"
    },
    "778": {
        "fuction_name": "Launch",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "initial velocity": "The initial velocity of the launch."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Launch an object that interacts with the world, using an initial velocity. From this point on this object will no longer block either missiles or bullets.",
        "example": "self Launch( (x, y, z) )"
    },
    "779": {
        "fuction_name": "launchdynent",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "dynent": "",
            "force": "the direction and magnitude of the force applied"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Launch a dynent",
        "example": "launchdynent( brick, (0,0,200) )"
    },
    "780": {
        "fuction_name": "LaunchRagdoll",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "force": "launch force"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Launch this ragdoll.",
        "example": "self LaunchRagdoll( (0,0,100) )"
    },
    "781": {
        "fuction_name": "LaunchVehicle",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "force": "launch force"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Launch this physics vehicle.",
        "example": "panzer LaunchVehicle( (0,0,100) )"
    },
    "782": {
        "fuction_name": "LerpViewAngleClamp",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "time": "Lerp duration in seconds. A value of 0 means instantaneous.",
            "accel time": "Acceleration time.",
            "decel time": "Decelaration time.",
            "right arc": "Angle to clamp view to the right.",
            "left arc": "Angle to clamp view to the left.",
            "top arc": "Angle to clamp view to the top.",
            "bottom arc": "Angle to clamp view to the bottom."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Only works if the player is currently linked to another entity and angles aren't locked. Lerps the current view angle constraints to the provided ones over the specified time.",
        "example": null
    },
    "783": {
        "fuction_name": "LinkNodes",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node1": "first node to link",
            "node2": "second node to link"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Connects node1 to node2. Call it again with arguments flipped if you want a two-way connection.",
        "example": "LinkNodes( node_moving_elev_left, node_moving_elev_right )"
    },
    "784": {
        "fuction_name": "LinkTo",
        "return_type": "void",
        "called_by": "<non_player_entity>",
        "mandatory_parameters": {
            "linkto entity": "The entity to attach this thing to"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Attaches one entity to another",
        "example": "self.rightturret LinkTo( self, \"tag_gunRight\", (0,0,0), (0,0,0) )"
    },
    "785": {
        "fuction_name": "LinkToBlendToTag",
        "return_type": "void",
        "called_by": "<non_player_entity>",
        "mandatory_parameters": {
            "linkto entity": "The entity to attach this thing to"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Attaches one entity to another, gradually lerping entity to the parents orientation",
        "example": "self.rightturret LinkToBlendToTag( self, \"tag_gunRight\" )"
    },
    "786": {
        "fuction_name": "LinkToCamera",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "linkType": ", 0 - pitch only, 1 - yaw only, 2 - roll only, 3 - swimming, 4 - full, 5 - 3d compass.  Full is the default if not specified.\""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Links an entity directly to the camera.  Good for scripted player arms.",
        "example": "swimming_arms LinkToCamera()"
    },
    "787": {
        "fuction_name": "LinkToUpdateOffset",
        "return_type": "void",
        "called_by": "<non_player_entity>",
        "mandatory_parameters": {
            "origin_offset": "The origin offset"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Attaches one entity to another, gradually lerping entity to the parents orientation",
        "example": "self.rightturret LinkToUpdateOffset( originsOffset, anglesOffset )"
    },
    "788": {
        "fuction_name": "LinkTraversal",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "Negotiation begin node"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates a user edge connecting two path nodes",
        "example": "LinkTraversal( beginNode )"
    },
    "789": {
        "fuction_name": "LoadSentientEventParameters",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "scriptBundle": "String name of the script bundle to load"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Loads the global sentient event parameters for a given scriptbundle sentient events asset. (all AI will use these)",
        "example": "LoadSentientEventParameters( \"sentientevents\" )"
    },
    "790": {
        "fuction_name": "LoadSiegeAnim",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "anim_name": "Name of the siege anim to load"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Load a siege anim into memory",
        "example": "LoadSiegeAnim( \"flappy_bird\" )"
    },
    "791": {
        "fuction_name": "LocalClientActive",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "client": "the client to check if it is active"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Return whether local client is active",
        "example": "active = LocalClientActive( 0 )"
    },
    "792": {
        "fuction_name": "LocalToWorldCoords",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "local coordinate": "The point in local coordinates (vector3)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Transform the given local coordinate point to a world coordinate point",
        "example": "ramboPoint = self LocalToWorldCoords( delta )"
    },
    "793": {
        "fuction_name": "LookAtEntity",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set this actor to look at the specified entity. Call this function without any entity specified to turn it off.",
        "example": "guy LookAtEntity( otherguy )"
    },
    "794": {
        "fuction_name": "LookAtPos",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set this actor to look at the specified position. Call this function without any position specified to turn it off.",
        "example": "guy LookAtPos( pos )"
    },
    "795": {
        "fuction_name": "LUINotifyEvent",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "lui event name": "as an IString",
            "num of args": "number of parameters",
            "args": "argument to pass to LUI"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sends a notify from script to LUI.",
        "example": "LUINotifyEvent( &\"update_objectives\", 1, &\"LEVEL_GOTO_NEXT_PLACE\" )"
    },
    "796": {
        "fuction_name": "LUINotifyEventToSpectators",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "lui event name": "as an IString",
            "num of args": "number of parameters",
            "args": "argument to pass to LUI"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sends a notify from script to LUI.",
        "example": "LUINotifyEventToSpectators( &\"update_objectives\", 1, &\"LEVEL_GOTO_NEXT_PLACE\" )"
    },
    "797": {
        "fuction_name": "MagicBullet",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "weapon": "Weapon type of the bullet",
            "source": "Where the bullet will be spawned",
            "destination": "Where the bullet will be fired at"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates a magic bullet at the source",
        "example": "MagicBullet( GetWeapon(\"sniper_hyperion\"), level.sniper_loc.origin, target GetTagOrigin( \"tag_eye\" ), level.sniper_boss)"
    },
    "798": {
        "fuction_name": "MagicGrenade",
        "return_type": "entity",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "origin": "The starting point of the grenade toss",
            "target position": "The target point of the grenade toss"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates a \"Magic\" grenade from an actor.",
        "example": "self MagicGrenade( self.origin, target.origin, 2.0 )"
    },
    "799": {
        "fuction_name": "MagicGrenadeManual",
        "return_type": "entity",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "origin": "The starting point of the grenade toss",
            "velocity": "The initial velocity vector for the grenade movement"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "creates a \"Magic\" grenade from an actor",
        "example": "self MagicGrenadeManual( self.origin, target.origin, 2.0 )"
    },
    "800": {
        "fuction_name": "MagicGrenadeManualPlayer",
        "return_type": "entity",
        "called_by": "<player>",
        "mandatory_parameters": {
            "origin": "The starting point of the grenade toss",
            "velocity": "The initial velocity vector for the grenade movement",
            "weapon": "The grenade weapon to base on"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "creates a \"Magic\" grenade from a player",
        "example": "self MagicGrenadeManualPlayer( self.origin, target.origin, 2.0 )"
    },
    "801": {
        "fuction_name": "MagicGrenadePlayer",
        "return_type": "entity",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The grenade weapon to use",
            "origin": "The starting point of the grenade toss",
            "velocity": "The initial velocity vector for the grenade movement"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates a \"Magic\" grenade from a player.",
        "example": "MagicGrenadePlayer( \"sticky_grenade_mp\", self.origin, toss_velocity )"
    },
    "802": {
        "fuction_name": "MagicGrenadeType",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "weaponName": "The name of the weapon",
            "sourceLoc": "The grenade starting point",
            "velocity": "The velocity of the grenade"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Fire a 'magic grenade', from the source location towards the destination point.",
        "example": "ent MagicGrenadeType( \"fraggrenade\", self.origin, myVelocity )"
    },
    "803": {
        "fuction_name": "MagicMissile",
        "return_type": "entity",
        "called_by": "<attacker>",
        "mandatory_parameters": {
            "weapon": "- Weapon name.",
            "position": "- Position to launch from.",
            "velocity": "- Direction and force of launch."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Launches a weapon from the given position with the given velocity.  Velocity determines direction.",
        "example": "bomb = player MagicMissile( \"artillery_mp\", (100,100,0), ( 0.1, 0.1, 0.1 ) )"
    },
    "804": {
        "fuction_name": "MakeFakeAI",
        "return_type": "void",
        "called_by": "<script_model>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Create a drone from script model, that can be moved around with simple commands",
        "example": "guy MakeFakeAI()"
    },
    "805": {
        "fuction_name": "MakeGrenadeDud",
        "return_type": "void",
        "called_by": "<grenade>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Turns a grenade into a dud",
        "example": "grenade MakeGrenadeDud()"
    },
    "806": {
        "fuction_name": "MakePathfinder",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Register a vehicle with Havok so it can do pathfinding and position query",
        "example": null
    },
    "807": {
        "fuction_name": "MakeSentient",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Turn a vehicle or script mover into a sentient.",
        "example": "heli MakeSentient()"
    },
    "808": {
        "fuction_name": "MakeTurretUnusable",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a turret to be unable to be used",
        "example": "roof_turret MakeTurretUnusable()"
    },
    "809": {
        "fuction_name": "MakeTurretUsable",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a turret able to be used",
        "example": "roof_turret MakeTurretUsable()"
    },
    "810": {
        "fuction_name": "MakeUnusable",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets this entity to be not usable by the player",
        "example": "mover MakeUsable()"
    },
    "811": {
        "fuction_name": "MakeUsable",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets this entity to be usable by the player",
        "example": "mover MakeUsable()"
    },
    "812": {
        "fuction_name": "Map",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "map name": "The map to load"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Loads a new map",
        "example": null
    },
    "813": {
        "fuction_name": "Map_Restart",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Restarts the map",
        "example": "Map_Restart( true )"
    },
    "814": {
        "fuction_name": "MapExists",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "map name": "The map to check."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the map with the given name exists on the server",
        "example": null
    },
    "815": {
        "fuction_name": "MapShaderConstant",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client for which to map the shader constant",
            "index": "the index you want this shader constant to map to",
            "constant name": "a string that's the name of the shader constant"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Maps a shader constant to an index. Returns 1 if success, 0 on failure",
        "example": "ent mapshaderconstant( 0, \"shaderColor\" ); ent mapshaderconstant( 0, \"shaderColor\", 1, 0, 1, 1 )"
    },
    "816": {
        "fuction_name": "MarkAsDirty",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Marks the entity as dirty",
        "example": "MarkAsDirty( entity )"
    },
    "817": {
        "fuction_name": "MarkDestructibleDestroyed",
        "return_type": "void",
        "called_by": "<destructible>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "set destructible destroyed",
        "example": "barrel MarkDestructibleDestroyed()"
    },
    "818": {
        "fuction_name": "MarkNoVehicleNavMeshFaces",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Update the novehicle flag on navmesh faces. This should only be used in MP map for now.",
        "example": null
    },
    "819": {
        "fuction_name": "matchRecordOvertimeRound",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "call after matchRecordRoundStart to mark the round as an overtime round (only first overtimee round is actually recorded)",
        "example": "matchRecordOvertimeRound()"
    },
    "820": {
        "fuction_name": "matchRecordRoundStart",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "need a hook for round starts, to get time stamps",
        "example": "matchRecordRoundStart()"
    },
    "821": {
        "fuction_name": "Matrix4x4TransformPoints",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": null
    },
    "822": {
        "fuction_name": "MaySpawnEntity",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": null
    },
    "823": {
        "fuction_name": "MaySpawnFakeEntity",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": null
    },
    "824": {
        "fuction_name": "MisdirectionEnable",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number.",
            "bool": "0 disables display, 1 enables it."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enables or disables misdirection display",
        "example": "MisdirectionEnable( localclientnum, newVal )"
    },
    "825": {
        "fuction_name": "Missile_DroneSetVisible",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "flag": "True to set visible, false otherwise"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the missile or drone to be visible",
        "example": "self Missile_DroneSetVisible( true )"
    },
    "826": {
        "fuction_name": "Missile_GetTarget",
        "return_type": "entity",
        "called_by": "<missile>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the target of the missile to the given entity, and resets if no entity is specified.",
        "example": "target = missile Missile_GetTarget()"
    },
    "827": {
        "fuction_name": "missile_settarget",
        "return_type": "void",
        "called_by": "<missile>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the target of the missile to the given entity, and resets if no entity is specified.",
        "example": "self missile_settarget( player )"
    },
    "828": {
        "fuction_name": "MissionFailed",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Restarts the map",
        "example": "MissionFailed()"
    },
    "829": {
        "fuction_name": "MissionHasAccolades",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether or not this mission has any accolades associated with it",
        "example": "level.has_accolades = MissionHasAccolades( \"cp_mi_cairo_ramses2\" )"
    },
    "830": {
        "fuction_name": "MissionHasCollectibles",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether or not this mission has any collectibles in it",
        "example": "level.has_collectibles = MissionHasCollectibles( \"cp_mi_cairo_ramses2\" )"
    },
    "831": {
        "fuction_name": "MissionRestart",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Restarts the mission, which might take you to a different BSP if this is a sublevel",
        "example": "MissionRestart()"
    },
    "832": {
        "fuction_name": "MoveGravity",
        "return_type": "void",
        "called_by": "<script_model, script_origin or script_brushmodel>",
        "mandatory_parameters": {
            "initial velocity": "The initial velocity to fling this entity at",
            "time": "The time to move the entity in seconds"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Fling this entity.",
        "example": "self MoveGravity( break_vector, time )"
    },
    "833": {
        "fuction_name": "MoveSlide",
        "return_type": "void",
        "called_by": "<script_model, script_origin or script_brushmodel>",
        "mandatory_parameters": {
            "center": "The center of the entity's collision with the ground",
            "radius": "The radius of the entity's collision with the ground",
            "initial velocity": "The initial velocity to move the entity at"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Launches the entity in the given velocity. When on the ground it will slide smoothly. Call StopMoveSlide to make it stop moving.",
        "example": "self MoveSlide( 16, anglesToForward( self.angles ) * 10 )"
    },
    "834": {
        "fuction_name": "MoveTo",
        "return_type": "void",
        "called_by": "<script_model, script_origin or script_brushmodel>",
        "mandatory_parameters": {
            "point": "The point to move the entity to",
            "time": "The time to move the entity in seconds"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Move this entity to the given point.",
        "example": "dummy MoveTo( dest_org, .5, .05, .05 )"
    },
    "835": {
        "fuction_name": "MoveX",
        "return_type": "void",
        "called_by": "<script_model, script_origin or script_brushmodel>",
        "mandatory_parameters": {
            "point": "The x value to move the entity to, as a floating point number",
            "time": "The time to move the entity in seconds"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Move this entity to the given world x value",
        "example": "train MoveX( -4400, 60, 15, 20 )"
    },
    "836": {
        "fuction_name": "MoveY",
        "return_type": "void",
        "called_by": "<script_model, script_origin or script_brushmodel>",
        "mandatory_parameters": {
            "point": "The y value to move the entity to, as a floating point number",
            "time": "The time to move the entity in seconds"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "move this entity to the given world y value",
        "example": "hangardoor MoveY( 320, 10 )"
    },
    "837": {
        "fuction_name": "MoveZ",
        "return_type": "void",
        "called_by": "<script_model, script_origin or script_brushmodel>",
        "mandatory_parameters": {
            "point": "The z value to move the entity to, as a floating point number",
            "time": "The time to move the entity in seconds"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Move this entity to the given world z value",
        "example": null
    },
    "838": {
        "fuction_name": "NavPointSightFilter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "points": "Array of navmesh points",
            "origin": "Origin to check visibility from"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Given an array of navmesh points, filters the array based on navmesh visibility to an origin.",
        "example": "points = NavPointSightFilter( points, nearest )"
    },
    "839": {
        "fuction_name": "NeedsRevive",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "bool": "does player need to be reived"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Used for mini maps to display compass icon",
        "example": "self NeedsRevive( true )"
    },
    "840": {
        "fuction_name": "NodesAreLinked",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node1": "first node",
            "node2": "second node"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if node1 is connected to node2.",
        "example": "NodesAreLinked( node_moving_elev_left, node_moving_elev_right )"
    },
    "841": {
        "fuction_name": "NodesVisible",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node1": "pathnode to check",
            "node2": "pathnode to check against node1"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if these nodes are visible to one another, false otherwise.",
        "example": "if ( NodesVisible( cover, guy.node ) )"
    },
    "842": {
        "fuction_name": "NotSolid",
        "return_type": "void",
        "called_by": "<ent>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Unsets the solid flag, so that this object is no longer collidable.",
        "example": "self NotSolid()"
    },
    "843": {
        "fuction_name": "NumRemoteClients",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the number of remote clients connected to the game.  Very useful for scaling content for coop play, and network balancing.",
        "example": "num_remote_clients = NumRemoteClients()"
    },
    "844": {
        "fuction_name": "Obituary",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "victim": "The victim entity",
            "attacker": "The attacker entity",
            "weapon": "The means of death as a string"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Create an obituary for a character",
        "example": "Obituary( self, attacker, sWeapon, sMeansOfDeath )"
    },
    "845": {
        "fuction_name": "Objective_Add",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The number of the objective to add",
            "state": "A string value representing the state of the objective. Valid states are \"empty\", \"active\", \"invisible\", \"done\", \"current\" and \"failed\""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Add a new objective, with ability to specify all the info for the objective",
        "example": "Objective_Add( objective_number, \"active\", closest.bomb.origin, objective_text, self.objective )"
    },
    "846": {
        "fuction_name": "Objective_ClearAllUsing",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears the objective of all players using status.",
        "example": null
    },
    "847": {
        "fuction_name": "Objective_ClearEntity",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears the entity previous set on the objective",
        "example": null
    },
    "848": {
        "fuction_name": "Objective_ClearPlayerUsing",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter",
            "player": "The player who is no longer using the objective"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the objective to be not being used by the specified player.",
        "example": null
    },
    "849": {
        "fuction_name": "Objective_Delete",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Deletes the objective",
        "example": "Objective_Delete( objective_number )"
    },
    "850": {
        "fuction_name": "Objective_FlipIcon",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number",
            "objectiveID": "The index of objective"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Flips the icon of the objective",
        "example": "Objective_FlipIcon( self.friendlyObjID )"
    },
    "851": {
        "fuction_name": "Objective_GetGamemodeFlags",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_index": "The ID of the objective."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the gamemode flags for the objective.",
        "example": "flags = Objective_GetGamemodeFlags( myObjNumber )"
    },
    "852": {
        "fuction_name": "Objective_Icon",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter",
            "icon": "The icon name"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the objective icon",
        "example": "objective_icon( crateObjID, \"compass_supply_drop_black\" )"
    },
    "853": {
        "fuction_name": "Objective_OnEntity",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter",
            "entity": "The entity to set the objective to"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the objective to get its position from an entity.",
        "example": null
    },
    "854": {
        "fuction_name": "Objective_Position",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter",
            "position": "The position to set"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the objective position",
        "example": "objective_position( self.objectiveID, self.curOrigin )"
    },
    "855": {
        "fuction_name": "Objective_Set3D",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter",
            "use3D": "true if should render in hud"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets flag determining if 3D state for an objective is drawn.",
        "example": "Objective_Set3D( myObjNum, true, undefined, undefined, undefined, (0,0,70) )"
    },
    "856": {
        "fuction_name": "Objective_SetColor",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_index": "The ID of the objective.",
            "r/colorName": "Red float value for objective, or color name set from the UIEditor as an IString."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a color for the objective that the icon will then be drawn with.",
        "example": "Objective_SetColor( myObjNumber, 1.0, 0.0, 0.0, 1.0 )Objective_SetColor( myObjNumber, \"FriendlyBlue\" )"
    },
    "857": {
        "fuction_name": "Objective_SetFlag",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_index": "The ID of the objective to alter",
            "flag": "- active, fadeoutonscreen, perk, drawdistance, drawname, in3d, clipToMap, primary",
            "true/false": "turn the flag on or off"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the gamemode flags for the objective.",
        "example": "Objective_SetFlag( myObjNumber, \"active\", true )"
    },
    "858": {
        "fuction_name": "Objective_SetGamemodeFlags",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_index": "The ID of the objective.",
            "flags": "script managed flags."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the gamemode flags for the objective.  This function only works for modes not using 3d objectives (mp).",
        "example": "Objective_SetGamemodeFlags( myObjNumber, 0 )"
    },
    "859": {
        "fuction_name": "Objective_SetIcon",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client that is using the objective",
            "objectiveNumber": "The ID of the objective to alter",
            "materialName": "The material to set"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the icon for the objective",
        "example": "Objective_SetIcon( localClientNum, clientObjID, \"remotemissile_target\" )"
    },
    "860": {
        "fuction_name": "Objective_SetIconSize",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client that is using the objective",
            "objective_number": "The ID of the objective to alter",
            "scale": "The value to scale the objective icon"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the objective's scale for the icon.",
        "example": "objective_SetIconSize( localClientNum, clientObjID, 50 )"
    },
    "861": {
        "fuction_name": "Objective_SetInvisibleToAll",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the objective to be invisible to all players.",
        "example": null
    },
    "862": {
        "fuction_name": "Objective_SetInvisibleToPlayer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter",
            "player": "The player to whom the objective is now invisible"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the objective to be invisible to the specified player.",
        "example": null
    },
    "863": {
        "fuction_name": "Objective_SetInvisibleToPlayerByIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter",
            "entnum": "The entity number of the player to whom the objective is now invisible"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the objective to be invisible to the specified player.",
        "example": null
    },
    "864": {
        "fuction_name": "Objective_SetPlayerUsing",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter",
            "player": "The player who is using the objective"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the objective to being used by the specified player.",
        "example": null
    },
    "865": {
        "fuction_name": "Objective_SetProgress",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_index": "The ID of the objective.",
            "percent": "percent float value for objective [0-1]."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the progress for the objective.",
        "example": "Objective_SetProgress( myObjNumber, 0.5 )"
    },
    "866": {
        "fuction_name": "Objective_SetSize",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_index": "The ID of the objective.",
            "entity/float": "The entity to get the size from or a sizeX."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a size for the objective that the icon will then be drawn at. Min is MIN_OBJECTIVE_ICON_SIZE = 5",
        "example": "Objective_SetSize( myObjNumber, myTrigger )Objective_SetSize( myObjNumber, 20, 30 )"
    },
    "867": {
        "fuction_name": "Objective_SetStencil",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client that is using the objective",
            "objective_number": "The ID of the objective to alter",
            "stencil": "Set to true if you want the objective to stencil"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the objective's stencil for the icon.",
        "example": "Objective_SetStencil( localClientNum, clientObjID, true )"
    },
    "868": {
        "fuction_name": "Objective_SetUIModelValue",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter",
            "lui menu data name": "precached name string for the data which we're trying to set.",
            "lui menu data value": "value for the data which we're trying to set on the objective."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a UI Model Value for an objective",
        "example": "Objective_SetUIModelValue( 0, \"killedCount\", 4 ); or Objective_SetUIModelValue( 0, \"killedCount\", \"Four\" )"
    },
    "869": {
        "fuction_name": "Objective_SetVisibleToAll",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the objective to be visible to all players.",
        "example": null
    },
    "870": {
        "fuction_name": "Objective_SetVisibleToPlayer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter",
            "player": "The player to whom the objective is now visible"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the objective to be visible to the specified player.",
        "example": null
    },
    "871": {
        "fuction_name": "Objective_SetVisibleToPlayerByIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter",
            "entnum": "The entity number of the player to whom the objective is now visible"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the objective to be visible to the specified player.",
        "example": null
    },
    "872": {
        "fuction_name": "Objective_State",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter",
            "state": "The state to set"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a state for the objective",
        "example": "Objective_State( obj_id, \"active\" )"
    },
    "873": {
        "fuction_name": "Objective_Team",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter",
            "team": "The team that the objective is for. Valid entries are 'allies', 'axis', 'team3', or 'none'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the team that the objective is for. Allows having different objectives for each team",
        "example": "Objective_Team( 0, \"allies\" )"
    },
    "874": {
        "fuction_name": "Objective_VisibleTeams",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_number": "The ID of the objective to alter",
            "team": "The team that the objective is for. Valid entries are 'allies', 'axis', 'team3', or 'none'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the team that the objective is visible too for. Allows having different objectives for each team",
        "example": "Objective_VisibleTeams( 0, 01101101 )"
    },
    "875": {
        "fuction_name": "OffhandWeaponsEnabled",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Determine if offhand weapons are enabled for the player",
        "example": "enabled = player OffhandWeaponsEnabled()"
    },
    "876": {
        "fuction_name": "OverrideLightingOrigin",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Uses the entity origin as the lighting origin instead of the center of the entity's bounding area",
        "example": "door OverrideLightingOrigin()"
    },
    "877": {
        "fuction_name": "OverrideSpawnflags",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the spawnflags on this entity.  Used for patching.",
        "example": "entity OverrideSpawnflags( 64 )"
    },
    "878": {
        "fuction_name": "PathDistance",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start": ".",
            "end": "."
        },
        "optional_parameters": {
            "generatePathForAccurateDist": "If set to true, a real path will be generated and the total length of the path segments will be returned.",
            "pathEnt": "Only used when generatePathForAccurateDist is set. pathEnt will be used for generating a path, so it will respect the movement type. Only supported for actors.",
            "pathDistanceType": "The method of pathdistance calculation. Two options are PATHDIST_APPROXIMATE(using getApproximateFuturePositions), PATHDIST_CORNERPREDICTED (using getCornerPredictor).",
            "maxCornerPredictions": "Maximum number of cornerPrediction steps when PATHDIST_CORNERPREDICTED is used. Handles the edge case when cornerPrediction may not ever finish stepping the path all the way."
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the approximate/semi-accurate path distance between two points or undefined if no path can be found.",
        "example": null
    },
    "879": {
        "fuction_name": "PhysicsExplosionCylinder",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "The origin of the cylinder",
            "outer radius": "The outer radius of the cylinder",
            "inner radius": "The inner radius of the cylinder",
            "magnitude": "The magnitude of the explosion"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Created a physics explosion cylinder",
        "example": "PhysicsExplosionCylinder( self.origin, 600, 240, 1 )"
    },
    "880": {
        "fuction_name": "PhysicsExplosionSphere",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "The origin of the sphere",
            "outer radius": "The outer radius of the sphere",
            "inner radius": "The inner radius of the sphere",
            "magnitude": "The magnitude of the explosion"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Create a physics explosion sphere",
        "example": "PhysicsExplosionSphere( origin, radius, radius, 5, max_damage, min_damage )"
    },
    "881": {
        "fuction_name": "PhysicsJetThrust",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "origin of the thrust",
            "weapon facing dir": "The weapon facing direction",
            "radius": "The radius of the thrust",
            "magnitude": "The magnitude of the thrust",
            "angle limit": "The angle limit for the thrust"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates a physics jet thrust",
        "example": "PhysicsJetThrust( self.origin, (0,0,1), 400, 1, 60)"
    },
    "882": {
        "fuction_name": "PhysicsJolt",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "The origin of the jolt",
            "outer radius": "The outer radius of the jolt",
            "inner radius": "The inner radius of the jolt",
            "impulse": "The impulse created by the explosion"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Create a physics radius jolt",
        "example": "PhysicsJolt( self.origin, 600, 240, 1 )"
    },
    "883": {
        "fuction_name": "PhysicsLaunch",
        "return_type": "void",
        "called_by": "<script_model>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Permanently turn this entity into a physics object with an intial force vector at the specified point.",
        "example": "dummy PhysicsLaunch( contact_point, initial_force )"
    },
    "884": {
        "fuction_name": "PhysicsTrace",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "start": "starting position",
            "end": "ending position"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Does a physics trace from start to end. Returns hit position",
        "example": "trace = PhysicsTrace( start, end, ( 0, 0, 0 ), ( 0, 0, 0 ), self, PHYSICS_TRACE_MASK_VEHICLE_CLIP )"
    },
    "885": {
        "fuction_name": "PhysicsTraceEx",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "start": "The start point",
            "end": "The end point"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Physics trace, ignoring characters. Returns the full trace structure.",
        "example": "trace = PhysicsTraceEx( start, end, (-10,-10,0), (10,10,0) )"
    },
    "886": {
        "fuction_name": "PlaceSpawnPoint",
        "return_type": "void",
        "called_by": "<spawn point>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Raises the spawn point up to make sure it's not in the ground, then drops it back down into the ground.",
        "example": "spawnpoints[i] PlaceSpawnPoint()"
    },
    "887": {
        "fuction_name": "PlayBattleChatterToTeam",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "aliasname1": "The first sound alias to play",
            "aliasname2": "The second sound alias to play",
            "teamname": "The team that will be able to hear the sound. Must be either 'axis' or 'allies' or 'team3'."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play the sound alias as if coming from the entity, so that only one team can hear it",
        "example": "self PlaySoundToTeam( \"frag_out\", \"axis\", self )"
    },
    "888": {
        "fuction_name": "PlayerBeingSpectated",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Number of the local client to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the player the local client is spectating or the player himself if no spectating is going on",
        "example": "spectated = PlayerBeingSpectated( localClientNum )"
    },
    "889": {
        "fuction_name": "PlayerBulletTrace",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "start": "The bullet start point",
            "end": "The bullet end point",
            "ignore entity": "An entity to ignore"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Allows script to do a bullet point trace with CONTENTS_PLAYER, collides with player hitboxes. Returns hit position, hit entity, hit surface normal.",
        "example": "trace = PlayerBulletTrace( magicBulletOrigin.origin, eyePos, undefined )"
    },
    "890": {
        "fuction_name": "PlayerCamLinkTo",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "entity": "Entity to look through.",
            "tagname": "Name of tag on host model to attach to."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the player's vision to look through another entity.",
        "example": "level.player2 CameraLinkTo( cameraUpstairs, \"tag_player\" )"
    },
    "891": {
        "fuction_name": "PlayerCamUnlink",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Unlinks the player's vision from an entity.",
        "example": "level.player2 CameraUnlink( )"
    },
    "892": {
        "fuction_name": "PlayerGrappleTrace",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start": "starting position",
            "end": "ending position"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Trace to see if grapple is valid",
        "example": "hitp = PlayerGrappleTrace(player.origin, player.origin + (0,0,-500))"
    },
    "893": {
        "fuction_name": "PlayerLinkedOffsetDisable",
        "return_type": "void",
        "called_by": "<linked_player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "If disabled, the linked player's orientation will not use their link offset.",
        "example": "ac130guy PlayerLinkedOffsetDisable()"
    },
    "894": {
        "fuction_name": "PlayerLinkedOffsetEnable",
        "return_type": "void",
        "called_by": "<linked_player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "If enabled, the linked player's orientation will use their link offset. This is traditional (CoD4) LinkTo behavior for a player.",
        "example": "ac130guy PlayerLinkedOffsetEnable()"
    },
    "895": {
        "fuction_name": "PlayerLinkedSetUseBaseAngleForViewClamp",
        "return_type": "void",
        "called_by": "<linked_player>",
        "mandatory_parameters": {
            "enable": "whether or not to enable using the base entity for the view angle clamp base."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the whether the player's view clamp is based on the entity (true) or the tag selected (false). Must be called after linking using WeaponViewToDelta",
        "example": "player PlayerLinkedSetUseBaseAngleForViewClamp( true )NOTES:  A Linked Player Entity using WeaponViewToDelta"
    },
    "896": {
        "fuction_name": "PlayerLinkTo",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "linkto entity": "The entity to attach the player to."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Attaches the player to an entity. Any entity rotation is added to the player's view, allow the player to look around. Rotating the parent entity/tag will not move the player's eye position, but only the player's view angles. Thus, the player's eye position is locked in place, always directly above the parent tag.",
        "example": "level.player PlayerLinkTo( vehicle, \"tag_player\", 0.5 )"
    },
    "897": {
        "fuction_name": "PlayerLinkToAbsolute",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "lockto entity": "The entity to attach the player to"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Attaches the player to an entity. No view movement is allowed.  The player's eye position will remain fixed relative to the parent entity/tag. Thus, pitching and rolling will cause the player's eye position to move. (But the player entity always remains vertical)",
        "example": "player PlayerLinkToAbsolute( vehicle, \"tag_player\" )"
    },
    "898": {
        "fuction_name": "PlayerLinkToBlend",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "parent": "The entity to attach the player to."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Only works if the player is currently linked to another entity and angles aren't locked. Lerps the current view angle constraints to the provided ones over the specified time.",
        "example": "player PlayerLinkToBlend( ice_pick, \"tag_origin"
    },
    "899": {
        "fuction_name": "PlayerLinkToDelta",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "linkto entity": "The entity to attach the player to."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Attaches the player to an entity. Any entity rotation is added to the player's view, allow the player to look around. The player's eye position will remain fixed relative to the parent entity/tag. Thus, pitching and rolling will cause the player's eye position to move. (But the player entity always remains vertical)",
        "example": "level.player PlayerLinkToDelta( vehicle, \"tag_player\", 0.5 )"
    },
    "900": {
        "fuction_name": "PlayerLinkWeaponViewToDelta",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "linkto entity": "The entity to attach the player to."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Similar to PlayerLinkToDelta(), but the player's body stays behind. The player's view attaches to the tag, and any weapon fire will also come from there.",
        "example": "level.player PlayerLinkToDelta( vehicle, \"tag_player\", 0.5 )"
    },
    "901": {
        "fuction_name": "PlayerPhysicsTrace",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start": "starting position",
            "end": "ending position"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Does a physics trace and returns the hit point.",
        "example": "hitp = PlayerPhysicsTrace(player.origin + (0,0,72), player.origin + (0,0,-500))"
    },
    "902": {
        "fuction_name": "PlayerPhysicsTraceIgnoreEnt",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start": "starting position",
            "end": "ending position"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Does a physics trace and returns the hit point.",
        "example": "hitp = PlayerPhysicsTraceIgnoreEnt(player.origin + (0,0,72), player.origin + (0,0,-500))"
    },
    "903": {
        "fuction_name": "PlayerPositionValid",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "The position of the potential spawn point"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the passed in origin is valid for a spawn (ie not inside something).",
        "example": "if(playerpositionvalid(spawnpoints[i].origin))..."
    },
    "904": {
        "fuction_name": "PlayerPositionValidIgnoreEnt",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "The position of the potential spawn point"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the passed in origin is valid for a spawn (ie not inside something).",
        "example": "if(PlayerPositionValidIgnoreEnt(spawnpoints[i].origin))..."
    },
    "905": {
        "fuction_name": "PlayerSetGroundReferenceEnt",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "ground reference entity": "The entity used to rotate the player's view."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "The ground entity's rotation will be added onto the player's view.  In particular, this will cause the player's yaw to rotate around the entity's z-axis instead of the world z-axis.  You only need to call this function once.  After that, any rotation that the reference entity undergoes will affect the player.  Call this command again with undefined to turn it off.",
        "example": "player PlayerSetGroundReferenceEnt( seaEnt )"
    },
    "906": {
        "fuction_name": "PlayerSightTrace",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "place that check if you can see if being performed",
            "maxDistance": "if the position is further than this -1 will be returned",
            "hitNum": "if you run this more than once make sure to populate this with the return of the last as it will increase efficiency"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Determines if you can see an item.  Checks distance and view cone before the trace to increase efficency.",
        "example": "if (0 == (self Playersighttrace(positionOfFlare, 200, lastHit))"
    },
    "907": {
        "fuction_name": "PlayFX",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "fx name": "Name of the fx. Fx has to be cached",
            "position": "Position to play the fx at"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Plays the fx at the given location.",
        "example": "PlayFX( level._effect[\"nuke_fx\"], nuke_pos.origin, forward, up )"
    },
    "908": {
        "fuction_name": "PlayFXOnCamera",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "fx name": "Name of the fx. Fx has to be cached"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Plays the fx at the given offset from the camera.",
        "example": "PlayFX( level._effect[\"bubbles\"], offset, forward, up )"
    },
    "909": {
        "fuction_name": "PlayFXOnTag",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "fx name": "Name of the fx. Fx has to be cached",
            "entity": "The entity to play the fx on. Should have a model",
            "tag": "The tag to play the fx on"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play fx on a particular tag of an entity",
        "example": "PlayFxOnTag( level._effect[\"character_fire_death_torso\"], self, \"J_Spine1\" )"
    },
    "910": {
        "fuction_name": "PlayLoopedFX",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "fx name": "Name of the fx. Fx has to be cached",
            "repeat": "Time to repeat after",
            "position": "Position to play the fx at"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play an fx which is looped",
        "example": "PlayLoopedFX( level._effect[self.v[\"trailfx\"]], self.v[\"trailfxdelay\"], self.v[\"origin\"], 0, self.v[\"forward\"], self.v[\"up\"] )"
    },
    "911": {
        "fuction_name": "PlayLoopSound",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "aliasname": "The sound alias to play"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play a looping sound with an optional fadetime in seconds.",
        "example": "fire_sound_ent playloopsound (\"mpl_player_burn_loop\")"
    },
    "912": {
        "fuction_name": "PlayRumbleLoopOnEntity",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "rumble name": "The name of the rumble to play"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Plays a looping rumble on the given entity.",
        "example": "self PlayRumbleLoopOnEntity( \"damage_heavy\" )"
    },
    "913": {
        "fuction_name": "PlayRumbleLoopOnPosition",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "rumblename": "The rumble name",
            "position": "The rumble position"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play a looping rumble on the given position",
        "example": "PlayRumbleLoopOnPosition( \"grenade_rumble\", origin )"
    },
    "914": {
        "fuction_name": "PlayRumbleOnEntity",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "rumble name": "The name of the rumble to play"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Plays a rumble on the given entity.",
        "example": "self PlayRumbleOnEntity( \"damage_heavy\" )"
    },
    "915": {
        "fuction_name": "PlayRumbleOnPosition",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "rumblename": "The rumble name",
            "position": "The rumble position"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play a rumble on the given position",
        "example": "PlayRumbleOnPosition( \"grenade_rumble\", origin )"
    },
    "916": {
        "fuction_name": "PlaySound",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "aliasname": "The sound alias to play"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play the sound at the entity",
        "example": "bomb PlaySound( \"zmb_bomb_explode\" )"
    },
    "917": {
        "fuction_name": "PlaySoundAtPosition",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "aliasname": "The sound alias to play",
            "position": "The point where the sound is played"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play the sound alias from a position",
        "example": "PlaySoundAtPosition(\"Dirt_skid\", ( 100, 100, 0 ) )"
    },
    "918": {
        "fuction_name": "PlaySoundOnTag",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "aliasname": "The sound alias to play, this can be the string name, or the integer hash"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play the sound alias as if coming from the tag",
        "example": "self PlaySoundOnTag( soundAlias, \"J_Head\")"
    },
    "919": {
        "fuction_name": "PlaySoundToAllButPlayer",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "aliasname": "The sound alias to play (string)",
            "player": "The player that will not be able to hear the sound. (entity)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play the sound alias as if coming from the entity, so that everyone but one player can hear it",
        "example": "self PlaySoundToAllButPlayer( \"frag_out\", self )"
    },
    "920": {
        "fuction_name": "PlaySoundToPlayer",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "aliasname": "The sound alias to play (string) or the sound alias (int)",
            "player": "The player that will be able to hear the sound. (entity)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play the sound alias as if coming from the entity, so that only one player can hear it",
        "example": "self PlaySoundToPlayer( \"frag_out\", self )"
    },
    "921": {
        "fuction_name": "PlaySoundToTeam",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "aliasname": "The sound alias to play",
            "teamname": "The team that will be able to hear the sound. Must be either 'axis' or 'allies' or 'team3'."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play the sound alias as if coming from the entity, so that only one team can hear it",
        "example": "self PlaySoundToTeam( \"frag_out\", \"axis\", self )"
    },
    "922": {
        "fuction_name": "PlaySoundWithNotify",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "aliasname": "The sound alias to play"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play the sound alias as if coming from the entity",
        "example": "self PlaySoundWithNotify(\"Dirt_skid\",\"skidsound\")"
    },
    "923": {
        "fuction_name": "PositionQuery_Filter_Directness",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "queryStruct": "result from PositionQuery_Source function. each point contained here will have direction info computed.",
            "origin": "usually the position of AI before move.",
            "target": "the position AI is trying to approach."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Directness filter compute the direction information for each of the positions, relative to <origin> and <target>.",
        "example": "PositionQuery_Filter_Directness( queryResult, self.origin, self.enemy.origin )NOTES:  The result includes:pointStruct.Directness = DistanceToTargetDifferenceAfterMove / DistanceMoved. Directness describes how efficient the point emerges to target. A close to 1.0 directness leads straight towards target; a close to 0.0 directness prefers strafing while maintain distance; a negative directness gets away from target.pointStruct.LeftDist = distance moved to the left using reference line passing <origin> and <target>. negative value means to the right.pointStruct.TargetDist = distance to <target>."
    },
    "924": {
        "fuction_name": "PositionQuery_Filter_DistanceToGoal",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "queryStruct": "result from PositionQuery_Source function.\"",
            "entity": "the entity used to check goal.\""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Calculate the distance to <entity>.goalpos. If the point is in <entity>.goalradius, the distance will be 0. the result is in pointStruct.distToGoal",
        "example": "PositionQuery_Filter_DistanceToGoal( queryResult, self )"
    },
    "925": {
        "fuction_name": "PositionQuery_Filter_InClaimedLocation",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "queryStruct": "result from PositionQuery_Source function.\"",
            "entity": "the entity used to check goal.\""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the locations are inside other sentients claimed locations <entity>.inClaimedLocation.",
        "example": "PositionQuery_Filter_InClaimedLocation( queryResult, self )"
    },
    "926": {
        "fuction_name": "PositionQuery_Filter_Sight",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "queryStruct": "result from PositionQuery_Source function. each point contained here will be used to check sight against <targetPosition>. \"",
            "targetPosition": "the position to check sight.\""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sight filter do sight check on each of the positions to a target position, and store the result in pointStruct.visibility (boolean).",
        "example": "PositionQuery_Filter_Sight( queryResult, self.enemy.origin, self GetEye() - self.origin, self, 30, self.enemy );"
    },
    "927": {
        "fuction_name": "PositionQuery_Source_Navigation",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "Position to start the search around.",
            "minSearchRadius": "the minimum radius away from origin.",
            "maxSearchRadius": "the maximum radius away from origin. can equal to minSearchRadius.",
            "halfHeight": "the max height difference (both positive and negative) away from origin.",
            "innerSpacing": "the distance between points in."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Generate points around <origin>, between <minSearchRadius> and <maxSearchRadius> and within <halfHeight> height difference. For ground AI, the points will be on Nav Mesh; for flying AI, the points will be in Nav Volume. Only the points in pathable area will be kept. If the <origin> itself is in pathable area, all the points are guaranteed to be reachable from <origin>. If the <origin> is outside pathable area, all the points will still be in pathable areas surrounding <origin>, but reach-abilities cannot be guaranteed.",
        "example": "queryResult = PositionQuery_Source_Navigation( goalpos, self.radius, self.radius * 8, heightRadius, AI_GOAL_POINT_STEP, self, AI_GOAL_POINT_STEP * 0.2 )if ( queryResult.centerOnNav ){foreach( pointStruct in queryResult.data ){position = pointStruct.origindist = pointStruct.distToOrigin2D...}}NOTES:  The returned data will be in following structure:rootStruct{// meta data of the queryvec3 originfloat maxRadiusstring sourceTypebool centerOnNav...// points data arraypointStruct{vec3 originfloat scorefloat distToOrigin2D// filters will add additional values here later, e.g.bool visibilityfloat distanceToPoint...} data[]} returnValue"
    },
    "928": {
        "fuction_name": "PositionWouldTelefrag",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "The position of the potential spawn point"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the passed in origin would telefrag a player if another player was spawned there.",
        "example": "if ( PositionWouldTelefrag( spawnpoints[i].origin ) ) ..."
    },
    "929": {
        "fuction_name": "PrecacheLeaderboards",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "leaderboard names": "The name of the leaderboards to precache"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Precache a sp/mp leaderboard.",
        "example": "PrecacheLeaderboards( \"LB_KILLS LB_WINS LB_TOTALXP LB_ACCURACY\" )"
    },
    "930": {
        "fuction_name": "PredictGrenade",
        "return_type": "void",
        "called_by": "<grenade>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Predict where the grenade (self) will explode.",
        "example": "grenade PredictGrenade()"
    },
    "931": {
        "fuction_name": "PredictPosition",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "ent": "The entity to predict position of",
            "frames": "The frame count"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Predict position of the entity at the end of the frames",
        "example": "prediction = PredictPosition( ent, 4 )"
    },
    "932": {
        "fuction_name": "PredictSpawnPoint",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "origin": "The origin to spawn at",
            "angles": "The angle."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Indicates to the Texture Streamer where we expect to spawn in.",
        "example": "player predictSpawnPoint( origin, angles )"
    },
    "933": {
        "fuction_name": "Print",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "text": "text to be written"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Development only - write to the console",
        "example": "Print( \"Stuff and things!\" )"
    },
    "934": {
        "fuction_name": "PrintLn",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "text": "text to be written"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Development only - write line to the console",
        "example": "PrintLn( \"I could be doing better!\" )"
    },
    "935": {
        "fuction_name": "ProcessClientFieldsAsIfNew",
        "return_type": "void",
        "called_by": "<client>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Process the client fields again",
        "example": "self ProcessClientFieldsAsIfNew()"
    },
    "936": {
        "fuction_name": "PropagateCurrentEvent",
        "return_type": "void",
        "called_by": "<ai_or_player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Propagate the current event to other AI.",
        "example": "point = self PropagateCurrentEvent()"
    },
    "937": {
        "fuction_name": "QSortScoredSpawnPointsAscending",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "input_array": "The array of points"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sort the scored spawn points in an ascending order",
        "example": "sorted_spawn_points = QSortScoredSpawnPointsAscending( scored_spawn_points )"
    },
    "938": {
        "fuction_name": "queuemeleeactionstate",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the queued action state to melee for the player's default hand.",
        "example": "player QueueMeleeActionState()"
    },
    "939": {
        "fuction_name": "RadioActive_FX",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "localClientNum": "Client number of the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Plays RadioActive/Fire FX",
        "example": "entity RadioActive_FX(0, true)"
    },
    "940": {
        "fuction_name": "RadiusDamage",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": null
    },
    "941": {
        "fuction_name": "ReCacheLeaderboards",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "recaches local client leaderboard",
        "example": "recacheleaderboards(0)"
    },
    "942": {
        "fuction_name": "RecordBreadcrumbDataForPlayer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "record a breadcrumb data point for player at time",
        "example": null
    },
    "943": {
        "fuction_name": "RefreshShieldAttachment",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Re-attach the shield model to the player.",
        "example": "player RefreshShieldAttachment()"
    },
    "944": {
        "fuction_name": "RegisterClientField",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "Client field pool name": "Which pool the field is allocated from. Currently supported : \"world\", \"actor\", \"vehicle\", \"scriptmover\"",
            "name": "Unique name to identify the field.",
            "version": "Number indicating version this field was added in - see _version.gsh for defines.",
            "num bits": "How many bits to use for the field. Valid values are in the range of 1-32. Only ask for as many as you need.",
            "type": "Type of the field. Currently supported types \"int\" or \"float\""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Register a client field. Client fields are variable bit length fields communicated from server to client.",
        "example": "RegisterClientField(\"world\", \"my_field\", 2, \"int\"); // registers a world int field with 2 bits of resolution, that can hold the values 0,1,2,3."
    },
    "945": {
        "fuction_name": "RegisterSkipto",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "skipto_name": "The skipto name to register"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Register a new skipto name",
        "example": "struct.code_index = RegisterSkipto( msg )"
    },
    "946": {
        "fuction_name": "ReleaseClaimedTrigger",
        "return_type": "void",
        "called_by": "<trigger>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Release a currently claimed trigger",
        "example": "self.trigger releaseClaimedTrigger()"
    },
    "947": {
        "fuction_name": "RemoveAllFriendlyScramblers",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "removes all friendly scramblers",
        "example": "player RemoveAllFriendlyScramblers( )"
    },
    "948": {
        "fuction_name": "RemoveAllSensorGrenadeAreas",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "removes all sensor grenade areas",
        "example": "player RemoveAllSensorGrenadeAreas( )"
    },
    "949": {
        "fuction_name": "RemoveForceNoCull",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Removes the force-no-cull flag. Entity will now be culled by portals",
        "example": "helicopter RemoveForceNoCull()"
    },
    "950": {
        "fuction_name": "RemoveFriendlyScrambler",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "handle": "will be used to remove the scrambler"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "removes new friendly scrambler from the compass using the same handle you gave when creating it",
        "example": "player RemoveFriendlyScrambler( scrambler.handle )"
    },
    "951": {
        "fuction_name": "RemoveInfluencer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "influencer id": "The influencer to remove"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Removes the given influencer",
        "example": "RemoveInfluencer( influencer_id )"
    },
    "952": {
        "fuction_name": "RemoveNoSunShadow",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Removes the no-sunshadow flag.",
        "example": "helicopter RemoveNoSunShadow()"
    },
    "953": {
        "fuction_name": "RemoveSensorGrenadeArea",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "handle": "will be used to remove the sensor"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Removes Sensor Grenade Area from the compass",
        "example": "player RemoveSensorGrenadeArea( sensor.handle )"
    },
    "954": {
        "fuction_name": "RemoveZombieBoxWeapon",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weapon": "The weapon to remove"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Removes a zombie box weapon",
        "example": "RemoveZombieBoxWeapon( weapon )"
    },
    "955": {
        "fuction_name": "RenderHealthOverlay",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the whether the health overlay should be rendered or not",
        "example": "yesno = RenderHealthOverlay( localClientNum )"
    },
    "956": {
        "fuction_name": "RenderHealthOverlayHealth",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the whether the health overlay health ratio",
        "example": "yesno = RenderHealthOverlayHealth( localClientNum )"
    },
    "957": {
        "fuction_name": "ReportUser",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": null
    },
    "958": {
        "fuction_name": "ResetAILimit",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears any previous restrictions on the max number of AI.",
        "example": null
    },
    "959": {
        "fuction_name": "ResetDestructible",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Resets the destructible entity back to its start state",
        "example": "vehicle ResetDestructible()"
    },
    "960": {
        "fuction_name": "ResetDoubleJumpRechargeTime",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Resets the double jump recharge timer as if the player had just used it",
        "example": "player ResetDoubleJumpRechargeTime()"
    },
    "961": {
        "fuction_name": "ResetFOV",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Replace the current FOV by the default FOV",
        "example": "player ResetFOV()"
    },
    "962": {
        "fuction_name": "ResetGlass",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Server side glass struct loops through all glass and resets to inital state",
        "example": "ResetGlass()"
    },
    "963": {
        "fuction_name": "ResetMissileDetonationTime",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Resets the timer for a grenade or missile to its max fuse time.",
        "example": "grenadeEnt ResetMissileDetonationTime()"
    },
    "964": {
        "fuction_name": "ResetWeaponCosts",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "local client num": "The local client num"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Reset the zombie weapon costs",
        "example": "ResetWeaponCosts( <local client num>  )"
    },
    "965": {
        "fuction_name": "ResetZombieBoxWeapons",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Reset the zombie box weapons",
        "example": "ResetZombieBoxWeapons()"
    },
    "966": {
        "fuction_name": "ReviveObituary",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "victim": "The victim entity"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Create an revive obituary for a character",
        "example": "Obituary( self )"
    },
    "967": {
        "fuction_name": "RopeGetPosition",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "ropeid": "The id of the rope",
            "frac": "Value between 0 and 1 specifying what position we are querying."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Queries the position of the rope.",
        "example": "RopeGetPosition( ropeid, 1 )"
    },
    "968": {
        "fuction_name": "RopePulse",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "Where the event is.",
            "innerRadius": "inner radius of event.  At this radius or lower, innerDamage is done.",
            "outerRadius": "outer radius of event.  Maximum extent at which outerDamage is done.  Damage scales to innerDamage between outerRadius and innerRadius",
            "innerDamage": "how much damage is applied at innerRadius, or lower.",
            "outerDamage": "how much damage is applied at outerRadius."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Creates a stimulus that will effect ropes in the area and radius of the event.  Amount of movement is based on damage calculation.  Cheaper than physics events, as it only effects ropes.  Zero network cost, as it's on the client.",
        "example": "RopePulse(sRopePulse.origin, 10, 150, 100, 1); // 150 damage applied at 10 units or less, 1 damage applied at 150 units distance."
    },
    "969": {
        "fuction_name": "Rotate",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "rotation vector": "The direction of the bobbing"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Causes a script entity to rotate, rotating around its origin",
        "example": "self Rotate( rotationVir )"
    },
    "970": {
        "fuction_name": "RotatePitch",
        "return_type": "void",
        "called_by": "<script_model, script_origin or script_brushmodel>",
        "mandatory_parameters": {
            "pitch angle": "The new pitch angle in degrees",
            "time": "The time to rotate in seconds"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Rotate this entity to the given pitch",
        "example": "treeorg RotatePitch( -5, 0.26, 0.15, 0.1 )"
    },
    "971": {
        "fuction_name": "RotateRoll",
        "return_type": "void",
        "called_by": "<model_origin_brushmodel>",
        "mandatory_parameters": {
            "roll angle": "The new roll angle in degrees",
            "time": "The time to rotate in seconds"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Rotate this entity to the given roll angle",
        "example": "self RotateRoll( (2 * 1500 + 3 * Randomfloat( 2500 )) * -1, 5, 0, 0 )"
    },
    "972": {
        "fuction_name": "RotateTo",
        "return_type": "void",
        "called_by": "<script_model, script_origin or script_brushmodel>",
        "mandatory_parameters": {
            "angles": "The new world angle to rotate to",
            "time": "The time to rotate in seconds"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Rotate this entity to the given world rotation value",
        "example": "shutter RotateTo( (shutter.angles[0], newYaw, shutter.angles[2]), newTime )"
    },
    "973": {
        "fuction_name": "RotateVelocity",
        "return_type": "void",
        "called_by": "<script_model, script_origin or script_brushmodel>",
        "mandatory_parameters": {
            "rotate velocity": "The rotational velocity to rotate",
            "time": "The time to rotate in seconds"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Rotate this entity at a particular velocity for a given time",
        "example": "self RotateVelocity( (x,y,z), 12 )"
    },
    "974": {
        "fuction_name": "RotateYaw",
        "return_type": "void",
        "called_by": "<script_model, script_origin or script_brushmodel>",
        "mandatory_parameters": {
            "yaw angle": "The new yaw angle in degrees",
            "time": "The time to rotate in seconds"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Rotate this entity to the given yaw",
        "example": null
    },
    "975": {
        "fuction_name": "ScreenShake",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "sourcePoint": "The position of the earthquake.",
            "scalepitch": "The scale of the shake in player's pitch. Max is 100; Accurate to 2 decimal places.",
            "scaleyaw": "The scale of the shake in player's yaw. Max is 100; Accurate to 2 decimal places.",
            "scaleroll": "The scale of the shake in player's roll. Max is 100; Accurate to 2 decimal places.",
            "duration": "Duration in seconds."
        },
        "optional_parameters": {
            "durationfadeup": "Duration in seconds, included in base duration. Default is 0. Value of -1 means duration - durationfadeup.",
            "durationfadedown": "Duration in seconds, included in base duration. Default is -1. Value of -1 means duration - durationfadedown.",
            "radius": "The radius of shake, dampens as you move away from entity. Default is 0 = shake is global",
            "frequencypitch": "The scaled speed of the shake's pitch. Default is 1. Max is 100; Accurate to 2 decimal places.",
            "frequencyyaw": "The scaled speed of the shake's yaw. Default is 1. Max is 100; Accurate to 2 decimal places.",
            "frequencyroll": "The scaled speed of the shake's roll. Default is 1. Max is 100; Accurate to 2 decimal places.",
            "exponent": "The scale is multiplied by itself 'exponent' times to determine how the shake falls off. Default is 1 which is a linear falloff. Max is 100; Accurate to 2 decimal places"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Create a screen shake event on the given point.",
        "example": "ScreenShake( jolt.origin, 0.3, 0.3, 0.3, 3, 0.2, 3, 850, 0.5, 0.25, 0.25 ); // locationalScreenShake( (0,0,0), 0.3, 0.3, 0.3, 3, 0.2, 3, 0, 0.5, 0.25, 0.25, player ); // non locational for one player only"
    },
    "976": {
        "fuction_name": "SendFaceEvent",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "index": "Face event index (string)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Broadcast to the client a face event",
        "example": "self SendFaceEvent( <index> )"
    },
    "977": {
        "fuction_name": "SendKillstreakDamageEvent",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Send a killstreak damage event to the client",
        "example": "killstreakOwner SendKillstreakDamageEvent( 25 )"
    },
    "978": {
        "fuction_name": "ServerFieldGetValue",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "player to get value from",
            "name": "name of field to retrieve"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the value of a serverfield from a given player",
        "example": "ServerFieldGetValue(self, \"my_field\"); "
    },
    "979": {
        "fuction_name": "ServerFieldIncrement",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "the player to operate on",
            "name": "Unique name to identify the field."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "increment the value in a server field.  wrap on overflow.  ",
        "example": "ServerFieldIncrement(player, \"my_field\")"
    },
    "980": {
        "fuction_name": "serverfieldregister",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "Unique name to identify the field.",
            "num bits": "How many bits to use for the field. Valid values are in the range of 1-32. Only ask for as many as you need.",
            "type": "Type of the field. Currently supported types \"int\" or \"float\"",
            "callback": "Function that gets called when the value changes (each client can toggle this bit independently of the others)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Register a server field. Server fields are variable bit length fields communicated from client to server",
        "example": "RegisterServerField(\"my_field\", 2, \"int\"); // registers an int field with 2 bits of resolution, that can hold the values 0,1,2,3."
    },
    "981": {
        "fuction_name": "serverfieldsetval",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "the player to operate on",
            "name": "Unique name to identify the field.",
            "value": "the value of the field"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Register a server field.  server fields are variable bit length fields communicated from client to server",
        "example": "RegisterServerField(\"my_field\", VERSION_SHIP, 2, \"int\", ::my_cb_func); // registers a world int field with 2 bits of resolution, that can hold the values 0,1,2,3."
    },
    "982": {
        "fuction_name": "ServerObjective_GetObjective",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number",
            "objectiveName": "The name of the objective"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the index of the objective or undefined if it does not exist",
        "example": "objective_num = ServerObjective_GetObjective( localClientNum, \"dom_a\" )"
    },
    "983": {
        "fuction_name": "ServerObjective_GetObjectiveEntity",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number",
            "objectiveID": "The index of objective"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the entity of the objective",
        "example": "origin = ServerObjective_GetObjectiveEntity( localClientNum, objective_num )"
    },
    "984": {
        "fuction_name": "ServerObjective_GetObjectiveGameModeFlags",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number",
            "objectiveID": "The index of objective"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the origin of the objective",
        "example": "origin = ServerObjective_GetObjectiveGameModeFlags( localClientNum, objective_num )"
    },
    "985": {
        "fuction_name": "ServerObjective_GetObjectiveOrigin",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number",
            "objectiveID": "The index of objective"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the index of the objective or undefined if it does not exist",
        "example": "origin = ServerObjective_GetObjectiveOrigin( localClientNum, objective_num )"
    },
    "986": {
        "fuction_name": "ServerObjective_GetObjectiveProgress",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number",
            "objectiveID": "The index of objective"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the origin of the objective",
        "example": "origin = ServerObjective_GetObjectiveProgress( localClientNum, objective_num )"
    },
    "987": {
        "fuction_name": "ServerObjective_GetObjectiveTeam",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number",
            "objectiveID": "The index of objective"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the origin of the objective",
        "example": "origin = ServerObjective_GetObjectiveTeam( localClientNum, objective_num )"
    },
    "988": {
        "fuction_name": "ServiceEvent",
        "return_type": "void",
        "called_by": "<ai>",
        "mandatory_parameters": {
            "eventId": "The identifier of the event (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the specified event to serviced.",
        "example": "point = self ServiceEvent( 100 )"
    },
    "989": {
        "fuction_name": "ServiceEventsInRadius",
        "return_type": "void",
        "called_by": "<ai>",
        "mandatory_parameters": {
            "origin": "Source position",
            "radius": "Radius of events to service (-1 for all)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the events within a radius to serviced.",
        "example": "self ServiceEventsInRadius( self.origin, 500 )"
    },
    "990": {
        "fuction_name": "SessionModeAbbreviation",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns abbreviation of the current session mode, or \"default\" if none",
        "example": "spawnpointname = SessionModeAbbreviation() + \"_frontend_camera"
    },
    "991": {
        "fuction_name": "SessionModeIsCampaignDeadOpsGame",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true/false if the current session mode is DeadOps game",
        "example": "if ( SessionModeIsCampaignDeadOpsGame() )"
    },
    "992": {
        "fuction_name": "SessionModeIsCampaignGame",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true/false if the current session mode is a campaign game",
        "example": "if ( SessionModeIsCampaignGame() )"
    },
    "993": {
        "fuction_name": "SessionModeIsCampaignZombiesGame",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns true/false if the current session mode is a campaign game and the campaign mode is set to zombies.",
        "example": "if ( SessionModeIsCampaignZombiesGame() )"
    },
    "994": {
        "fuction_name": "SessionModeIsMultiplayerGame",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true/false if the current session mode is a multiplayer game",
        "example": "if ( SessionModeIsMultiplayerGame() )"
    },
    "995": {
        "fuction_name": "SessionModeIsOnlineGame",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true/false if the current session mode is onlinegame",
        "example": "if ( SessionModeIsOnlineGame() )"
    },
    "996": {
        "fuction_name": "SessionModeIsPrivate",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true/false if the current session mode is a private game",
        "example": "if ( SessionModeIsPrivate() )"
    },
    "997": {
        "fuction_name": "SessionModeIsPrivateOnlineGame",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true/false if the current session mode is a private onlinegame",
        "example": "if ( SessionModeIsPrivateOnlineGame() )"
    },
    "998": {
        "fuction_name": "SessionModeIsSystemlink",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true/false if the current session mode is a systemlink game",
        "example": "if ( SessionModeIsSystemlink() )"
    },
    "999": {
        "fuction_name": "SessionModeIsZombiesGame",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true/false if the current session mode is a zombies game",
        "example": "if ( SessionModeIsZombiesGame() )"
    },
    "1000": {
        "fuction_name": "SetActorWeapon",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "weaponname": "The weapon name. (string)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the actor weapon.",
        "example": "self SetActorWeapon( \"weapon_name\" )"
    },
    "1001": {
        "fuction_name": "SetAILimit",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Allows you to specify a max number of active AI - which over-rides the MAX_AI functionality in the engine, when it comes time to spawn in new AI.  Setting the value higher will not give you more AI than the system supports.",
        "example": "SetAILimit( 10 )"
    },
    "1002": {
        "fuction_name": "SetAISpread",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {
            "spread": "The spread of the turret in degrees"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the spread of this turret when used by an AI",
        "example": "roof_turret SetAISpread( 0.2 )"
    },
    "1003": {
        "fuction_name": "SetAmbientSnapshot",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "Name of the snapshot"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the ambient snapshot",
        "example": "SetAmbientSnapshot( level._sndActiveSnapshot )"
    },
    "1004": {
        "fuction_name": "SetAnim",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "The animation or animtree node to change."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Restart\": These functions cause the animation to restart. If they had been previously playing, without this they would continue from their current time.",
        "example": "self SetAnim( %precombatrun1, 1, 0.1, 1 )"
    },
    "1005": {
        "fuction_name": "SetAnimForceNew",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "The animation or animtree node to change."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Debug only functionality that adds a new instance of an animation to an animtree setting its time to a specific point.",
        "example": "self SetAnimForceNew( %precombatrun1, 1, 0.1, 1 )"
    },
    "1006": {
        "fuction_name": "SetAnimKnob",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "The animation or animtree node to change."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "See \"SetAnim.",
        "example": "self SetAnimKnob( %precombatrun1, 1, 0.1, 1 )"
    },
    "1007": {
        "fuction_name": "SetAnimKnobAll",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "The animation or animtree node to change.",
            "root": "An ancestor of the animation."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "See \"SetAnim.",
        "example": "self SetAnimKnobAll( %precombatrun1, %body, 1, 0.1, 1 )"
    },
    "1008": {
        "fuction_name": "SetAnimKnobAllLimited",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "The animation or animtree node to change.",
            "root": "An ancestor of the animation."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "See \"SetAnim.",
        "example": "self SetAnimKnobAllLimited( %precombatrun1, %body, 1, 0.1, 1 )"
    },
    "1009": {
        "fuction_name": "SetAnimKnobAllLimitedRestart",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "The animation or animtree node to change.",
            "root": "An ancestor of the animation."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "See \"SetAnim.",
        "example": "self SetAnimKnobAllLimitedRestart( %precombatrun1, %body, 1, 0.1, 1 )"
    },
    "1010": {
        "fuction_name": "SetAnimKnobAllRestart",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "The animation or animtree node to change.",
            "root": "An ancestor of the animation."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "See \"SetAnim.",
        "example": "self SetAnimKnobAllRestart( %precombatrun1, %body, 1, 0.1, 1 )"
    },
    "1011": {
        "fuction_name": "SetAnimKnobLimited",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "The animation or animtree node to change."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "See \"SetAnim.",
        "example": "self SetAnimKnobLimited( %precombatrun1, 1, 0.1, 1 )"
    },
    "1012": {
        "fuction_name": "SetAnimKnobLimitedRestart",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "The animation or animtree node to change."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "See \"SetAnim.",
        "example": "self SetAnimKnobLimitedRestart( %precombatrun1, 1, 0.1, 1 )"
    },
    "1013": {
        "fuction_name": "SetAnimKnobRestart",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "The animation or animtree node to change."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "See \"SetAnim.",
        "example": "self SetAnimKnobRestart( %precombatrun1, 1, 0.1, 1 )"
    },
    "1014": {
        "fuction_name": "SetAnimLimited",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "The animation or animtree node to change."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "See \"SetAnim.",
        "example": "self SetAnimLimited( %precombatrun1, 1, 0.1, 1 )"
    },
    "1015": {
        "fuction_name": "SetAnimLimitedRestart",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "The animation or animtree node to change."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "See \"SetAnim.",
        "example": "self SetAnimLimitedRestart( %precombatrun1, 1, 0.1, 1 )"
    },
    "1016": {
        "fuction_name": "SetAnimRestart",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "The animation or animtree node to change."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "See \"SetAnim.",
        "example": "self SetAnimRestart( %precombatrun1, 1, 0.1, 1 )"
    },
    "1017": {
        "fuction_name": "SetAnimTime",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "animation to manipulate"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the animation time for the given animation.",
        "example": "if ( (self GetAnimTime( %walk_and_run_loops ) ) < 0.5 )"
    },
    "1018": {
        "fuction_name": "SetAnimTimeByName",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "animation": "animation to manipulate",
            "time": "0->1"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the animation normalized time for the given animation.",
        "example": "self SetAnimTimeByName( \"ai_anim_walk\",  0.5)"
    },
    "1019": {
        "fuction_name": "SetArchive",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "deprecated function, does nothing",
        "example": null
    },
    "1020": {
        "fuction_name": "SetAssassinationEnabled",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "flag": "Whether to use infrared material or not (boolean)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enable or disable assassinations on the AI.  Also turns on/off the can assassinate indicator.",
        "example": "quadtank SetAssassinationEnabled( true )"
    },
    "1021": {
        "fuction_name": "SetAttachmentCosmeticVariantIndex",
        "return_type": "void",
        "called_by": "<weapon>",
        "mandatory_parameters": {
            "weapon": "The weapon full name",
            "attachment name": "The attachment name of the weapon",
            "acvi": "The attachment cosmetic variant index"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the attachment cosmetic variant index for the weapon",
        "example": "level.weapon_clientscript_cac_model[type] SetAttachmentCosmeticVariantIndex( weaponFullName, level.attachment_names[i], 0 )"
    },
    "1022": {
        "fuction_name": "SetAttachmentCosmeticVariantIndexes",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "acvi": "The AttachmentCosmeticVariantIndexes to set"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the previously calculated SetAttachmentCosmeticVariantIndexes of the entity. The entity should not be a player",
        "example": "killcamEnt SetAttachmentCosmeticVariantIndexes( acvi )"
    },
    "1023": {
        "fuction_name": "SetAttachmentCosmeticVariants",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weaponname": "the name of the base weapon to return"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the AttachmentCosmeticVariantIndexes data to be passed in to the weapon",
        "example": "SetAttachmentCosmeticVariants( \"mp7_mp\", \"acog\", 2, \"grip\", 1 )"
    },
    "1024": {
        "fuction_name": "SetAvoidanceMask",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "Mask": "(const string) Mask must be 'avoid all', 'avoid none', 'avoid actor', 'avoid ai'(actors+vehicles), 'avoid player', or 'avoid vehicle'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the avoidance mask of this Havok character.",
        "example": "randEnemy SetAvoidanceMask(\"avoid none\")"
    },
    "1025": {
        "fuction_name": "SetAvoidanceProperty",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "Property": "(const string) Property must be 'collision penalty' or 'dodge penalty'",
            "Value": "(float) The value to set the property to"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the avoidance properties of this Havok character.",
        "example": "randAlly SetAvoidanceProperty(\"collision penalty\", 0.1)"
    },
    "1026": {
        "fuction_name": "SetBallPassAllowed",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enables or disables ball passing for the given player.",
        "example": "player SetBallPassAllowed( true )"
    },
    "1027": {
        "fuction_name": "SetBeastModeIconMaterial",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "iconid": "1 melee 2 electricity 3 grapple",
            "materialname": "material name"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "sets the material used by beast mode icons",
        "example": "SetBeastModeIconMaterial( 1, \"cool_icon_1\" )"
    },
    "1028": {
        "fuction_name": "SetBGBCost",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "local client num": "The local client num",
            "cost": "The cost of a BGB"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the current BGB cost",
        "example": "SetBGBCost( 115935 )"
    },
    "1029": {
        "fuction_name": "SetBlur",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "target_blur": "The final blur. The value is pixels for Gaussian blur at 640x480. Must be a floating point value greater than 0.",
            "time": "Time in seconds"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Blur the screen over a period of time.",
        "example": "setblur( 10.3, 3.0 )"
    },
    "1030": {
        "fuction_name": "SetBlurByLocalClientNum",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number",
            "blurFinalValue": "The blur value (must be positive)",
            "blurTime": "The time to blur (must be positive)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the blur for the local client given",
        "example": "SetBlurByLocalClientNum( localClientNum, curr_info.magnitude, curr_info.transition_in )"
    },
    "1031": {
        "fuction_name": "SetBodyRenderOptions",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "bodyRenderOptions": "The packed body render options - calculated with GetHeroBodyRenderOptions",
            "helmetRenderOptions": "The packed helmet render options - calculated with GetHeroHelmetRenderOptions",
            "headRenderOptions": "The packed head render options - calculated with GetHeroHeadRenderOptions"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the entity body, helmet and head render options.",
        "example": "heroModel SetBodyRenderOptions( bodyRenderOptions, helmetRenderOptions, headRenderOptions )"
    },
    "1032": {
        "fuction_name": "SetBodyRenderOptionsPacked",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "value": "Usually returned value from GetBodyRenderOptionsPacked()"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the packed value of body render options (body type, style, colors)",
        "example": "gibEntity SetBodyRenderOptionsPacked( 0 )"
    },
    "1033": {
        "fuction_name": "SetBombTimer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "flag bit": "The flag bit to change",
            "value": "The new value of the bit"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Bomb timer set in the match state",
        "example": "SetBombTimer( \"A\", 50000 )"
    },
    "1034": {
        "fuction_name": "SetBurn",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "time": "Time to burn for ( greater than 0 )"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the entity burning for the given time",
        "example": "self SetBurn( 3.0 )"
    },
    "1035": {
        "fuction_name": "SetCameraSpikeActive",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "toggle": "0 for off, 1 for on"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the state of a player's camera spike.",
        "example": "player SetCameraSpikeActive( 1 )"
    },
    "1036": {
        "fuction_name": "SetCanDamage",
        "return_type": "void",
        "called_by": "<script_model, script_origin or script_brushmodel>",
        "mandatory_parameters": {
            "can damage": "The can damage flag"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the candamage flag for this entity - this means that it can respond to notifies from bullets and grenade hits",
        "example": "self SetCanDamage( true )"
    },
    "1037": {
        "fuction_name": "SetClearanceCeiling",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a new clearance ceiling. If the value is larger than the current ceiling, cut faces will be invalidated.",
        "example": "SetClearanceCeiling( 15.0 )"
    },
    "1038": {
        "fuction_name": "SetClientNameMode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name mode": "either 'auto_change' or 'manual_change'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "alters the way that the player name is updated, to prevent cheating by spectators altering their name to communicate with active players.",
        "example": "SetClientNameMode( \"auto_change\" )"
    },
    "1039": {
        "fuction_name": "SetClone",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the contents for the clone.",
        "example": "clone SetClone()"
    },
    "1040": {
        "fuction_name": "SetCompassIcon",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "iconName": "Name of compass material"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the icon to be shown on the minimap",
        "example": "plane setCompassIcon(iconName)"
    },
    "1041": {
        "fuction_name": "SetContents",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "content": "The content to set for the entity"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets contents of the entity to the given content",
        "example": "reconModel SetContents( 0 )"
    },
    "1042": {
        "fuction_name": "SetCorpseGibState",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "leg state": "0 - 3 state: 0 is no gib, 1 right, 2 left, 3 both",
            "arm state": "0 - 3 state: 0 is no gib, 1 right, 2 left, 3 both"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the gib state for the body rendering.",
        "example": "corpse SetCorpseGibState( leg_state, arm_state )"
    },
    "1043": {
        "fuction_name": "SetCullDist",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "cull distance": "The cull distance"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the cull distance for a level",
        "example": "SetCullDist( 7200 )"
    },
    "1044": {
        "fuction_name": "SetCursorHint",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Attach a cursor hint to the entity.",
        "example": "self setCursorHint( cursor_hint, cursor_hint_weapon )"
    },
    "1045": {
        "fuction_name": "SetDamageDirectionIndicator",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "indicator": "0 = regular, 1 = armor"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Use the armor version of the hit indicator",
        "example": null
    },
    "1046": {
        "fuction_name": "SetDangerous",
        "return_type": "void",
        "called_by": "<pathnode>",
        "mandatory_parameters": {
            "team": "Name of the team.",
            "flag": "True if dangerous. False otherwise"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set this node to be a dangerous node for a particular team. works only on pathnodes. ",
        "example": "self SetDangerous( self.team, true )"
    },
    "1047": {
        "fuction_name": "SetDedicatedShadow",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {
            "flag": "True or False, enabled or disabled"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enabled or Disables dedicated shadow for a model",
        "example": "thing SetDedicatedShadow( true )"
    },
    "1048": {
        "fuction_name": "SetDefaultDropPitch",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {
            "pitch": "yaw of the turret (side to side) in degrees."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the default drop pitch that the turret attempts to return to when it is not in use.",
        "example": "turret SetDefaultDropPitch( -90 )"
    },
    "1049": {
        "fuction_name": "SetDemoIntermissionPoint",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": ""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the intermission point for the demos.",
        "example": "setDemoIntermissionPoint( spawnpoint.origin, spawnpoint.angles )"
    },
    "1050": {
        "fuction_name": "SetDepthOfField",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "nearStart": "Near start (should be greater than 0)",
            "nearEnd": "Near end (should be greater than 0)",
            "farStart": "Far start (should be greater than 0)",
            "farEnd": "Far end (should be greater than 0)",
            "nearBlur": "Near blur",
            "farBlur": "Far blur"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the Depth of Field.",
        "example": "self SetDepthOfField( 0, 0, 512, 4000, 4, 0 )"
    },
    "1051": {
        "fuction_name": "SetDoubleJumpEnergy",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "energy": "% energy to set on the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a double jump energy amount on the player",
        "example": "player SetDoubleJumpEnergy( <energy> )"
    },
    "1052": {
        "fuction_name": "SetDrawInfrared",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "flag": "Whether to use infrared material or not (boolean)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Draw this entity using infrared material when using infrared scope.",
        "example": "helicopter SetDrawInfrared( true )"
    },
    "1053": {
        "fuction_name": "SetDrawName",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "text": "The name."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the drawnname of client ent",
        "example": "dude SetDrawName( \"dJVahn\" )"
    },
    "1054": {
        "fuction_name": "SetDrawOwnerName",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "bool": "Enable/Disable using the owners name."
        },
        "optional_parameters": {
            "bool": "Whether to always draw the name rega"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Draws the entity's owners name above the entity.",
        "example": "entity SetDrawOwnerName( true, true )"
    },
    "1055": {
        "fuction_name": "SetDvar",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "dvar": "The dvar name as a string.",
            "value": "The dvar value."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the value of a dvar.",
        "example": "SetDvar( \"r_eyesAdjust\", \"1\" )"
    },
    "1056": {
        "fuction_name": "SetDynEntBodyRenderOptionsPacked",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "packed render options": "Usually returned value from GetBodyRenderOptionsPacked()"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the packed value of body render options (body type, style, colors)",
        "example": "SetDynEntBodyRenderOptionsPacked( gibEntity, 0 )"
    },
    "1057": {
        "fuction_name": "SetDynEntEnabled",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set this dyn ent to enabled or disabled.  Disabled stops the physics and hides the dyn ent.",
        "example": "SetDynEntEnabled( brick, 1 )"
    },
    "1058": {
        "fuction_name": "SetElectrified",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "time": "Time to get electrified for ( greater than 0 )"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Electrify the entity for the given time",
        "example": "self SetElectrified( 3.0 )"
    },
    "1059": {
        "fuction_name": "SetEMPJammed",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "isJammed": "Whether the player should be jammed or not. ( boolean )"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether a player/client is affected by EMP",
        "example": "player SetEMPJammed( true )"
    },
    "1060": {
        "fuction_name": "SetEnableNode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "the node to enable/disable"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Disables or enabled this node.",
        "example": "SetEnableNode( node, false )"
    },
    "1061": {
        "fuction_name": "SetEnemyGlobalScrambler",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "bool": "true if there is a scrabler active, false otherwise"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set to true if there is a global enemy scrambler active",
        "example": "player SetEnemyGlobalScrambler( 1 )"
    },
    "1062": {
        "fuction_name": "SetEnemyModel",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "model name": "The name of the model to set this actor to"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the model of the actor that actors enemies will see to the given model name",
        "example": "dog SetEnemyModel( \"german_shepard_black\" )"
    },
    "1063": {
        "fuction_name": "SetEnemyScramblerAmount",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "float": "Between 0.0 and 1.0"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the amount alpha of the scrambler applied to the compass",
        "example": "player SetEnemyScramblerAmount( 1.0 )"
    },
    "1064": {
        "fuction_name": "SetEntBeastModeIconType",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "iconid": "1 melee 2 electricity 3 grapple"
        },
        "optional_parameters": {
            "location": "icon location"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "sets the beast mode icon shown for a particular entity",
        "example": "object SetBeastModeIconMaterial( 2, object.origin )"
    },
    "1065": {
        "fuction_name": "SetEntGravityTrajectory",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "trajectory": "0 = TR_GRAVITY, 1 = TR_MOON_GRAVITY"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the gravity trajectory type for the entity.",
        "example": "player SetEntGravityTrajectory( 0 )"
    },
    "1066": {
        "fuction_name": "SetEntityAnimRate",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "rate": "animation rate"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "set the entity animation rate - ZOMBIES ONLY",
        "example": "self SetEntityAnimRate( 1.0 )"
    },
    "1067": {
        "fuction_name": "SetEntityPaused",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "ignore": "Whether or not to advance normally."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether a given entity will advance normally.",
        "example": "ent SetEntityPaused( true )"
    },
    "1068": {
        "fuction_name": "SetEntityWeapon",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set weapon ent field from script.",
        "example": "ent SetEntityWeapon( \"kniferang_mp\" )"
    },
    "1069": {
        "fuction_name": "SetExcludeTeamForTrigger",
        "return_type": "void",
        "called_by": "<trigger>",
        "mandatory_parameters": {
            "team name": "The name of the team that the trigger will not respond to. Must be either 'axis', 'allies', 'team3', 'team4', 'team5', 'team6' or 'none'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the team that this trigger will not react to. Reacts to all other teams.",
        "example": "self SetExcludeTeamForTrigger( game[\"attackers\"] )"
    },
    "1070": {
        "fuction_name": "SetExpFog",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "startDist": "The distance, in world units, at which the fog begins.",
            "halfwayDist": "The distance, beyond the startDist, at which the scene will be 50% fogged.",
            "red": "The red component of the fog as a value between 0.0 and 1.0",
            "green": "The red component of the fog as a value between 0.0 and 1.0",
            "blue": "The red component of the fog as a value between 0.0 and 1.0",
            "transition time": "transition time in seconds"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates an exponential fog.",
        "example": "SetExpFog(.0001144, 131/255, 116/255, 71/255, 0)"
    },
    "1071": {
        "fuction_name": "SetFakeFire",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Simulates gun fire.  Sound and radar blip.",
        "example": "entity SetFakeFire( <enabled> )"
    },
    "1072": {
        "fuction_name": "SetFlagAsAway",
        "return_type": "void",
        "called_by": "<flag>",
        "mandatory_parameters": {
            "localClientNum": "Local client number",
            "away": "A value of 1 sets the flag as away, 0 sets the flag as home"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets a flag as away/home.",
        "example": "flag SetFlagAsAway( localClientNum, 1 )"
    },
    "1073": {
        "fuction_name": "SetForceNoCull",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the force-no-cull flag. Entity will not be culled by portals",
        "example": "helicopter SetForceNoCull()"
    },
    "1074": {
        "fuction_name": "SetForceNotSimple",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the forceNotSimple flag on the entity",
        "example": "self SetForceNotSimple()"
    },
    "1075": {
        "fuction_name": "SetFOVForKillcam",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "fov": "The fov you want to use for the killcam"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the fov for use with this killcam entity.  Setting it to zero makes it use the default fov.",
        "example": "killCamEnt SetFOVForKillcam( 25 )"
    },
    "1076": {
        "fuction_name": "SetFriendlyNameDraw",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "onOff": "True if friendly name drawing is turned on"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "turns on or off local client friendly name drawing",
        "example": "SetFriendlyNameDraw( true )"
    },
    "1077": {
        "fuction_name": "SetFriendlyScramblerAmount",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "float": "Between 0.0 and 1.0"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the amount alpha of the friendly scrambler applied",
        "example": "player SetFriendlyScramblerAmount( 1.0 )"
    },
    "1078": {
        "fuction_name": "SetGameEndTime",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "time": "The time to set"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the time the current match will end",
        "example": "setGameEndTime( getTime() + int(timeLeft) )"
    },
    "1079": {
        "fuction_name": "SetGametypeSetting",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "setting": "The setting name as a string.",
            "value": "The new value for the setting."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the value of a gametype setting.",
        "example": "SetGametypeSetting( \"timeLimit\", 0 )"
    },
    "1080": {
        "fuction_name": "SetGlobalFutz",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "The Futz name"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the global futz",
        "example": "SetGlobalFutz( futz_name )"
    },
    "1081": {
        "fuction_name": "SetGrapplableType",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set how an entity is grappled.",
        "example": "platform SetGrapplableType( 1 )"
    },
    "1082": {
        "fuction_name": "SetGravity",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "gravity": "The gravity to set"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "sets the gravity in inches per second per second.",
        "example": "SetGravity( 800 )"
    },
    "1083": {
        "fuction_name": "SetGroupSnapshot",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "Name of the snapshot"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the group snapshot",
        "example": "SetGroupSnapshot( level._sndActiveSnapshot )"
    },
    "1084": {
        "fuction_name": "SetHealthSnapshot",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "The snapshot name",
            "amount": "The amount"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the health snapshot",
        "example": "SetHealthSnapshot( sn_name, sn_amount )"
    },
    "1085": {
        "fuction_name": "SetHideonClientWhenScriptedAnimCompleted",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "An entity"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "hides the entity on the client side onces its scripted animation ends",
        "example": "SetHideonClientWhenScriptedAnimCompleted( ent )"
    },
    "1086": {
        "fuction_name": "SetHideWhenScriptedAnimationCompleted",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "When playing a scene this will hide the entity when the scripted animation ends on it.",
        "example": "entity SetHideWhenScriptedAnimationCompleted()"
    },
    "1087": {
        "fuction_name": "SetHighDetail",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enabled or Disables High Detail rendering for a model",
        "example": "thing SetHighDetail( true )"
    },
    "1088": {
        "fuction_name": "SetHintLowPriority",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "bool": "True\\False if its on or off"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets this as a low priority hint which is lower priority then everything other then turrets and dropped weapons",
        "example": "m_e_hack_trigger SetHintLowPriority( true )"
    },
    "1089": {
        "fuction_name": "SetHintString",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "hint string": "The hint string that will be displayed to the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the hint string for the entity",
        "example": "t_door SetHintString( \"Press and Hold ^3[{+activate}]^7 to transmit unlock code\" )"
    },
    "1090": {
        "fuction_name": "SetHintStringForPerk",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "perk": "The perk that the player needs to have to see this hint string",
            "hint string": "The hint string that will be displayed to the player that has the perk"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Shows this hint string to the player if the player has the specified perk",
        "example": null
    },
    "1091": {
        "fuction_name": "SetHintStringForPlayer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "The player that will see the hint string",
            "hint string": "The hint string that will be displayed to the player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the trigger hint string for one specific player",
        "example": null
    },
    "1092": {
        "fuction_name": "SetIgnoreEntForTrigger",
        "return_type": "void",
        "called_by": "<trigger>",
        "mandatory_parameters": {
            "entity to ignore": "The entity that will be ignored during sight trace checks"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Ignores this entity when doing trigger sight traces. Currently only works for trigger_radius_use",
        "example": "self SetIgnoreEntForTrigger( camera_spike_ent )"
    },
    "1093": {
        "fuction_name": "SetIgnorePauseWorld",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "ignore": "Whether or not to advance normally when the world is paused."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether a given entity will advance normally when the world is paused.",
        "example": "ent SetIgnorePauseWorld( true )"
    },
    "1094": {
        "fuction_name": "SetIncludeMeshes",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a streamer hint entity to include mesh data",
        "example": "self setIncludeMeshes( true )"
    },
    "1095": {
        "fuction_name": "SetInfluenceAt",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "influenceMapIndex": "Index of the influence map",
            "origin": "The location to set the influence value",
            "influence": "The influence value to set"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the influence value on the influence map, returns true/false if the value was set.",
        "example": "SetInfluenceAt(influenceMapIndex, origin, influence)"
    },
    "1096": {
        "fuction_name": "SetInfluencerTeamMask",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "influencer id": "The influencer id",
            "team mask": "The team mask to apply"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the team mask for the given influencer",
        "example": "SetInfluencerTeamMask( influencer_id, team_mask )"
    },
    "1097": {
        "fuction_name": "SetInfluencerTimeout",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "influencer id": "The influencer id",
            "time": "The timeout for the influencer"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the timeout for the influencer in seconds from current time",
        "example": "SetInfluencerTimeout( influencer_id, 2.5 )"
    },
    "1098": {
        "fuction_name": "SetInfraredVision",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "is infrared vision": "Whether using infrared vision"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Switches using the infrared vision (infrared visionset and thermal characters)",
        "example": "player SetInfraredVision( true )"
    },
    "1099": {
        "fuction_name": "SetInfraredVisionSet",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "visionNameInfrared": "name of the vision set"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the vision when using infrared",
        "example": "entity SetInfraredVisionSet(\"visionName\")"
    },
    "1100": {
        "fuction_name": "SetInitialPlayersConnected",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set initialPlayersConnected bool in match state to true",
        "example": "SetInitialPlayersConnected()"
    },
    "1101": {
        "fuction_name": "setInTacticalHud",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "onOff": "false = off, true = on"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets if the player has the tactical hud open",
        "example": null
    },
    "1102": {
        "fuction_name": "SetInvisibleToAll",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set entity invisible to all players",
        "example": "use_trigger SetInvisibleToAll()"
    },
    "1103": {
        "fuction_name": "SetInvisibleToPlayer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "The player to set the entity invisible to."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Make the entity invisible to the player",
        "example": "hackable._trigger SetInvisibleToPlayer( player, false )"
    },
    "1104": {
        "fuction_name": "SetJumpHeight",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "height_in_inches": "The height to jump in inches"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the global jump height of all players.  Minimum value of 0, maximum value of 1023.",
        "example": "SetJumpHeight( 100 )"
    },
    "1105": {
        "fuction_name": "SetLevelFadeSnapshot",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "The snapshot name",
            "amount": "The level fade amount"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the level fade snapshot",
        "example": "SetLevelFadeSnapshot( sn_name, sn_amount )"
    },
    "1106": {
        "fuction_name": "SetLightColor",
        "return_type": "void",
        "called_by": "<light>",
        "mandatory_parameters": {
            "color": "An RGB vector with components in the range 0 to 1. The given values get rounded before they are stored. (vector3)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the current color of the light, as an RGB vector.",
        "example": "self SetLightColor( (0.5, 0.75, 1.0) )"
    },
    "1107": {
        "fuction_name": "SetLightExponent",
        "return_type": "void",
        "called_by": "<light>",
        "mandatory_parameters": {
            "exponent": "A new value for the exponent of the light. This should be an integer in the range of 0 to 100. (integer)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the current exponent of the light.",
        "example": "self SetLightExponent( 1 )"
    },
    "1108": {
        "fuction_name": "SetLightFovRange",
        "return_type": "void",
        "called_by": "<light>",
        "mandatory_parameters": {
            "fov_outer": "A new value for the outer FOV of the light, in degrees. This cannot be larger than the fov when the map was compiled, or less than 1. (float)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the current fov range of the light.",
        "example": "self SetLightFovRange( 200, 50 )"
    },
    "1109": {
        "fuction_name": "SetLightingOnly",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a streamer hint entity to only hint lighting data",
        "example": "self SetLightingOnly( true )"
    },
    "1110": {
        "fuction_name": "SetLightingState",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "new light state": "new state to change to. Lighting state defaults to 1 at start of game"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Changes lighting state for the map",
        "example": "SetLightingState( 2 )"
    },
    "1111": {
        "fuction_name": "SetLightIntensity",
        "return_type": "void",
        "called_by": "<light>",
        "mandatory_parameters": {
            "intensity": "A new value for the intensity of the light. 1 is fullbright, but values can be larger than 1. (float)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the current intensity of the light.",
        "example": "self SetLightIntensity( 1.5 )"
    },
    "1112": {
        "fuction_name": "SetLightRadius",
        "return_type": "void",
        "called_by": "<light>",
        "mandatory_parameters": {
            "radius": "A new value for the radius of the light. This cannot be larger than the radius when the map was compiled. (float)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the current radius of the light.",
        "example": "self SetLightRadius( 200 )"
    },
    "1113": {
        "fuction_name": "SetLocalRadarEnabled",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number to set local radar on",
            "enabled": "0 if disabled, 1 if enabled"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets whether a client's local radar is enabled.",
        "example": "SetLocalRadarEnabled( localClientNum, 1 )"
    },
    "1114": {
        "fuction_name": "SetLocalRadarPosition",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number to set local radar position on",
            "position": "New position of the local radar"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the position of a client's local radar.",
        "example": "SetLocalRadarPosition( localClientNum, self.origin )"
    },
    "1115": {
        "fuction_name": "SetLoopState",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "aliasname": "The sound alias to play",
            "attenuation": "The desired volume attenuation",
            "pitch": "The desired pitch"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "set pitch and volume per entity/alias",
        "example": "car SetLoopState( \"peugeot_idle_low\", 0.5, 1.0, 0.5, 0.2 )"
    },
    "1116": {
        "fuction_name": "SetMapCenter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "mapCenter": "The map center"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the center of the map (used by the network code to optimize position data)",
        "example": "SetMapCenter( level.mapCenter )"
    },
    "1117": {
        "fuction_name": "SetMapLatLong",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "mapX": "map X coordinate for which the longitude is given",
            "mapY": "map Y coordinate for which the longitude is given",
            "longitude": "world longitude of the given map position",
            "latitude": "world latitude of the given map position"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the map's real world latitude & longitude and their corresponding map coordinates.",
        "example": "SetMapLatLong( 1000, 500, -118.448689, 34.021566 )"
    },
    "1118": {
        "fuction_name": "SetMatchFlag",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "flag bit": "The flag bit to change",
            "value": "The new value of the bit"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Flags a bit in the match state",
        "example": "SetMatchFlag( \"bomb_timer\", \"1\" )"
    },
    "1119": {
        "fuction_name": "SetMatchTalkFlag",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "flag bit": "The flag bit to change",
            "value": "The new value of the bit"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Flags a bit in the match talk state",
        "example": "SetMatchTalkFlag( \"DeadChatWithDead\", \"1\" )"
    },
    "1120": {
        "fuction_name": "SetMaterialOverride",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "surfaceName": "The new material"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the material override",
        "example": "self SetMaterialOverride(\"water\")"
    },
    "1121": {
        "fuction_name": "SetmaxHealth",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "health": "The new max health"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the max health of this entity",
        "example": "self SetMaxHealth( required_amount )"
    },
    "1122": {
        "fuction_name": "SetMiniMap",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "material": "Sets the material",
            "upperLeftX": "Upper left X value",
            "upperLeftY": "Upper left Y value",
            "lowerRightX": "Lower right X value",
            "lowerRightY": "Lower right Y value"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the minimap bounds and material",
        "example": "setMiniMap(material, northwest[0], northwest[1], southeast[0], southeast[1])"
    },
    "1123": {
        "fuction_name": "SetMissileBrake",
        "return_type": "void",
        "called_by": "<missile>",
        "mandatory_parameters": {
            "flag": "True to enable or disable missile brake."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Tells a remote missile to disable brake",
        "example": "missile DisableMissileBrake( true )"
    },
    "1124": {
        "fuction_name": "SetMissileCoasting",
        "return_type": "void",
        "called_by": "<missile>",
        "mandatory_parameters": {
            "flag": "True to start coasting at reduced speed."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Tells a remote missile to start coasting at a reduced speed.",
        "example": "missile SetMissileCoasting( true )"
    },
    "1125": {
        "fuction_name": "SetMissileOwner",
        "return_type": "void",
        "called_by": "<missile>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the missile entity owner.",
        "example": "grenade SetMissileOwner( player )"
    },
    "1126": {
        "fuction_name": "SetMode",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {
            "mode": "The turret mode. Possible modes are \"auto_ai\", \"manual\", \"manual_ai\" and \"auto_nonai"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the mode of a turret.",
        "example": "turret SetMode( \"auto_ai\" )"
    },
    "1127": {
        "fuction_name": "SetModel",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "model alias": "Name of the model"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the model for the entity",
        "example": "raps_meteor SetModel( \"veh_t7_drone_raps\" )"
    },
    "1128": {
        "fuction_name": "SetMoveSpeedScale",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "speed scale multiplier": "The speed scale multiplier (float)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the speed scale multiplier for the entity",
        "example": "self SetMoveSpeedScale( HOLDING_CRATE_MOVEMENT_SPEED )"
    },
    "1129": {
        "fuction_name": "SetMovingPlatformEnabled",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enbles the moving platfrom.",
        "example": "platform SetMovingPlatformEnabled( true )"
    },
    "1130": {
        "fuction_name": "SetNearestEnemyScrambler",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "cent": "scrambler centity"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the nearest enemy scrambler",
        "example": "player AddEnemyScrambler( scrambler )"
    },
    "1131": {
        "fuction_name": "SetNemesisXUID",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "nemesisXuidString": "The Nemesis XUID string"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the Nemesis XUID",
        "example": "player setNemesisXuid( player.pers[\"nemesis_xuid\"] )"
    },
    "1132": {
        "fuction_name": "SetNodePriority",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "(node) A priority allowed node.",
            "enable": "(boolean) True if this node is enabled."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enable or disable the priority for this node.",
        "example": null
    },
    "1133": {
        "fuction_name": "SetNormalHealth",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "normal health": "Health in normalized form. Range 0 - 1"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set health of entity. Input health is normalized.",
        "example": "self SetNormalHealth( 0.8 )"
    },
    "1134": {
        "fuction_name": "SetNoSunShadow",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the no-sunshadow flag.",
        "example": "helicopter SetNoSunShadow()"
    },
    "1135": {
        "fuction_name": "SetObjectivePointStatus",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "objective_index": "The objective index in the matchstate",
            "team": "The team of the objective",
            "percent": "Percentage completed"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Objective status set in the match state",
        "example": "SetObjectivePointStatus( 1, \"allies\", 80 )"
    },
    "1136": {
        "fuction_name": "SetOnTargetAngle",
        "return_type": "void",
        "called_by": "<turret_or_vehicle>",
        "mandatory_parameters": {
            "angle": "In degrees (float)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the angle range at which the turret_on_target notify will occur.",
        "example": "boat SetOnTargetAngle( 0, 15 )"
    },
    "1137": {
        "fuction_name": "SetOwner",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the entity owner.",
        "example": "grenade SetOwner( player )"
    },
    "1138": {
        "fuction_name": "SetPauseWorld",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "pause": "Whether or not to pause the world"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "pauses playback of animations and effects, but doesn't affect the server tick the way slomo does",
        "example": "SetPauseWorld( 1 )"
    },
    "1139": {
        "fuction_name": "SetPerkForTrigger",
        "return_type": "void",
        "called_by": "<trigger>",
        "mandatory_parameters": {
            "perk name": "The name of the perk that the trigger will respond to."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the perk that the player must have for this trigger will react to",
        "example": "self SetPerkForTrigger( \"specialty_fastinteract\" )"
    },
    "1140": {
        "fuction_name": "SetPlayerCollision",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "on_off": "True for on and false for off"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Use to turn on off the collision with the player.",
        "example": "self SetPlayerCollision( true )"
    },
    "1141": {
        "fuction_name": "SetPlayerCurrentObjective",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "objective_index": "The objective index in the matchstate",
            "objective_type": "Type of the objective"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the current objective information on the player",
        "example": "SetPlayerCurrentObjective( \"flag_a\", 1 )"
    },
    "1142": {
        "fuction_name": "SetPlayerCurrentStreak",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "current streak": "The current kill streak count"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the current kill streak count on the player",
        "example": "SetPlayerCurrentStreak( 3 )"
    },
    "1143": {
        "fuction_name": "SetPlayerGravity",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "gravity": "The gravity to set"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the gravity override value for the player.",
        "example": "player SetPlayerGravity( 600 )"
    },
    "1144": {
        "fuction_name": "SetPlayerIgnoreRadiusDamage",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "flag": "true to ignore radius damage, false otherwise"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the player to take or ignore radius damage",
        "example": "SetPlayerIgnoreRadiusDamage( true )"
    },
    "1145": {
        "fuction_name": "SetPlayerSpread",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {
            "spread": "The spread of the turret in degrees"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the spread of this turret when used by the player",
        "example": "roof_turret SetPlayerSpread( 0.2 )"
    },
    "1146": {
        "fuction_name": "SetPlayerStateLoadoutBonusCards",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "custom Class": "Class Num"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the player state to have bonus card info, for codcaster to view it",
        "example": "self SetPlayerStateLoadoutBonusCards( class_num )"
    },
    "1147": {
        "fuction_name": "SetPlayerStateLoadoutWeapons",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "custom Class": "Class Num"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the player state to have primary and secondary weapon info, for codcaster to view it",
        "example": "self SetPlayerStateLoadoutWeapons( class_num )"
    },
    "1148": {
        "fuction_name": "SetRenderInThirdPersonSpectate",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "enable": "Enable or disable redering the entity in 3rd person"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "render the entity when spectated in 3rd person.",
        "example": "SetRenderInThirdPersonSpectate( true )"
    },
    "1149": {
        "fuction_name": "SetReviveHintString",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "hint string": "The hint string that will be displayed to the player that has the perk"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the revive hint string to show to all or to a team.",
        "example": "self.revivetrigger setReviveHintString( &\"GAME_BUTTON_TO_REVIVE_PLAYER\", self.team )"
    },
    "1150": {
        "fuction_name": "SetRoundsPlayed",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "value": "The number of rounds played"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set rounds played in match state",
        "example": "SetRoundsPlayed( game[\"roundsplayed\"] )"
    },
    "1151": {
        "fuction_name": "SetSAnim",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "string anim name": "name of a SANIM asset"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the anim shot to play on a static model",
        "example": "thing SetSAnim( anim, shot, 1 )"
    },
    "1152": {
        "fuction_name": "SetScale",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "scale": "The scale factor. (float)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the model scale on a script mover.",
        "example": "entity SetScale(2.0)"
    },
    "1153": {
        "fuction_name": "SetScanningPitch",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {
            "pitch": "of the turret (up and down) in degrees."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the pitch that the turret attempts to use while scanning for enemies.",
        "example": "turret SetScanningPitch( -45 )"
    },
    "1154": {
        "fuction_name": "SetScoreboardColumns",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "column1": "to <column5>"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the scoreboard columns.",
        "example": "SetScoreboardColumns( \"score\", \"kills\", \"deaths\", \"kdratio\", \"assists\" )"
    },
    "1155": {
        "fuction_name": "SetScriptMoverFlag",
        "return_type": "void",
        "called_by": "<non_player_entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets flag 0-7 on the script mover ent.",
        "example": "some_script_model SetScriptMoverFlag( 1 )"
    },
    "1156": {
        "fuction_name": "SetScriptStreamBias",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "bias": "Streaming bias (0 is the highest importance)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the base importance of materials being forced from script",
        "example": "setScriptStreamBias( 1.0 )"
    },
    "1157": {
        "fuction_name": "SetSessStat",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "stat path": "The path to the stat to set the value for."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the indicated stat",
        "example": "self SetSessStat( \"byteStat\", 0, 12 )"
    },
    "1158": {
        "fuction_name": "setshaderconstant",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client for which to set the shader constant",
            "index": "An 0-based index that refers to a previously-mapped shader constant(see MapShaderConstant)",
            "x": "A float value, x component of the shader constant",
            "y": "A float value, y component of the shader constant",
            "z": "A float value, z component of the shader constant",
            "w": "A float value, w component of the shader constant"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the value of a previously-mapped shader constant",
        "example": "ent setshaderconstant( 0, \"shaderColor\" , 0, 0, 0, 0)"
    },
    "1159": {
        "fuction_name": "SetSharedViewPort",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "mode": "true if shared viewport, false for independent (default splitscreen behavior)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the view mode to either shared or independent, shared combines all views into a single shared viewport, modifies the way input is handled, and places the camera into scripted camera mode (i.e. control it with script).",
        "example": "SetSharedViewPort(true)"
    },
    "1160": {
        "fuction_name": "SetShowcaseWeaponPaintshopXUID",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the showcase weapon paintshop XUID for the given local client num",
        "example": "SetShowcaseWeaponPaintshopXUID( localClientNum, xuid )"
    },
    "1161": {
        "fuction_name": "SetSkipTos",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "skipto": "The skipto name"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set skip tos",
        "example": "SetSkiptos( ToLower( skipto ) )"
    },
    "1162": {
        "fuction_name": "SetSlowMotion",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "startTimescale": "The initial timescale."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "sets the current slow motion timescale interpolation.",
        "example": "SetSlowMotion( 1.0, 0.25, 0.5 )"
    },
    "1163": {
        "fuction_name": "SetSModelSAnimShot",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "target name": "target name of the static model or <int index> The index of the static model or <array int indices> The indices of the static models (string)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the anim shot to play on a static model",
        "example": "SetSModelSAnimShot(\"tiny_bot_blend\", \"\", -1, true, false, true, 5*30)"
    },
    "1164": {
        "fuction_name": "SetSonarAttachmentEnabled",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "enable": "true/false"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the sonar attachment to be enabled or disabled",
        "example": "entity SetSonarAttachmentEnabled(false)"
    },
    "1165": {
        "fuction_name": "SetSoundContext",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "type": "The type of context",
            "value": "The value for that type"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the sound context",
        "example": "SetSoundContext (\"ringoff_plr\", \"outdoor\"); //for weapon decay's"
    },
    "1166": {
        "fuction_name": "SetSoundEntContext",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "type": "Sound Context type",
            "value": "Sound Context value"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the entity sound context",
        "example": "car SetSoundEntContext(\"type\", \"value\")"
    },
    "1167": {
        "fuction_name": "SetSoundPitch",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "playbackId": "The sound id",
            "pitch": "The new pitch"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the sound pitch",
        "example": null
    },
    "1168": {
        "fuction_name": "SetSoundPitchRate",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "playbackId": "The sound id",
            "pitchRate": "The new pitch rate"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the sound pitch rate",
        "example": null
    },
    "1169": {
        "fuction_name": "SetSoundVolume",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "playbackId": "The sound id",
            "attenuation": "The attenuation of the sound"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the sound volume",
        "example": null
    },
    "1170": {
        "fuction_name": "SetSoundVolumeRate",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "playbackId": "The sound id",
            "attenuationRate": "The new volume rate"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the sound volume rate",
        "example": null
    },
    "1171": {
        "fuction_name": "SetSpawnClientFlag",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "flag": "Flag to set"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a flag on a client's spawn client data in the spawning system.",
        "example": "player SetSpawnClientFlag( \"SCDFL_DISABLE_LOGGING\" )"
    },
    "1172": {
        "fuction_name": "SetSpawnPointRandomVariation",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "variation": "random range will be [0, variation]"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Random value will be added into the spawn point weighting calculation.",
        "example": "SetSpawnPointRandomVariation( 10 )"
    },
    "1173": {
        "fuction_name": "SetSpawnPointsBaseWeight",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "team mask": "teams that this command will affect",
            "objective position": "Position of the objective that will be used in the facing calculations",
            "angle": "max angle that will be accepted",
            "score": "additional score that will be applied"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "If the spawn point is facing the objective position then it will have an additional score applied",
        "example": "SetSpawnPointsBaseWeight( team_mask, point, 30, 100 )"
    },
    "1174": {
        "fuction_name": "SetStableMissile",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "flag": "Set to true if the stable flag should be set. False otherwise"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the stable missile flag of the entity",
        "example": "self SetStableMissile( true )"
    },
    "1175": {
        "fuction_name": "SetStance",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "stance": "The stance.  Possible values are 'crouch', 'prone' and 'stand'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the stance of the player. It only works for the player.",
        "example": "player SetStance( \"stand\" );\\"
    },
    "1176": {
        "fuction_name": "SetStepTriggerSound",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "sound alias": "The sound name"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the sound that is triggered by steps",
        "example": "trigPlayer SetStepTriggerSound(self.script_label + suffix)"
    },
    "1177": {
        "fuction_name": "SetStowedWeapon",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "weaponName": "The weapon name to attach (string)."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the stowed weapon for the player",
        "example": "self SetStowedWeapon( \"mp40_mp\" )"
    },
    "1178": {
        "fuction_name": "SetStreamerRequest",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "slot": "Request slot",
            "name": "Name of the streamer hint asset"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Put a streamer hint asset into a request slot (0-7)",
        "example": "setStreamerRequest(0, \"apple_pie\")"
    },
    "1179": {
        "fuction_name": "SetStunned",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "stunned": "True/false stun state"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Puts the vehicle or takes the vehicle out of stun mode.  Only works for nitrous vehicles.",
        "example": "vehicle SetStunned( 0, true )"
    },
    "1180": {
        "fuction_name": "SetTargetEntity",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {
            "target": "the turret target"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the target of this turret",
        "example": "roof_turret SetTargetEntity( target )"
    },
    "1181": {
        "fuction_name": "SetTargetOrigin",
        "return_type": "void",
        "called_by": "<turret_or_vehicle>",
        "mandatory_parameters": {
            "origin": "the turret target origin"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the target origin of this turret or vehicle weapon",
        "example": "roof_turret SetTargetOrigin( origin )"
    },
    "1182": {
        "fuction_name": "SetTeam",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the entity team.",
        "example": "panzer SetTeam( team )"
    },
    "1183": {
        "fuction_name": "SetTeamForTrigger",
        "return_type": "void",
        "called_by": "<trigger>",
        "mandatory_parameters": {
            "team name": "The name of the team that the trigger will respond to. Must be either 'axis', 'allies', 'team3' or 'none'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the team that this trigger will react to",
        "example": "self SetTeamForTrigger( game[\"attackers\"] )"
    },
    "1184": {
        "fuction_name": "SetTeamReviveIcon",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "team": "",
            "material": "The icon to use"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the revive icon used by particular teams",
        "example": "SetTeamReviveIcon( \"allies\", \"waypoint_revive_cdc_zm\" )"
    },
    "1185": {
        "fuction_name": "SetTeamSatellite",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "team": "The name of a team. Must be either Must be 'axis', 'allies', 'team3' or 'none'.",
            "availability": "Whether the team has Satellite; defaults to false"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether a team has Spyplane or not",
        "example": "SetTeamSatellite( \"allies\", true )"
    },
    "1186": {
        "fuction_name": "SetTeamScore",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "team": "The name of a team. Must be either 'axis' or 'allies' or 'team3'.",
            "score": "The new team score"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a team's score",
        "example": "SetTeamScore( \"allies\", 100 )"
    },
    "1187": {
        "fuction_name": "SetTeamSpyplane",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "team": "The name of a team. Must be either Must be 'axis', 'allies', 'team3' or 'none'.",
            "availability": "Whether the team has Spyplane; defaults to false"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether a team has Spyplane or not",
        "example": "SetTeamSpyplane( \"allies\", true )"
    },
    "1188": {
        "fuction_name": "SetThirdPerson",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "onOff": "set third person mode to this value"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the camera mode to third person if true",
        "example": "SetThirdPerson( true )"
    },
    "1189": {
        "fuction_name": "SetTmodeProvider",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "value": "(int) 1-enable 0-disable"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enables (or disables) the actor to provide tmode traces to the player.",
        "example": "entity SetTmodeProvider( 1 )"
    },
    "1190": {
        "fuction_name": "SetTopDownCameraYaw",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "yaw_angle": "The yaw angle to set"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the top down camera yaw that is used in DOA to get the player controls to work correctly in bgpmove.",
        "example": "SetTopDownCameraYaw( 180 )"
    },
    "1191": {
        "fuction_name": "SetTopScorer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "index": "position [0..2] of the player",
            "player": "player who is the top scorer",
            "taunt": "players selected taunt index",
            "gesture0": "players selected gesture type 0 index",
            "gesture1": "players selected gesture type 1 index",
            "gesture2": "players selected gesture type 2 index",
            "weapon": "players weapon"
        },
        "optional_parameters": {
            "weapon render options": "players weapon renderoptions",
            "acvi": "players attachment cosmetic variant indexes"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the top scorer for the end game screen.",
        "example": "SetTopScorer( 0, player, weapon, renderoptions, acvi)"
    },
    "1192": {
        "fuction_name": "SetTurretAccuracy",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Currently does nothing.",
        "example": "roof_turret SetTargetAccuracy()"
    },
    "1193": {
        "fuction_name": "SetTurretCarried",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {
            "flag": "True if the turret is being carried"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether a turret is being carried.",
        "example": "turret SetTurretCarried( true )"
    },
    "1194": {
        "fuction_name": "SetTurretMinimapVisible",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "flag": "True if the turret is visible on the minimap"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether a turret is visible on the minimap.",
        "example": "sentry SetTurretMinimapVisible( true )"
    },
    "1195": {
        "fuction_name": "SetTurretNode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "The turret node to connect to the turret",
            "turret": "The turret to connect to the node"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set this turretnode to use this turret.",
        "example": "SetTurretNode( node, turret )"
    },
    "1196": {
        "fuction_name": "SetTurretOwner",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the turret entity owner.",
        "example": "turret SetTurretOwner( player )"
    },
    "1197": {
        "fuction_name": "SetTurretSpinning",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {
            "onoff": "Turn it on or off (boolean)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the minigun spin for the turret on this entity. Works for vehicles also.",
        "example": "roof_turret SetTurretSpinning( true )"
    },
    "1198": {
        "fuction_name": "SetTurretType",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the turret Type, Sentry or TOW.",
        "example": "turret SetTurretType( \"sentry\" )"
    },
    "1199": {
        "fuction_name": "SetUnderwaterVisionSet",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "visionNameUnderwater": "name of the vision set"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the vision when underwater",
        "example": "entity SetUnderwaterVisionSet(\"visionName\")"
    },
    "1200": {
        "fuction_name": "SetupClientFieldAnimSpeedCallbacks",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Registers a code callback for each of the given clientfield names in a field pool.",
        "example": "SetupClientFieldAnimSpeedCallbacks( \"world\", 1, \"flag_a_owner\" )"
    },
    "1201": {
        "fuction_name": "setupclientfieldcodecallbacks",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Registers a LUI code callback for each of the given clientfield names in a field pool.",
        "example": "SetupClientFieldLuiCodeCallbacks( \"world\", 1, \"flag_a_owner\" )"
    },
    "1202": {
        "fuction_name": "SetupClientFieldLuiCodeCallbacks",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Registers a LUI code callback for each of the given clientfield names in a field pool.",
        "example": "SetupClientFieldLuiCodeCallbacks( \"world\", 1, \"flag_a_owner\" )"
    },
    "1203": {
        "fuction_name": "SetupFieldOpsKitLoadouts",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "mapname": "The map to load the field ops kits for"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Sets up all the field ops custom classes (using slots 6 through 9)",
        "example": "SetupFieldOpsKitLoadouts( mapname )"
    },
    "1204": {
        "fuction_name": "SetViewAngleResistance",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "right arc": "Angle to resist against the right plane of the view cone.",
            "left arc": "Angle to resist against the left plane of the view cone.",
            "top arc": "Angle to resist against the top plane of the view cone.",
            "bottom arc": "Angle to resist against the bottom plane of the view cone."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the zones in the player's view cone in which resistance will be applied in the direction of the view limit",
        "example": "level.player SetViewAngleResistance( 40, 40, 20, 0, 0 )"
    },
    "1205": {
        "fuction_name": "SetViewModelDepthOfField",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "start": "Start DOF ( >= 0 )",
            "end": "End DOF ( >= 0 )"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the view model depth of field of the player",
        "example": "self SetViewModelDepthOfField(0,1000)"
    },
    "1206": {
        "fuction_name": "SetVisibleToAll",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Make the entity visible to all players",
        "example": "trigger SetVisibleToAll()"
    },
    "1207": {
        "fuction_name": "SetVisibleToAllExceptTeam",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "team": "Which to teams not to show this entity too"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set self visible to all teams except the selected teams",
        "example": "plane SetVisibleToAllExceptTeam( self.team )"
    },
    "1208": {
        "fuction_name": "SetVisibleToPlayer",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "player": "The player to set the entity visible to."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Make the entity visible to the player",
        "example": "trigger SetVisibleToPlayer( self )"
    },
    "1209": {
        "fuction_name": "SetVisibleToTeam",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "team": "Which to show this entity to"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set self visible only to selected team",
        "example": "plane SetVisibleToSquad( self.team )"
    },
    "1210": {
        "fuction_name": "SetVisionSetForPlayer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "visionset name": "Vision set to transition into (string)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Specify the server override visionset and the transition time into it.",
        "example": "player SetVisionSetForPlayer( \"mortar_thermal\", 1.5 )"
    },
    "1211": {
        "fuction_name": "SetVolFog",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "startDist": "The distance, in world units, at which the fog begins.",
            "halfwayDist": "The distance at which the scene will be 50% fogged.",
            "halfwayHeight": "The height at which the scene will be 50% fogged.",
            "baseHeight": "The ground-level Z position at which the fog will start from.",
            "red": "The red component of the fog as a value between 0.0 and 1.0",
            "green": "The green component of the fog as a value between 0.0 and 1.0",
            "blue": "The blue component of the fog as a value between 0.0 and 1.0",
            "transition time": "transition time in seconds",
            "fogColorScale": "The scaler for the colors as a value between 1 and 10000.0",
            "sunFogRed": "The red component of the fog as a value between 0.0 and 1.0",
            "sunFogGreen": "The green component of the fog as a value between 0.0 and 1.0",
            "sunFogBlue": "The blue component of the fog as a value between 0.0 and 1.0",
            "sunFogDirX": "The X component of the fog direction as a value between -1.0 and 1.0",
            "sunFogDirY": "The Y component of the fog direction as a value between -1.0 and 1.0",
            "sunFogDirZ": "The Z component of the fog direction as a value between -1.0 and 1.0",
            "sunFogStartAng": "The starting angle of the sun fog as a value between 0 and 180",
            "sunFogEndAng": "The ending angle of the sun fog as a value between 0 and 180",
            "fog max opacity": "The maximum opacity of the fog as a value between 0 and 1"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates an exponential fog.",
        "example": "SetVolFog(0.0001144, 0.01, 131/255, 116/255, 71/255, 0)"
    },
    "1212": {
        "fuction_name": "SetVoteNoCount",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "no count": "Number of 'no' votes"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the number of No votes",
        "example": null
    },
    "1213": {
        "fuction_name": "SetVoteString",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": "The vote string"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the string for a vote",
        "example": null
    },
    "1214": {
        "fuction_name": "SetVoteTime",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "time": "The vote time in ms"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the start time for a vote",
        "example": null
    },
    "1215": {
        "fuction_name": "SetVoteYesCount",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "no count": "Number of 'yes' votes"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the number of Yes votes",
        "example": null
    },
    "1216": {
        "fuction_name": "SetWaterDisturbanceParams",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "force": "The force of the disturbance influences the height and size of the wave",
            "length": "How long the wave is in the direction of travel",
            "width": "How wide the wave is (across direction of travel)",
            "damping": "How much the wave damps the water after it travels; larger values (>1) will cause the wave to leave very little wake, smaller values will leave lots of disturbance behind the wave.  Keep > 0.",
            "angle": "The angle of the surge line in degrees; 0 -> +X"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets parameters describing the water disturbance created by the (script mover) entity",
        "example": "self SetWaterDisturbanceParams( 0.5, 500, 1500, 0.2, 70 )"
    },
    "1217": {
        "fuction_name": "SetWaterDrops",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "count": "Number of water drops (should be >= 0)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets water drops equal to the count",
        "example": "self SetWaterDrops( 3 )"
    },
    "1218": {
        "fuction_name": "SetWaveWaterEnabled",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "water name": "The name of the water affected, or empty string for all",
            "enable": "whether water should be visible"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Makes a water completely appear or disappear",
        "example": "SetWaveWaterEnabled( \"huge_lake\", true )"
    },
    "1219": {
        "fuction_name": "SetWaveWaterGeneratorAmplitude",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "generator name": "The generator name",
            "amplitude": "The amplitude for the generator"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the wave water amplitude of the generator.",
        "example": "SetWaveWaterGeneratorAmplitude( \"exampleGenerator\", 1.1 )"
    },
    "1220": {
        "fuction_name": "SetWaveWaterHeight",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "water name": "The name of the water affected, or empty string for all",
            "height": "The new height value in world coordinates"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the height of one or all waters in a level",
        "example": "SetWaveWaterHeight( \"huge_lake\", 15.0 )"
    },
    "1221": {
        "fuction_name": "SetWeapon",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "weapon": "The weapon to set"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the weapon of the entity. The entity should not be a player",
        "example": "killcamEnt SetWeapon( self.weapon )"
    },
    "1222": {
        "fuction_name": "SetWeaponCosts",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "local client num": "The local client num",
            "weapon": "The weapon to add",
            "weaponCost": "Cost to buy the weapon",
            "ammoCost": "Cost to buy ammo",
            "playerAmmoCost": "Cost to buy ammo through secret shopper"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the cost of a weapon for use by prompts",
        "example": "SetWeaponCosts( weapon, weapon.cost, weapon.ammoCost, weapon.secretshopperCost )"
    },
    "1223": {
        "fuction_name": "SetWeaponOptions",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "weaponOptions": "The weapon options to set"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the previously calculated weapon options of the entity. The entity should not be a player",
        "example": "killcamEnt SetWeaponOptions( weapon_options )"
    },
    "1224": {
        "fuction_name": "SetWeaponRenderOptions",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "camo index": "",
            "reticle index": "",
            "show player tag": "",
            "show emblem": ""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the weapon render options in the entity.",
        "example": "level.weapon_clientscript_model SetWeaponRenderOptions( level.camo_index, level.reticle_index, level.show_player_tag, level.show_emblem, level.show_paintshop )"
    },
    "1225": {
        "fuction_name": "SetWinningPlayer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "The player to set as the winning player"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a player to be the winner",
        "example": null
    },
    "1226": {
        "fuction_name": "SetWinningTeam",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "team": "The team name of the winning team. Must be 'axis', 'allies' or 'none'"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a team to be the winner",
        "example": null
    },
    "1227": {
        "fuction_name": "SetWorldFogActiveBank",
        "return_type": "void",
        "called_by": "<client>",
        "mandatory_parameters": {
            "bankMask": "Active bank"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets world fog volumes active bank mask.",
        "example": "self setworldfogactivebank(1)"
    },
    "1228": {
        "fuction_name": "SetZBarrierColModel",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "model": "The model."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the collision model for a zbarrier.",
        "example": "ent SetZBarrierColModel(\"p6_anim_zm_barricade_board_collision\")"
    },
    "1229": {
        "fuction_name": "SetZBarrierPieceState",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "piece number": "The piece index.",
            "state": "State to set - valid states are open, opening, closed and closing."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set's the state of the piece indexed in the zbarrier ent. States are open, opening, closed and closing.",
        "example": "ent SetZBarrierPieceState(1, \"open\", 0.8)"
    },
    "1230": {
        "fuction_name": "SetZombieName",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set this actors name",
        "example": "guy SetZombieName( \"zombie11\" )"
    },
    "1231": {
        "fuction_name": "ShellShock",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "shellshockname": "",
            "duration": "duration in seconds. The duration must be between 0 and 60 seconds."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Start a shell shock sequence for the entity for given duration.",
        "example": "self shellShock( \"frag_grenade_mp\", 0.2 )"
    },
    "1232": {
        "fuction_name": "ShootTurret",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Shoots a turret",
        "example": "roof_turret ShootTurret()"
    },
    "1233": {
        "fuction_name": "ShootUp",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "float": "upwards velocity"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gives an entity vertical movement",
        "example": "betty ShootUp( 350 )"
    },
    "1234": {
        "fuction_name": "ShouldDoInitialWeaponRaise",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to set the first raise anim state for",
            "bool shouldDoRaise": "Whether the weapon should do the initial raise"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set weaponstate to force or prevent first raise animation the next time the player switches to it. Only works if the player currently has it",
        "example": "old_state = self ShouldDoInitialWeaponRaise( \"ak47\", false )"
    },
    "1235": {
        "fuction_name": "Show",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Show the entity",
        "example": "self Show()"
    },
    "1236": {
        "fuction_name": "ShowAllParts",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Show all parts of an entity.",
        "example": "self ShowAllParts()"
    },
    "1237": {
        "fuction_name": "ShowInfoVolume",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entnum": "The entity number of the info volume"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enables an info volume to be drawn with the specified color",
        "example": "InfoVolumeDebug_ShowVolume( info_volume GetEntityNumber(), ( 0.2, 0.2, 0.5 ), 0.5 )"
    },
    "1238": {
        "fuction_name": "ShowMiscModels",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "targetname": "targetname of misc model(s)."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Show all misc models with this targetname",
        "example": "ShowMiscModels( \"crash_destruct\" )"
    },
    "1239": {
        "fuction_name": "ShowPart",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "tagname": "The tag to show. All surfaces with a vertex weighted to the tag will be shown. (string)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Show part of an entity.",
        "example": "self ShowPart( \"tag_weapon\", \"weapon_saw\" )"
    },
    "1240": {
        "fuction_name": "ShowToPlayer",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "player": "The player to show the entity to."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Show the entity to a given client",
        "example": null
    },
    "1241": {
        "fuction_name": "ShowToTeam",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "team": "The team to show the entity to."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Show the entity to a particular team",
        "example": "self ShowToTeam( team )"
    },
    "1242": {
        "fuction_name": "ShowZBarrierPiece",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "piece number": "The piece index."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Allows the indexed piece to be drawn.",
        "example": "ent ShowZBarrierPiece(1)"
    },
    "1243": {
        "fuction_name": "SiegeCmd",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "string cmd": "cmd to execute."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Apply a number of anim commands on a siege model",
        "example": "thing SiegeCmd( \"set_shot\", \"myshot\", \"unpause"
    },
    "1244": {
        "fuction_name": "SightConeTrace",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "sight position": "The point the sight starts at"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Determines how much the entity can be seen from the given position, using the same check that is used by grenades. Performs multiple sight traces and returns an approximation to how much of the entity is visible from the given point (between 0 and 1). In SinglePlayer this will always be 1 if the entity is partially visible.",
        "example": "tankVisibilityFraction = tank SightConeTrace( player.origin, player, player.angles, 65)"
    },
    "1245": {
        "fuction_name": "SightTracePassed",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start": "The bullet start point",
            "end": "The bullet end point",
            "hit characters": "An entity to ignore",
            "ignore entity": "An entity to ignore"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Does a sight trace from start to end. Returns true if doesnt hit anything",
        "example": "passed = SightTracePassed( player.origin + ( 0, 0, 64 ), self.origin + ( 0, 0, 64 ), false, undefined )"
    },
    "1246": {
        "fuction_name": "SModelAnimCmd",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "target": "target name of the static model or <int index> The index of the static model or <array int indices> The indices of the static models (string)",
            "cmd": "cmd to execute. (string)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Apply a number of anim commands on a siege model",
        "example": "SModelAnimCmd(\"targetName\",\"pause\")"
    },
    "1247": {
        "fuction_name": "SnapshotAcknowledged",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "array": "The array returned by GetSnapshotIndexArray."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns 1 if all clients have acknowledged the snapshot or the timeout has expired. Otherwise returns undefined.",
        "example": "acked = SnapshotAcknowledged( snapindices )"
    },
    "1248": {
        "fuction_name": "Solid",
        "return_type": "void",
        "called_by": "<ent>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the solid flag, so that this object is collidable.",
        "example": "self Solid()"
    },
    "1249": {
        "fuction_name": "SoundExists",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "soundName": "The sound alias"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the given sound exists",
        "example": "if( SoundExists( soundAlias )) { //do something }"
    },
    "1250": {
        "fuction_name": "SoundGetAlias",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "soundId": "the hashed sound id of the alias"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "The the string alias of a sound from the hashed sound id. Will return undefined if no sound is found",
        "example": "soundAlias =  SoundGetAlias( soundId )"
    },
    "1251": {
        "fuction_name": "SoundGetPlaybackTime",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "soundName": "The sound alias"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the playback time for the sound",
        "example": "playbackTime = SoundGetPlaybackTime( \"evt_infection_record_oneshot\" )"
    },
    "1252": {
        "fuction_name": "SoundLineEmitter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "alias": "The sound alias name",
            "origin 1": "start point",
            "origin 2": "end point"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Play a sound from start point to end point",
        "example": "SoundLineEmitter( \"wpn_micro_turret_loop\", start, end )"
    },
    "1253": {
        "fuction_name": "SoundLoopEmitter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "alias": "The sound alias name",
            "position": "The position to play sound at"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Play a sound loop at the position",
        "example": "SoundLoopEmitter(\"evt_beacon_loop_red\", self.origin)"
    },
    "1254": {
        "fuction_name": "SoundPlayAutoFX",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "fxid": "The ID of the FX you want to play alias off.",
            "alias": "Audio alias."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "This function is used to play audio on createfx ents.",
        "example": "SoundPlayAutoFX( \"fx_fire_barrel\", \"amb_fire_small\", 5, -10, 5, false, 20, 5, \"amb_fire_large\" )"
    },
    "1255": {
        "fuction_name": "SoundPlaying",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "playbackId": "The sound  id"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if the sound given by sound id is playing",
        "example": "while( soundplaying( soundId ) )"
    },
    "1256": {
        "fuction_name": "SoundRattle",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "The position",
            "minDist": "The min distance to play sound"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the rattle sound's origin, min distance and max distance",
        "example": "soundrattle(origin,min,max)"
    },
    "1257": {
        "fuction_name": "SoundRattleSetup",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "alias": "The sound alias name",
            "position": "The position to play sound at"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Play a rattle sound at the position",
        "example": "SoundRattleSetup(rattles[i].script_sound, rattles[i].origin)"
    },
    "1258": {
        "fuction_name": "SoundSetMusicState",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "state id": "The state identifier"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the music state for the sound",
        "example": "SoundSetMusicState( state_id )"
    },
    "1259": {
        "fuction_name": "SoundStopLineEmitter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "alias": "The sound alias name",
            "origin 1": "start point",
            "origin 2": "end point"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Stops the sound playing from start point to end point",
        "example": "SoundStopLineEmitter( \"wpn_micro_turret_loop\", start, end )"
    },
    "1260": {
        "fuction_name": "SoundStopLoopEmitter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "alias": "The sound alias name",
            "position": "The position"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Stop the sound loop emitter at the position",
        "example": "SoundStopLoopEmitter(\"evt_beacon_loop_green\", self.origin)"
    },
    "1261": {
        "fuction_name": "SoundTimeScale",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "time": "The new time scale"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the sound time scale",
        "example": "SoundTimeScale( 1.1 )"
    },
    "1262": {
        "fuction_name": "SoundUpdateLineEmitter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "alias": "The sound alias name",
            "previous origin 1": "start point",
            "previous origin 2": "end point",
            "origin 1": "start point",
            "origin 2": "end point"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Updates the sound playing from previous start point to previous end point",
        "example": "SoundUpdateLineEmitter( \"wpn_micro_turret_loop\", previousStart, previousEnd, start, end )"
    },
    "1263": {
        "fuction_name": "Spawn",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "classname": "The classname of the entity to spawn",
            "origin": "The position to spawn at"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Spawn an entity.",
        "example": "Spawn( \"trigger_radius\", trigger_origin )"
    },
    "1264": {
        "fuction_name": "SpawnActor",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "AIType": "AI type (constant string)",
            "origin": "The position of the vehicle (vector)",
            "angles": "The angle to spawn the vehicle at (vector)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Spawns an actor from an actor spawner, if possible (the spawner won't spawn if the player is looking at the spawn point, or if spawning would cause a telefrag)",
        "example": "spawned = SpawnActor( \"spawner_bo3_soldier_ally_sniper_tool\", origin, angles, \"george\", false )"
    },
    "1265": {
        "fuction_name": "SpawnCollision",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "modelname": "The name of the model to spawn (constant string)",
            "targetname": "target name (constant string)",
            "origin": "The position of the collision (vector)",
            "angles": "The angle to spawn the collision at (vector)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Spawns a script mover thats used only for collision",
        "example": null
    },
    "1266": {
        "fuction_name": "spawndynent",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "model": "The model of the dynent",
            "origin": "The position",
            "angles": "The angles"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Spawn a dynent",
        "example": "twig = spawndynent( \"trashcan\", origin, angles )"
    },
    "1267": {
        "fuction_name": "SpawnFromSpawner",
        "return_type": "entity",
        "called_by": "<actor_or_vehicle_spawner>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Spawns an actor or vehicle from a spawner, if possible (the spawner won't spawn if the player is looking at the spawn point, or if spawning would cause a telefrag) Unsupplied optional fields will use flag values from the entity",
        "example": "spawned = spawnerent SpawnFromSpawner( \"george\", false )"
    },
    "1268": {
        "fuction_name": "SpawnFX",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "fx name": "Name of the fx. Fx has to be cached",
            "position": "Position to play the fx at"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Spawn an FX",
        "example": "fx = SpawnFx( level._effect[player.light_playFX], monkey.origin + (0,0,-12),(1,0,0),(0,0,1) )"
    },
    "1269": {
        "fuction_name": "SpawnHelicopter",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "owner": "the owner entity",
            "origin": "the location",
            "angles": "the angles",
            "vehicle name": "the vehicle name",
            "model name": "the model name"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Spawns a helicopter",
        "example": "heliGuard = spawnHelicopter( self, startPos, startAng, \"heli_guard_mp\" , \"veh_t6_drone_overwatch_light\" )"
    },
    "1270": {
        "fuction_name": "SpawnNapalmGroundFlame",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "origin": "The origin of the flame",
            "weapon": "The weapon",
            "direction": "The direction of the flame"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Spawn a napalm ground flame at the origin with the direction.",
        "example": "self SpawnNapalmGroundFlame( bot_pos , weapon, forward)"
    },
    "1271": {
        "fuction_name": "SpawnPathNode",
        "return_type": "pathnode",
        "called_by": null,
        "mandatory_parameters": {
            "classname": "The class name",
            "origin": "The origin",
            "angles": "The view angles"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Spawn a dynamically created path node or cover node",
        "example": "node = SpawnPathNode( cover_left, origin, angles )"
    },
    "1272": {
        "fuction_name": "SpawnPlane",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "player": "the owner",
            "classname": "class of entity",
            "origin": "location to spawn at"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Spawns a plane at the origin",
        "example": "plane = spawnplane( owner, \"script_model\", origin )"
    },
    "1273": {
        "fuction_name": "SpawnStruct",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": null
    },
    "1274": {
        "fuction_name": "SpawnTimedFX",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "weapon": "weapon to spawn fx on",
            "origin": "the position to spawn fx at"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Spawns a broadcast entity that plays an oriented timed FX using the weapon's property projExplosionEffect",
        "example": "ent = SpawnTimedFX( smokeGrenade, position, directionUp, duration )"
    },
    "1275": {
        "fuction_name": "SpawnTurret",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Unsupported function. Do not use.",
        "example": null
    },
    "1276": {
        "fuction_name": "SpawnVehicle",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {
            "vehicletype": "vehicle type (constant string)",
            "origin": "The position of the vehicle (vector)",
            "angles": "The angle to spawn the vehicle at (vector)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Spawns a new vehicle and returns a reference to it",
        "example": null
    },
    "1277": {
        "fuction_name": "StartBinocs",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Start Binoculars on player",
        "example": "player StartBinocs()"
    },
    "1278": {
        "fuction_name": "StartFadingBlur",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "blur_amount": "The initial blur amount. The value is pixels for Gaussian blur at 640x480. Must be a floating point value greater than 0.",
            "time": "Time in seconds, how long the fade out will take"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Blurs the screen, then fades out the blur to 0, over a period of time.",
        "example": "player StartFadingBlur( 3, 2 )"
    },
    "1279": {
        "fuction_name": "StartFiring",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Starts a turret firing",
        "example": "turret StartFiring()"
    },
    "1280": {
        "fuction_name": "StartMission",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "mission_index": "index of the mission name to start - mission names can be retrieved by calling GetMissions to return the available mission array"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Start the (server side) mission script for the specified mission - all loading (on all clients) should be completed before calling - use client side LoadMission to load missions",
        "example": "StartMission()"
    },
    "1281": {
        "fuction_name": "StartPoisoning",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Start poisoning player",
        "example": "player StartPoisoning()"
    },
    "1282": {
        "fuction_name": "StartRagdoll",
        "return_type": "void",
        "called_by": "<player_or_playercorpse>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Begin ragdoll physics for this entity.  Does nothing if the entity is already a ragdoll.",
        "example": "self StartRagdoll()"
    },
    "1283": {
        "fuction_name": "StartResurrectViewAngleTransition",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Finishes the flashback",
        "example": "self StartResurrectViewAngleTransition()"
    },
    "1284": {
        "fuction_name": "StopAllLoopSounds",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Stops a loop sound",
        "example": "car StopAllLoopSounds( 0.5 )"
    },
    "1285": {
        "fuction_name": "StopAllRumbles",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stop all the rumbles playing right now",
        "example": "StopAllRumbles()"
    },
    "1286": {
        "fuction_name": "StopAnimScripted",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Halts animscript on this entity.",
        "example": "self StopAnimScripted()"
    },
    "1287": {
        "fuction_name": "StopBinocs",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stop Binoculars on player",
        "example": "player StopBinocs()"
    },
    "1288": {
        "fuction_name": "StopDemoRecording",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stops demo recording",
        "example": "Demo_End()"
    },
    "1289": {
        "fuction_name": "StopFiring",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stops a turret firing",
        "example": "turret StopFiring()"
    },
    "1290": {
        "fuction_name": "StopForceStreamingMaterial",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "material": "Material to stop force streaming"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Forces the streamer to load the texture LODs for a material even if it isn't yet visible.  Returns true when all levels are loaded.  Call StopForceStreamingMaterial when you no longer need it, or Steve will be upset that you're wasting Streamer memory.",
        "example": "StopForceStreamingMaterial( material )"
    },
    "1291": {
        "fuction_name": "StopForceStreamingXModel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "model": "The model to stop force streaming"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Forces the streamer to load model and texture LODs for a model even if it isn't yet visible.  Returns true when all levels are loaded.  Call StopForceStreamingXModel when you no longer need it, or Steve will be upset that you're wasting Streamer memory.",
        "example": "areAllForcedLodsLoaded = CScr_StopForceStreamingXModel( model )"
    },
    "1292": {
        "fuction_name": "StopForcingStreamer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Remove all streamer forcing",
        "example": "StopForcingStreamer()"
    },
    "1293": {
        "fuction_name": "StopJukeMove",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stops the player juke movement in progress",
        "example": "player StopJukeMove()"
    },
    "1294": {
        "fuction_name": "StopLoopSound",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stops the looping sound with an optional fadetime.",
        "example": "m_chasm stoploopsound( 5 )"
    },
    "1295": {
        "fuction_name": "StopMission",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "fire Mission_Stop event to terminate the current mission",
        "example": "StopMission()"
    },
    "1296": {
        "fuction_name": "StopMoveSlide",
        "return_type": "void",
        "called_by": "<model_origin_brushmodel>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stops the movement caused by MoveSlide().",
        "example": "self StopMoveSlide()"
    },
    "1297": {
        "fuction_name": "StopPoisoning",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stop poisoning player",
        "example": "player StopPoisoning()"
    },
    "1298": {
        "fuction_name": "StopRumble",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "rumble name": "The name of the rumble to play"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Plays a looping rumble on the given entity.",
        "example": "self StopRumble( \"damage_heavy\" )"
    },
    "1299": {
        "fuction_name": "StopShellShock",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stops the shell shock sequence for the player",
        "example": "player StopShellShock()"
    },
    "1300": {
        "fuction_name": "StopShootTurret",
        "return_type": "void",
        "called_by": "<turret>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stops a turrent from firing.",
        "example": "roof_turret StopShootTurret()"
    },
    "1301": {
        "fuction_name": "StopSound",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stop a particular sound on an entity *WARNING*, You must have a wait between StopSounds() and delete() or the sound will not stop.",
        "example": "beatBox StopSound(\"alias\");"
    },
    "1302": {
        "fuction_name": "StopSounds",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stop all sounds on an entity.  *WARNING*, You must have a wait between StopSounds() and delete() or the sound will not stop.",
        "example": "beatBox StopSounds()"
    },
    "1303": {
        "fuction_name": "StreamerModelHint",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "modelname": "The name of the model.",
            "duration": "Length of time (in seconds) to keep it loaded."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Force a model to be loaded for a set period of time.",
        "example": "streamerModelHint( \"c_hro_hendricks_base_fb\", 10 )"
    },
    "1304": {
        "fuction_name": "StreamerNotify",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "id": "integer value indicating the current streamer notify"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Send a streamer notify to the server indicating that the streamer is ready",
        "example": "StreamerNotify(1)"
    },
    "1305": {
        "fuction_name": "StreamerRequest",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "command": "\"set\", \"clear\" or \"play\"",
            "name": "Name of the streamer hint asset"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Streamer request",
        "example": "streamerRequest( \"set\", \"ramses_igc1\" )"
    },
    "1306": {
        "fuction_name": "StreamerSkiptoDebug",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": null
    },
    "1307": {
        "fuction_name": "StreamTextureList",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "Texturelist to stream"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Specify a texture list file for the streamer to load",
        "example": "StreamTextureList( \"igc1\" )"
    },
    "1308": {
        "fuction_name": "SubtitlePrint",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The localClientNum to flush the subtitles for",
            "msec": "The time to display the subtitle for",
            "subtitle": "The message to display"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "print to the subtitle channel",
        "example": "SubtitlePrint( 0, 100, \"zombies everywhere\") "
    },
    "1309": {
        "fuction_name": "SwitchMap_Load",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "map name": "the name of the map to preload"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Start loading a map/level.",
        "example": "SwitchMap_Load( \"cp_sh_cairo\", \"coop\", 0 )"
    },
    "1310": {
        "fuction_name": "SwitchMap_Preload",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "map name": "the name of the map to preload"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Start preloading a map/level.  A 'switchmap_preload_finished' notify is sent to the level when its finished.",
        "example": "SwitchMap_Preload( \"cp_sh_cairo\" )"
    },
    "1311": {
        "fuction_name": "SwitchMap_SetLoadingMovie",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "movie_name": "The name of the movie"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the loading movie to play",
        "example": "SwitchMap_SetLoadingMovie( str_intro_movie )"
    },
    "1312": {
        "fuction_name": "SwitchMap_Switch",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Switch to the loaded map/level",
        "example": "SwitchMap_Switch()"
    },
    "1313": {
        "fuction_name": "Target_BoundingIsUnderReticle",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "The player entity",
            "target entity": "The entity that is the target",
            "maxDistance": "The maximum distance to check for target intersection"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player's cursor is roughly inside of the target's bounding box.",
        "example": "player Target_BoundingIsUnderReticle( player, enemy_chopper, 1000 )"
    },
    "1314": {
        "fuction_name": "Target_ClearReticleLockOn",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Cancels any lock-on sequence on the hud.",
        "example": "Target_ClearReticleLockOn()"
    },
    "1315": {
        "fuction_name": "Target_GetArray",
        "return_type": "entity",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets an array of entities that are set as targets",
        "example": "mytargets = Target_GetArray()"
    },
    "1316": {
        "fuction_name": "Target_GetOffset",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "The entity that is the target"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the target offset",
        "example": "offset = Target_GetOffset( entity )"
    },
    "1317": {
        "fuction_name": "Target_IsInCircle",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "target entity": "The entity that is the target",
            "player": "The player entity",
            "fov": "The player's field of view",
            "radius": "radius of the circle, centered at the center of the screen"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether a target is within a given radius from the center of the player's screen",
        "example": "player Target_IsInCircle( enemy_chopper, player, 65, 100 )"
    },
    "1318": {
        "fuction_name": "Target_IsInRect",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "target entity": "The entity that is the target",
            "player": "The player entity",
            "fov": "The player's field of view",
            "halfwidth": "half the width of the rectangle",
            "halfheight": "half the height of the rectangle"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether a target is within a given rectangle, centered in the center of the player's screen",
        "example": "player Target_IsInRect( enemy_chopper, player, 65, 100, 100 )"
    },
    "1319": {
        "fuction_name": "Target_IsTarget",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "The entity to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether an entity has been marked as a target",
        "example": "if ( Target_IsTarget( foundEnt ) ) ..."
    },
    "1320": {
        "fuction_name": "Target_OriginIsInCircle",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "The origin to test",
            "player": "The player entity",
            "fov": "The player's field of view",
            "radius": "radius of the circle, centered at the center of the screen"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether a target is within a given radius from the center of the player's screen",
        "example": "player Target_IsInCircle( enemy_chopper, player, 65, 100 )"
    },
    "1321": {
        "fuction_name": "Target_Remove",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "target entity": "The entity that is the target"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Removes a target",
        "example": "Target_Remove( enemy_chopper )"
    },
    "1322": {
        "fuction_name": "Target_ScaleMinMaxRadius",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "target entity": "The entity that is the target",
            "player": "The player entity",
            "fov": "The player's field of view",
            "radius_min": "radius of the circle, centered at the center of the screen",
            "radius_max": "radius of the circle, centered at the center of the screen"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the ratio from 0-1 of where the target is in relation to the radius min and radius max",
        "example": "scale = Target_ScaleMinMaxRadius( target, self, level.hackerToolLockOnFOV, radiusInner, radiusOuter )"
    },
    "1323": {
        "fuction_name": "Target_Set",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "target entity": "The entity that is the target"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Adds a new target to draw on the hud",
        "example": "Target_Set( enemy_chopper )"
    },
    "1324": {
        "fuction_name": "Target_SetAllowHighSteering",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "target entity": "The entity that is the target"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Target will allow incoming missiles to steer more making the target easier to hit",
        "example": "Target_SetAllowHighSteering( enemy_tank, true )"
    },
    "1325": {
        "fuction_name": "Target_SetAttackMode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "target entity": "The entity that is the target",
            "mode name": "\"top\" or \"direct\""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets how missiles and rockets should approach the target.",
        "example": "Target_SetAttackMode( enemy_tank, \"top\" )"
    },
    "1326": {
        "fuction_name": "Target_SetJavelinOnly",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "target entity": "The entity that is the target",
            "mode name": "\"top\" or \"direct\""
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Target will only draw on player's hud when they are looking through the Javelin-weapon's site.",
        "example": "Target_SetJavelinOnly( enemy_tank, true )"
    },
    "1327": {
        "fuction_name": "Target_SetOffscreenShader",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "target entity": "The entity that is the target",
            "materialname": "The shader for the quad drawn over the target"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the material that is used when a target clamps to the edge of the screen.  The target must have already been created with target_set()",
        "example": "Target_SetOffscreenShader( enemy_chopper, \"arrow\" )"
    },
    "1328": {
        "fuction_name": "Target_SetOffset",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "target entity": "The entity that is the target"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the offset for a particular target",
        "example": "Target_SetOffset( enemy_chopper, ( 0, 0, -100 ) )"
    },
    "1329": {
        "fuction_name": "Target_SetShader",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "target entity": "The entity that is the target",
            "materialname": "The shader for the quad drawn over the target"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Changes the material of a target.  The target must have already been created with target_set()",
        "example": "Target_SetShader( enemy_chopper, \"locked_on_shader\" )"
    },
    "1330": {
        "fuction_name": "Target_SetTurretAquire",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "The entity to set the flag"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets if the target can be attacked by SAM turrets",
        "example": "Target_SetTurretAquire( chopper, false )"
    },
    "1331": {
        "fuction_name": "Target_StartReticleLockOn",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "target entity": "The entity that is the target",
            "duration": "The amount of time between now and fully locked-on, in seconds."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Begins the lock-on sequence for the target on the hud.  This affects the animation of the vehicle reticle.",
        "example": "Target_StartReticleLockOn( enemy_chopper, 4 )"
    },
    "1332": {
        "fuction_name": "TestSpawnPoint",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "point": "the point to test"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player would not be in a solid when spawned at the given point.",
        "example": "TestSpawnPoint( self.origin )"
    },
    "1333": {
        "fuction_name": "TmodeSetServerUser",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "value": "(int) 1-using 0-not usuing"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "informs the server if the entity is using tmode",
        "example": "entity TmodeSetServerUser( 1 )"
    },
    "1334": {
        "fuction_name": "ToggleNoVehicleFaceTraversability",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set whether the entity can use NoVehicleFaces. This should only be used in MP map for now.",
        "example": null
    },
    "1335": {
        "fuction_name": "TracePassedOnNavMesh",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start": "start of the trace",
            "end": "end of the trace"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Run a trace on NavMesh to see if a character can go straight from start to end.",
        "example": "posOnNavMesh = TracePassedOnNavMesh( (10,20,30), 25, 15 )"
    },
    "1336": {
        "fuction_name": "TracePoint",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start": "Start point",
            "end": "End point"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Traces a poitn throught the world with MASK_SHOT. Returns hit position, hit surface normal.",
        "example": "trace = TracePoint( p0, p1 )"
    },
    "1337": {
        "fuction_name": "TriggerEnable",
        "return_type": "void",
        "called_by": "<trigger>",
        "mandatory_parameters": {
            "flag": "True if trigger should be enabled, false otherwise"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enables or disables the trigger",
        "example": "trig TriggerEnable( true )"
    },
    "1338": {
        "fuction_name": "TriggerFX",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "The fx entity"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Trigger the fx after some time delay",
        "example": "triggerFx( domFlag.enemyBaseEffect, 0.001 )"
    },
    "1339": {
        "fuction_name": "TriggerIgnoreTeam",
        "return_type": "void",
        "called_by": "<trigger>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Trigger ignores team",
        "example": "trig TriggerIgnoreTeam()"
    },
    "1340": {
        "fuction_name": "Underwater",
        "return_type": "void",
        "called_by": "<player_actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "checks if the player or actor is underwater",
        "example": "if( player Underwater() ) ..."
    },
    "1341": {
        "fuction_name": "Unlink",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Unlinks a linked entity from another entity",
        "example": "guy Unlink()"
    },
    "1342": {
        "fuction_name": "UnlinkNodes",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node1": "first node to unlink",
            "node2": "second node to unlink"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Disconnects node1 from node2. Call it again with arguments flipped if you want to completely disconnect the two nodes.",
        "example": "UnlinkNodes( node_moving_elev_left, node_moving_elev_right )"
    },
    "1343": {
        "fuction_name": "UnlinkTraversal",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "Negotiation begin node"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Destroys a user edge connecting two path nodes",
        "example": "UnlinkTraversal( beginNode )"
    },
    "1344": {
        "fuction_name": "UnloadSiegeAnim",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "anim_name": "Name of the siege anim to unload"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Unload a siege anim from memory",
        "example": "UnloadSiegeAnim( \"flappy_bird\" )"
    },
    "1345": {
        "fuction_name": "UnlockSongByAlias",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "aliasname": "The sound alias to play (string)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Unlock the the sound alias",
        "example": "self UnlockSongByAlias( \"frag_out\" )"
    },
    "1346": {
        "fuction_name": "UnSetTurretNode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "node": "The turret node to disconnect"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Unset the turret from this node.",
        "example": "UnSetTurretNode( node )"
    },
    "1347": {
        "fuction_name": "UpdateClientNames",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Update all of the client names: only works in 'manual_change' mode",
        "example": null
    },
    "1348": {
        "fuction_name": "UpdateNavTriggers",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Optimized code that performs the update_nav_triggers() script functionality",
        "example": "UpateNavTriggers()"
    },
    "1349": {
        "fuction_name": "UpdateUnlockedAttachmentBits",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Updates client->unlockedAttachments",
        "example": "self UpdateUnlockedAttachmentBits()"
    },
    "1350": {
        "fuction_name": "UseAlternateAimParams",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Forces the local player to use alternate values for aim assist. Only works in zombie/campaign mode. Can only be called on players",
        "example": "self UseAlternateAimParams( )"
    },
    "1351": {
        "fuction_name": "UseAlternateHud",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "onOff": "0 = regular, 1 = alternate"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Use the alternate HUD in lui. Zombies only",
        "example": null
    },
    "1352": {
        "fuction_name": "UseAnimTree",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "anim tree": "The anim tree to set"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the anim tree for the entity",
        "example": "self UseAnimTree( #animtree )"
    },
    "1353": {
        "fuction_name": "UseBuildKitWeaponModel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "player": "The player whose build kit data will be used",
            "weapon": "The weapon to base the build kit on"
        },
        "optional_parameters": {
            "upgraded": "bool whether this should be the upgraded version. If so extclip and fmj will be added"
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Use a build kit weapon model",
        "example": "wall_weapon_model UseBuildKitWeaponModel( player, magicbox.weapon )"
    },
    "1354": {
        "fuction_name": "UseBy",
        "return_type": "entity",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Uses the entity with the passed in entity as the activator",
        "example": "self UseBy( player )"
    },
    "1355": {
        "fuction_name": "UseServerVisionset",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "use it": "Whether using the server override visionset"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Switches using the server supplied (via SetVisionSetForPlayer()) visionset.",
        "example": "player UseServerVisionset( true )"
    },
    "1356": {
        "fuction_name": "UseTriggerIgnoreUseHoldTime",
        "return_type": "void",
        "called_by": "<trigger>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the require look at flag for the trigger",
        "example": "e_trig_mobile_armory UseTriggerIgnoreUseHoldTime()"
    },
    "1357": {
        "fuction_name": "UseTriggerRequireLookAt",
        "return_type": "void",
        "called_by": "<trigger>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the require look at flag for the trigger",
        "example": "e_trig_plaza_igc UseTriggerRequireLookAt()"
    },
    "1358": {
        "fuction_name": "UseTriggerRequireLookToward",
        "return_type": "void",
        "called_by": "<trigger>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the require look along flag for the trigger",
        "example": "e_trig_plaza_igc UseTriggerRequireLookToward()"
    },
    "1359": {
        "fuction_name": "UseWeaponHideTags",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weaponName": "The name of the weapon to base the tags to hide on"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Hides tags on this entity based on the hidetags value of the provided weaponname",
        "example": "wall_weapon_model UseWeaponHideTags()"
    },
    "1360": {
        "fuction_name": "UseWeaponModel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weaponName": "The name of the weapon to base the tags to hide on"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Use a weapon model",
        "example": "wall_weapon_model UseWeaponModel(\"m16_zm\")"
    },
    "1361": {
        "fuction_name": "Vibrate",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "direction vector": "The direction of the vibration",
            "amplitude": "The amount of the vibration in degrees",
            "period": "The period of the vibration in seconds",
            "time": "The length of time of the vibration in seconds"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Causes a script entity to vibrate, rotating around its origin, along a given vector dir",
        "example": "self Vibrate( directionVir, 0.3, 0.4, 1.0 )"
    },
    "1362": {
        "fuction_name": "VideoPause",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "name of movie to pause.  do not add a file suffix (like .mp4)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Pause video playback",
        "example": "VideoPause( \"MyAwesomeMovie\" )"
    },
    "1363": {
        "fuction_name": "VideoPrime",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "name of movie to play.  do not add a file suffix (like .mp4)"
        },
        "optional_parameters": {
            "loop": "Set this to true if the movie should automatically restart when it reaches the end."
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Preload the first second of a movie.  Call this several seconds before the movie needs to play to prevent any delay",
        "example": "VideoPrime( \"MyAwesomeMovie\" )"
    },
    "1364": {
        "fuction_name": "VideoStart",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "name of movie to play.  do not add a file suffix (like .mp4)"
        },
        "optional_parameters": {
            "loop": "Set this to true if the movie should automatically restart when it reaches the end."
        },
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Start a video for playback on an in-game surface",
        "example": "VideoStart( \"MyAwesomeMovie\" )"
    },
    "1365": {
        "fuction_name": "VideoStop",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "name of movie to stop.  do not add a file suffix (like .mp4)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stop a video being played on an in-game surface",
        "example": "VideoStop( \"MyAwesomeMovie\" )"
    },
    "1366": {
        "fuction_name": "VideoUnpause",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "name of movie to pause.  do not add a file suffix (like .mp4)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Unpause video playback",
        "example": "VideoUnpause( \"MyAwesomeMovie\" )"
    },
    "1367": {
        "fuction_name": "ViewKick",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "damage": "The damage to inflict",
            "origin": "The origin of the kick"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Give the player a view kick",
        "example": "entity ViewKick( 25, self.origin )"
    },
    "1368": {
        "fuction_name": "ViewmodelHasTag",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "local_client_num": "The client number",
            "tag": "The tag to see if it exists on the current weapon"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": null,
        "example": null
    },
    "1369": {
        "fuction_name": "VisionSetLastStand",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "vision name": "Vision to transition to."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets players' laststand vision.  Optionally give a transition time from the current vision.",
        "example": "VisionSetLastStand( \"armada\", 1.5 )"
    },
    "1370": {
        "fuction_name": "VisionSetLerpRatio",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "float": "ratio between 0 and 1"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Determines if you can see an item.  Checks distance and view cone before the trace to increase efficency.",
        "example": "self VisionSetLerpRatio ( currentDistance / maxDistance )"
    },
    "1371": {
        "fuction_name": "VisionSetNaked",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "The vision set name"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the vision and its duration",
        "example": "VisionSetNaked( \"cp_igc_chinatown_intro\", 0.05 )"
    },
    "1372": {
        "fuction_name": "VrIsActive",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns whether the game is currently in VR mode.",
        "example": "do_vr_stuff = VrIsActive() ..."
    },
    "1373": {
        "fuction_name": "WalkUnderwater",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "boolean": "true if player should walk underwater.  False if player should swim"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets if a player should walk while underwater",
        "example": "depth = get_players()[0] WalkUnderwater( true )"
    },
    "1374": {
        "fuction_name": "WeaponCyclingEnabled",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Determine if weapon cycling is enabled for the player",
        "example": "enabled = player WeaponCyclingEnabled()"
    },
    "1375": {
        "fuction_name": "WeaponFriendlyHacking",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Weapon to check"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the value of the friendlyHacking bit on the specified weapon of the specified player",
        "example": "currentWeapon = GetCurrentWeapon( localClientNum )"
    },
    "1376": {
        "fuction_name": "WeaponHasAttachment",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Does the weapon have all the attachments specified?",
        "example": "WeaponHasAttachment( weapon, \"extbarrel\", \"damage, \"fmj\" )"
    },
    "1377": {
        "fuction_name": "WeaponHasAttachmentAndUnlocked",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weapon": "weapon",
            "string": "string id for attachment"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Does the weapon have all the attachments specified? And are they all unlocked for challenge stat purposes?",
        "example": "player WeaponHasAttachmentAndUnlocked( weapon, \"extbarrel\", \"damage, \"fmj\" )"
    },
    "1378": {
        "fuction_name": "WorldEntNumber",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the entity number for the world",
        "example": null
    },
    "1379": {
        "fuction_name": "WorldToLocalCoords",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "world coords": "The point in world coordinates (vector3)"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Transform the given world point into the local space of the entity",
        "example": "local_point = self WorldToLocalCoords( world_point )"
    },
    "1380": {
        "fuction_name": "WorldTrace",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start": "The trace start point",
            "end": "The trace end point"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Trace from start to end",
        "example": "trace = WorldTrace( start_pos, end_pos )"
    },
    "1381": {
        "fuction_name": "ZBarrierGetPiece",
        "return_type": "entity",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "piece_index": "piece index to get"
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets the entity for the zbarrier's given piece index",
        "example": "zbarrier ZBarrierGetPiece( 3 )"
    },
    "1382": {
        "fuction_name": "ZBarrierPieceUseAlternateModel",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "piece number": "The piece index."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the indexed piece to use the alternate model.",
        "example": "ent ZBarrierPieceUseAlternateModel(1)"
    },
    "1383": {
        "fuction_name": "ZBarrierPieceUseAttachWeapon",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "piece number": "The piece index."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the indexed piece to attach the zbarrier's weapon to tag_weapon (and tag_weapon_left if it's dual wield).",
        "example": "ent ZBarrierPieceUseAttachWeapon( 1 )"
    },
    "1384": {
        "fuction_name": "ZBarrierPieceUseBoxRiseLogic",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "piece number": "The piece index."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the indexed piece to use the box rise logic.",
        "example": "ent ZBarrierPieceUseBoxRiseLogic(1)"
    },
    "1385": {
        "fuction_name": "ZBarrierPieceUseDefaultModel",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "piece number": "The piece index."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the indexed piece to use the default model.",
        "example": "ent ZBarrierPieceUseDefaultModel(1)"
    },
    "1386": {
        "fuction_name": "ZBarrierPieceUseUpgradedModel",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "piece number": "The piece index."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the indexed piece to use the upgraded model.",
        "example": "ent ZBarrierPieceUseUpgradedModel(1)"
    },
    "1387": {
        "fuction_name": "ZBarrierSupportsZombieReachThroughAttacks",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if this zbarrier supports zombie reach through attacks.",
        "example": "useAttack = ent ZBarrierSupportsZombieReachThroughAttacks()"
    },
    "1388": {
        "fuction_name": "ZBarrierSupportsZombieTaunts",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if this zbarrier supports zombie taunt anims.",
        "example": "useTaunt = ent ZBarrierSupportsZombieTaunts()"
    },
    "1389": {
        "fuction_name": "ZeroGravityVolumeOff",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "volume name": "The volume name."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Disables Zero Gravity Volume.",
        "example": "ZeroGravityVolumeOff( \"area_four\" )"
    },
    "1390": {
        "fuction_name": "ZeroGravityVolumeOn",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "volume name": "The volume name."
        },
        "optional_parameters": {},
        "category": null,
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enables Zero Gravity Volume.",
        "example": "ZeroGravityVolumeOn( \"area_four\" )"
    },
    "1391": {
        "fuction_name": "AddSentientEventListener",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "event": "The event name"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Registers entity to listen to a specific event. Call waittill(<event>) to get the notification in script.",
        "example": "self AddSentientEventListener(\"bulletwhizby\")"
    },
    "1392": {
        "fuction_name": "aithrowgrenade",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Throw a grenade. CheckGrenadeThrowPos() or CheckGrenadeThrow() must be called first.",
        "example": "self GrenadeThrow()"
    },
    "1393": {
        "fuction_name": "AllowPitchAngle",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "on_off": "1 to allow and 0 to disallow"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Allows AI to pitch on stairs",
        "example": "guy AllowPitchAngle ( 1 )"
    },
    "1394": {
        "fuction_name": "AnimMode",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "mode": "which animmode to use. Must be 'gravity', 'nogravity', 'angle deltas', 'pos deltas', 'normal', 'normal_nogravity', 'zonly_physics', 'nophysics', 'none'"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the way that animation deltas are interpreted by the game engine",
        "example": "self AnimMode( \"gravity\" )NOTES:  none:\t\t\t\tUse default animmode behavior (i.e., code controls the movement)."
    },
    "1395": {
        "fuction_name": "AtDangerousNode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Determine whether this actor is near a dangerous node.",
        "example": "if ( ai atDangerousNode() )..."
    },
    "1396": {
        "fuction_name": "AttackedRecently",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "entity": "The enemy entity",
            "time": "Time interval in seconds."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if given sentient has attacked the entity within last \"time\" sec.",
        "example": "self AttackedRecently(self.enemy)"
    },
    "1397": {
        "fuction_name": "CalcApproximatePathToPosition",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "position": "The goal position for the path"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of world positions representing the approximate path an actor will take.  Calculating an approximate path will cause the AI to clear their current path.",
        "example": "self CalcApproximatePathToPosition( position )"
    },
    "1398": {
        "fuction_name": "CalcLookaheadPos",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "startPos": "Starting position of the lookahead traces",
            "numIter": "Number of times to iterate (more gives better results, but is more expensive). Set to 0 to get current lookahead."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Calculate a lookahead point based on a given starting location and number of iterations. Returns an array with these keys: \"position\", \"node\" and \"next_node\", which contain vectors for the actual lookahead position and the next two nodes on the path, respectively.",
        "example": "self CalcLookaheadPos( self.origin, 3 )"
    },
    "1399": {
        "fuction_name": "CanAttackEnemyNode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks if this actor can attack its enemies node.",
        "example": "self CanAttackEnemyNode()"
    },
    "1400": {
        "fuction_name": "CanSee",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "target": "(entity) The entity to check."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check to see if the AI can see the given entity.",
        "example": "if( self CanSee( player ) )"
    },
    "1401": {
        "fuction_name": "CanShoot",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "shoot at position": "(vector) The position to shoot at."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check to see if the actor can shoot the given position.",
        "example": "canShoot = self CanShoot( eye, offset )"
    },
    "1402": {
        "fuction_name": "CanShootEnemy",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check to see if the actor can shoot his current enemy.",
        "example": "canShootEnemy = self CanShootEnemy()"
    },
    "1403": {
        "fuction_name": "CanThrowGrenade",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "hand offset": "(vector) the estimated offset of the hand for the throw",
            "random range": "(float) random range from target position to throw at"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether the actor can throw a grenade at a given position. If he can't then result will be undefined, otherwise the result is the resultant velocity vector",
        "example": "throwvel = self CanThrowGrenade( armOffset, 0 )"
    },
    "1404": {
        "fuction_name": "CanThrowGrenadePos",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "hand offset": "(vector) the estimated offset of the hand for the throw",
            "targetpos": "(vector) The target position, should be at ground level of potential target"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether the actor can throw a grenade at a given position. If he can't then result will be undefined, otherwise the result is the resultant velocity vector",
        "example": "throwvel = self CanThrowGrenadePos( armOffset, targetPos )"
    },
    "1405": {
        "fuction_name": "CheckGrenadeThrow",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "hand offset": "(vector) the estimated offset of the hand for the throw",
            "method": "(string) The grenade toss method. Can be 'min energy', 'min time', and 'max tune'",
            "random range": "(float) random range from target position to throw at"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether the actor can throw a grenade at his target. If he can't then result will be undefined, otherwise the result is the resultant velocity vector",
        "example": "throwvel = self CheckGrenadeThrow( armOffset, \"min energy\", 0 )"
    },
    "1406": {
        "fuction_name": "CheckGrenadeThrowPos",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "hand offset": "(vector) the estimated offset of the hand for the throw",
            "method": "(vector) The grenade toss method. Can be 'min energy', 'min time', and 'max tune'",
            "targetpos": "(vector) The target position, should be at ground level of potential target"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether the actor can throw a grenade at a given position. If he can't then result will be undefined, otherwise the result is the resultant velocity vector",
        "example": "throwvel = self CheckGrenadeThrowPos( armOffset, \"min energy\", targetPos )"
    },
    "1407": {
        "fuction_name": "CheckProne",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "position": "(vector) The position of the prone character.",
            "yaw": "(float) The world yaw in degrees.",
            "is prone": "(bool) Flag if the character is already prone."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true when a character can go prone at the specified position. Specifically setup for use by AI characters.",
        "example": "canFitProne = self CheckProne( origin, yaw, alreadyProne )"
    },
    "1408": {
        "fuction_name": "ChooseBetterCoverNode",
        "return_type": "pathnode",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Chooses a better cover node for an ai",
        "example": "newNode = behaviorTreeEntity ChooseBetterCoverNode()"
    },
    "1409": {
        "fuction_name": "ClearEnemy",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clear the actor's current enemy entity.",
        "example": "self ClearEnemy()"
    },
    "1410": {
        "fuction_name": "ClearEntityOwner",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears an AI's entity owner.",
        "example": "self ClearEntityOwner()"
    },
    "1411": {
        "fuction_name": "ClearEntityTarget",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears an AI's entity target.",
        "example": "self ClearEntityTarget( vehicle_entity )"
    },
    "1412": {
        "fuction_name": "ClearFixedNodeSafeVolume",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears this actor's fixed node safe volume.",
        "example": "self ClearFixedNodeSafeVolume()"
    },
    "1413": {
        "fuction_name": "ClearForcedGoal",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears the forcedGoal for this AI's goal.",
        "example": "self ClearForcedGoal()"
    },
    "1414": {
        "fuction_name": "ClearGoalVolume",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears this actor's goal volume.",
        "example": "self ClearGoalVolume()"
    },
    "1415": {
        "fuction_name": "ClearPath",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears the AI's current path.",
        "example": "self ClearPath()"
    },
    "1416": {
        "fuction_name": "ClearPitchOrient",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clear pitch orientation",
        "example": "self clearPitchOrient()"
    },
    "1417": {
        "fuction_name": "ClearPotentialThreat",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "dir": "direction of the threat. This is the angle from which the NPC should expect danger"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clear the potential threat direction. See SetPotentialThreat for more info on potential threats",
        "example": "self ClearPotentialThreat( 90 )"
    },
    "1418": {
        "fuction_name": "ClearUsePosition",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clear the override for the goal pos.",
        "example": "self ClearUsePosition()"
    },
    "1419": {
        "fuction_name": "CollideWithActors",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Toggles collision with other actors. Actor will go through each other, when its toggled off.",
        "example": "entity CollideWithActors( true )"
    },
    "1420": {
        "fuction_name": "CreateThreatBiasGroup",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "threat bias group name."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Create a new threat bias group. If it already exists, do nothing",
        "example": "CreateThreatBiasGroup( \"flanking_team\" )"
    },
    "1421": {
        "fuction_name": "DamageMode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "damage mode": "(const string) DamageMode must be 'normal' or 'next_shot_kills'"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the damage mode of this actor.",
        "example": "randAlly DamageMode(\"next_shot_kills\")"
    },
    "1422": {
        "fuction_name": "DropWeapon",
        "return_type": "entity",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "weapon name": "(string) The name of the weapon.",
            "hand": "(string) The tag to throw the weapon from."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Drop the actor's weapon",
        "example": "self DropWeapon(self.weapon, self.anim_gunHand, throwVel)"
    },
    "1423": {
        "fuction_name": "FindBestCoverNode",
        "return_type": "pathnode",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Find the best cover node for a given NPC given his state.",
        "example": "self FindBestCoverNode()"
    },
    "1424": {
        "fuction_name": "FindBestCoverNodes",
        "return_type": "pathnode",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "radius": "search radius",
            "origin": "search origin"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Find the best cover nodes for a given NPC given his state. Sorted by best",
        "example": "nodes = self FindBestCoverNodes(radius,origin)"
    },
    "1425": {
        "fuction_name": "FindCoverNodeAtLocation",
        "return_type": "pathnode",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "radius": "search radius",
            "origin": "search origin"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Finds a near by cover node for the character.",
        "example": "guy FindCoverNodeAtLocation(512,loc)"
    },
    "1426": {
        "fuction_name": "FindReacquireDirectPath",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Finds a path directly to the enemy. Call ReacquireMove to use the path.",
        "example": null
    },
    "1427": {
        "fuction_name": "FindReacquireNode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Finds a reacquire node when exposed.",
        "example": "guy FindReacquireNode()"
    },
    "1428": {
        "fuction_name": "FindReacquireProximatePath",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Finds a path to a point that can see the enemy without leaving goal. Call ReacquireMove to use the path.",
        "example": null
    },
    "1429": {
        "fuction_name": "FinishActorDamage",
        "return_type": "entity",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "Inflictor": "The entity that causes the damage.(e.g. a turret)",
            "Attacker": "The entity that is attacking.",
            "Damage": "Integer specifying the amount of damage done",
            "Damage Flags": "Integer specifying flags that are to be applied to the damage",
            "Means Of Death": "Integer specifying the method of death",
            "Weapon": "The weapon number of the weapon used to inflict the damage",
            "Direction": "(vector) The direction of the damage",
            "Hit Loc": "The location of the hit",
            "Damage Origin": "Position of the originator of the damage",
            "Offset Time": "The time offset for the damage",
            "Bone Index": "Index of nearest bone"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Does damage to an actor - usually as part of the damage callback",
        "example": "self FinishActorDamage( eInflictor, eAttacker, iDamage, iDFlags, sMeansOfDeath, sWeapon, vPoint, vDir, sHitLoc, vDamageOrigin, psOffsetTime, iBoneIndex, iSurfaceType, vSurfaceNormal )"
    },
    "1430": {
        "fuction_name": "ForceTeleport",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "position": "(point) The actor's new position."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Force Teleport the actor to a new position with the given origin and angles, regardless of wether it will be visible to the player or not.",
        "example": "self ForceTeleport( org, angles )"
    },
    "1431": {
        "fuction_name": "GenerateRadioEvent",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "type of event": "The type of radio event"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Searches animation selector table and returns an animation alias based on current state of the blackboard.",
        "example": "self GenerateRadioEvent(\"radio_event_low\")"
    },
    "1432": {
        "fuction_name": "GetAimLimitsFromEntry",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Searches animation selector table and returns an animation alias based on current state of the blackboard.",
        "example": null
    },
    "1433": {
        "fuction_name": "GetBehaviorTreeStatus",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns current status/BHTN_STATUS of the behavior tree for an actor.",
        "example": "isBehaviorTreeInRunningState = behaviorTreeEntity GetBehaviortreeStatus() == BHTN_RUNNING"
    },
    "1434": {
        "fuction_name": "GetClosestEnemySqDist",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the distance to the nearest enemy",
        "example": "dist = self GetClosestEnemySqDist()NOTES:  either AI or player"
    },
    "1435": {
        "fuction_name": "GetDropToFloorPosition",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the floor position for dropping an AI or player to the ground. Returns undefined if the AI is in solid.",
        "example": "position = ai GetDropToFloorPosition( ai.origin )"
    },
    "1436": {
        "fuction_name": "GetFinalPathPos",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the last position in the path",
        "example": null
    },
    "1437": {
        "fuction_name": "GetFireMode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns the firemode",
        "example": "soldier GetFireMode()"
    },
    "1438": {
        "fuction_name": "GetFixedNodeSafeVolume",
        "return_type": "entity",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get this actor's fixed node safe volume.",
        "example": "volume = self GetFixedNodeSafeVolume()"
    },
    "1439": {
        "fuction_name": "GetFlashBangedStrength",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Retrieves how strongly the actor was initially hit by a flashbang. 1.0 is full strength, 0.0 is none at all.",
        "example": "flashedPercent = self GetFlashBangedStrength()"
    },
    "1440": {
        "fuction_name": "GetGoalVolume",
        "return_type": "entity",
        "called_by": "<sentient>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get this actor's goal volume.",
        "example": "goalVolume = self GetGoalVolume()"
    },
    "1441": {
        "fuction_name": "GetGroundEntType",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the entity type of the 'ground' that the actor is on.",
        "example": "self GetGroundEntType()"
    },
    "1442": {
        "fuction_name": "GetHitEntType",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the type of entity that the actor has hit. Can be 'hit', 'obstacle' or 'world'.",
        "example": "self GetHitEntType()"
    },
    "1443": {
        "fuction_name": "GetHitYaw",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the direction in degrees that the player has hit an obstacle at. Returns an error if nothing was hit.",
        "example": "self GetHitYaw()"
    },
    "1444": {
        "fuction_name": "GetIgnoreEnt",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "sentient": "Another sentient entity"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns if a specific sentient entity is ignored by this sentient entity or not",
        "example": "if ( aiGuy GetIgnoreEnt( player ) )"
    },
    "1445": {
        "fuction_name": "GetNextFindBestCoverTime",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "minEngageDist": "Min engage enemy dist.",
            "maxEngageDist": "Max engage enemy dist.",
            "noEnemyInterval": "How often cover should be searched when without an enemy"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Generates a new next find cover time",
        "example": "behaviorTreeEntity.nextFindBestCoverTime = GetActorNextFindBestCoverTime( behaviorTreeEntity.engageMinDist, behaviorTreeEntity.engagemaxdist, behaviorTreeEntity.coversearchinterval )"
    },
    "1446": {
        "fuction_name": "GetNodeOffsetAngles",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the angles the actor thinks the node is facing, this can contain additional rotation from the node's actual angles.",
        "example": "self GetNodeOffsetAngles( self.node )"
    },
    "1447": {
        "fuction_name": "GetNodeOffsetPosition",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the position the actor thinks the node's origin is at, this can be offset from where the actual node's position in the world is.",
        "example": "self GetNodeOffsetPosition( self.node )"
    },
    "1448": {
        "fuction_name": "GetOrientMode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the orient mode of this actor.",
        "example": "orientMode = randAlly GetOrientMode()"
    },
    "1449": {
        "fuction_name": "GetPathLength",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the length of the path being used by this actor",
        "example": "self GetPathLength()"
    },
    "1450": {
        "fuction_name": "GetPathMode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the path mode of this actor.",
        "example": "pathMode = randAlly GetPathMode()"
    },
    "1451": {
        "fuction_name": "GetPerfectInfo",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "entity": "An entity to become aware of. Must be a sentient (i.e. AI or player)"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Forces the AI to become aware of this entity regardless of whether it can be seen or not.",
        "example": "self GetPerfectInfo( get_players()[0] )"
    },
    "1452": {
        "fuction_name": "GetPersonalThreatBias",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "sentient": "Self",
            "enemy": "The enemy to get threat bias for"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "return the personal threat bias for this sentient versus the other sentient",
        "example": "value = self GetPersonalThreatBias( self.enemy )"
    },
    "1453": {
        "fuction_name": "GetReacquireNode",
        "return_type": "pathnode",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the reacquire node of this actor.",
        "example": "guy GetReacquireNode()"
    },
    "1454": {
        "fuction_name": "GetStealthSightValue",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "otherSentient": "other sentient you want to get the value on this sentient for"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the current stealth sight value for this sentient seeing another sentient (floating point from 0.0 to 1.0)",
        "example": "aiGuy GetStealthSightValue( forOtherGuy )"
    },
    "1455": {
        "fuction_name": "GetThreatBias",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "of group": "(string) threat bias group for.",
            "against group": "(string) threat bias group against."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get threat bias of first group against second group",
        "example": "GetThreatBias( \"axis\", \"flanking_team\" )"
    },
    "1456": {
        "fuction_name": "GetThreatBiasGroup",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the threat bias group of an AI or player",
        "example": "GetThreatBiasGroup()"
    },
    "1457": {
        "fuction_name": "GetTurnExitYaw",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Predicts exit yaw vector using havok pathfinding.",
        "example": null
    },
    "1458": {
        "fuction_name": "GrenadeThrow",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Throw a grenade. CheckGrenadeThrowPos() or CheckGrenadeThrow() must be called first.",
        "example": "self GrenadeThrow()"
    },
    "1459": {
        "fuction_name": "HasPath",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns true/false if AI has a path",
        "example": "self HasPAth()"
    },
    "1460": {
        "fuction_name": "HasValidInterrupt",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "interrupt name": "The name of the interrupt"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return true if there is a valid interrupt with the given name alive on the current server frame.",
        "example": "if ( entity HasValidInterrupt(\"pain\") )"
    },
    "1461": {
        "fuction_name": "IsActorShooting",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "entity": "An actor"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this entity is an ai is shooting",
        "example": "if ( meanGuy IsActorShooting() ) ..."
    },
    "1462": {
        "fuction_name": "IsApproachingGoal",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns true/false if actor at the goal or approaching the goal.",
        "example": "self IsApproachingGoal()"
    },
    "1463": {
        "fuction_name": "IsAtCoverNode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns true/false if actor is at cover node. (exposed node is considered as covernode)",
        "example": "self IsAtCoverNode()"
    },
    "1464": {
        "fuction_name": "IsAtCoverNodeStrict",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns true/false if actor is at cover node. (exposed node is not considered as covernode)",
        "example": "self IsAtCoverNode()"
    },
    "1465": {
        "fuction_name": "IsAtGoal",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns true/false if actor has at/reached its current goal, similar to waiting for \"goal\" notify.",
        "example": "self IsAtGoal()"
    },
    "1466": {
        "fuction_name": "IsBadGuy",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the sentient is on the bad guy team (not 'allies', not 'neutral').",
        "example": "if ( ai IsBadGuy() )"
    },
    "1467": {
        "fuction_name": "IsCoverValid",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "pathnode": "The pathnode to check for validity"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return true if the passed in node is a valid cover node.",
        "example": "if( self IsCoverValid( pathnode ) )"
    },
    "1468": {
        "fuction_name": "IsCurrentBTActionLooping",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return true if there is an action running and its looping.",
        "example": "if( behaviorTreeEntity IsCurrentBTActionLooping() )"
    },
    "1469": {
        "fuction_name": "IsDeflected",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the actor has been deflected.",
        "example": "self IsDeflected()"
    },
    "1470": {
        "fuction_name": "IsFlankedAtCoverNode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns true/false if actor is at is flanked at cover node",
        "example": "self IsFlankedAtCoverNode()"
    },
    "1471": {
        "fuction_name": "IsGrenadePosSafe",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "throw pos": "(vector) position to throw at"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks a grenade throw target position is safe.",
        "example": "if ( self IsGrenadeThrowSafe( throwPos, 200 ) )"
    },
    "1472": {
        "fuction_name": "IsInAnyBadPlace",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether the AI is in a bad place.",
        "example": "self IsInAnyBadPlace()"
    },
    "1473": {
        "fuction_name": "IsInGoal",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "point": "which point to check."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Determine whether a given point is in the actor's current goal area",
        "example": "if ( ai IsInGoal( point ) )"
    },
    "1474": {
        "fuction_name": "IsInScriptedState",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks if actor is in a scripted state (animscripted, custom, negotiation)",
        "example": "self isInScripteState()"
    },
    "1475": {
        "fuction_name": "IsKnownEnemyInRadius",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "position": "center of radius to check.",
            "radius": "."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks if there is a known enemy in a radius for an AI.",
        "example": "if ( self IsKnownEnemyInRadius( pos, radius ) ) ..."
    },
    "1476": {
        "fuction_name": "IsKnownEnemyInVolume",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "volume": "volume entity to check in."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks if there is a known enemy in a volume for an AI.",
        "example": "if ( self isKnownEnemyInVolume( volume ) )"
    },
    "1477": {
        "fuction_name": "IsMoveSuppressed",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this actor is in a suppressed state ( blocked by friendly fire ).",
        "example": "while ( self IsMoveSuppressed() )..."
    },
    "1478": {
        "fuction_name": "IsNoTarget",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns if the sentient is marked no target",
        "example": "if ( self IsNoTarget() )NOTES:  either AI or player"
    },
    "1479": {
        "fuction_name": "IsPathDirect",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check whether the actor's current path is direct",
        "example": "self IsPathDirect()"
    },
    "1480": {
        "fuction_name": "IsPosAtGoal",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns true/false if position is inside the current goal",
        "example": "self IsPosAtGoal(position)"
    },
    "1481": {
        "fuction_name": "IsPosInClaimedLocation",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns true/false if position is claimed by another sentient",
        "example": "self IsPosInClaimedLocation( position )"
    },
    "1482": {
        "fuction_name": "IsSafeFromGrenade",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns true/false if actor is within a blast radius of a grenade.",
        "example": "self IsSafeFromGrenade()"
    },
    "1483": {
        "fuction_name": "IsStanceAllowed",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "stance": "(string) A stance, can be 'prone', 'crouch', 'stand'."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this actor can go to the given stance.",
        "example": "if ( self IsStanceAllowed( \"stand\" ) )..."
    },
    "1484": {
        "fuction_name": "IsSuppressed",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this actor is in a suppressed state ( under fire ).",
        "example": "while ( self IsSuppressed() )..."
    },
    "1485": {
        "fuction_name": "IsSuppressionWaiting",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks whether this actor is still doing suppression wait.",
        "example": "while ( self IsSuppressionWaiting() )..."
    },
    "1486": {
        "fuction_name": "IsThreateningMyProtectEntity",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "target": "(sentient) The sentient to check."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the enemy is currently threatening my protect entity.",
        "example": "if ( self IsThreateningMyProtectEntity( self.enemy ) )"
    },
    "1487": {
        "fuction_name": "Knockback",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "true/false": "if true, actor affected by knockback"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Turn knockback on and off for an actor",
        "example": "self Knockback( true )"
    },
    "1488": {
        "fuction_name": "LastKnownPos",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "target": "(sentient) The sentient to check."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return the last known pos of an AI.",
        "example": "if ( self lastKnownPos( player ) )"
    },
    "1489": {
        "fuction_name": "LastKnownTime",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "target": "(sentient) The sentient to check."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return the last time an AI was aware of target. Includes visibility and ai events like footstep, gunshot etc.",
        "example": "if( self lastKnownTime( player ) )"
    },
    "1490": {
        "fuction_name": "LerpPosition",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "origin": "(vector) the position to interpolate to.",
            "angles": "(vector) the angles to interpolate to."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Interpolate an actor's position, and angles.",
        "example": "self LerpPosition( entry['origin'], entry['angles'] )"
    },
    "1491": {
        "fuction_name": "MayMoveFromPointToPoint",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "start": "(point) start position.",
            "end": "(point) end position."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check whether the actor can move from a given point to a given point. Does not check friendly fire and in goal radius unlike maymovetopoint",
        "example": "if ( !self MayMoveFromPointToPoint( startPoint endPoint ) )..."
    },
    "1492": {
        "fuction_name": "MayMoveToPoint",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "position": "(point) The position that the actor may be able to move to."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check whether the actor can move to a given point.",
        "example": "if ( !self MayMoveToPoint( endPoint ) )..."
    },
    "1493": {
        "fuction_name": "Melee",
        "return_type": "entity",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Makes this actor melee attack. Returns the entity hit, if any.",
        "example": "guy Melee()"
    },
    "1494": {
        "fuction_name": "MeleeWithOffset",
        "return_type": "entity",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "offset": "A vector offset added to the actor's eye position from which to start the melee trace."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Makes this actor melee attack. Returns the entity hit, if any.",
        "example": "guy MeleeWithOffset( (0,0,32) )"
    },
    "1495": {
        "fuction_name": "NearClaimNode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Determine whether this actor is near its claim node.",
        "example": "if ( ai NearClaimNode() )..."
    },
    "1496": {
        "fuction_name": "NearClaimNodeAndAngle",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Determine whether this actor is near its claim node and nearly matches the angle.",
        "example": "if ( ai NearClaimNodeAndAngle() )..."
    },
    "1497": {
        "fuction_name": "NearNode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "node": "The path node to check."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Determine whether this actor is near to a given path node.",
        "example": "if ( ai NearNode( node ) )..."
    },
    "1498": {
        "fuction_name": "OrientMode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "orient mode": "(const string) OrientMode must be 'face angle', 'face current', 'face direction', 'face enemy', 'face enemy or motion', 'face goal', 'face motion', 'face point', or 'face default'"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the orient mode of this actor.",
        "example": "randAlly OrientMode(\"face direction\", player.origin-randAlly.origin )"
    },
    "1499": {
        "fuction_name": "PathMode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "path mode": "(const string) PathMode must be 'dont move', 'move allowed', or 'move delayed'"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the path mode of this actor.",
        "example": "randAlly PathMode(\"dont move\")"
    },
    "1500": {
        "fuction_name": "PickUpGrenade",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Pick up a grenade",
        "example": "self PickUpGrenade()"
    },
    "1501": {
        "fuction_name": "PredictArrival",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Predicts the arrival direction vector using havok corner predictor.",
        "example": null
    },
    "1502": {
        "fuction_name": "PredictExit",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Predicts the exit direction vector using havok corner predictor.",
        "example": "predictedLookAheadInfo = self PredictExit()"
    },
    "1503": {
        "fuction_name": "PredictPath",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Predicts the path to look for upcoming corner using havok corner predictor.",
        "example": "predictedLookAheadInfo = self PredictPath()"
    },
    "1504": {
        "fuction_name": "PushPlayer",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "can push player": "(bool) True if this character can push the player."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set whether this character can push the player. Don't call this unless you know what you are doing.",
        "example": "level.elder PushPlayer( true )"
    },
    "1505": {
        "fuction_name": "ReacquireMove",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Start the reaquire move",
        "example": null
    },
    "1506": {
        "fuction_name": "ReacquireStep",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "dist": "(floating point number) amount to side step left or right"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Do side step move to safe place left or right while facing enemy.",
        "example": "reacquirePos = entity ReacquireStep( step_size )"
    },
    "1507": {
        "fuction_name": "RemoveSentientEventListener",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "De-Registers entity to listen to a specific event. if event is undefined, entity will stop listening to all the evnets.",
        "example": "self RemoveSentientEventListener(\"bulletwhizby\")"
    },
    "1508": {
        "fuction_name": "ResetVisibilityCacheWithinRadius",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "Center of reset bounds",
            "radius": "Distance around the origin to scan for sentients"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Reset the viscache for sentients within the specified radius",
        "example": "ResetVisibilityCacheWithinRadius(origin, 500)"
    },
    "1509": {
        "fuction_name": "SeeRecently",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "target": "(entity) The entity to check.",
            "time": "(int) seconds."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check to see if the AI saw the given sentient in the past <time>. If called on a non-sentient, just does a cansee check",
        "example": "if( self SeeRecently( player ) )"
    },
    "1510": {
        "fuction_name": "SetEntityOwner",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "entity": "An entity for owner."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set an entity as the AI's owner. The owner will never be targeted.",
        "example": "self SetEntityOwner( vehicle_entity )"
    },
    "1511": {
        "fuction_name": "SetEntityTarget",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "entity": "An entity to target (cannot be server only entity)."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set an entity as the AI's target. This is for special cases only. Do not set AI or player targets with this.",
        "example": "self SetEntityTarget( vehicle_entity, 0.7, \"tag_head\" )"
    },
    "1512": {
        "fuction_name": "SetFixedNodeSafeVolume",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "volume entity": "(entity) The safe volume entity."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set this actor's fixed node safe volume.",
        "example": "self SetFixedNodeSafeVolume( volume )"
    },
    "1513": {
        "fuction_name": "SetFlashBanged",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "flashed": "Whether or not the actor is under the affect of a flashbang."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether an actor is under a flashbang effect.",
        "example": "self SetFlashBanged( true, 0.8 )"
    },
    "1514": {
        "fuction_name": "SetFlashbangImmunity",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "immune": "If the actor can be affected by flashbangs."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether an actor is succeptable to flashbangs.",
        "example": "level.suicideguy SetFlashbangImmunity( true )"
    },
    "1515": {
        "fuction_name": "SetFreeCameraLockOnAllowed",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "allowed": "boolean of whether it is allowed"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether the ai is allowed to be locked onto in the demo free camera",
        "example": null
    },
    "1516": {
        "fuction_name": "SetGoal",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "pos": "/<node>/<entity>/<volume>"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set this AI 's goal. Any of the above function name will work. They all call into SetGoal function internally.",
        "example": "self SetGoal( node )"
    },
    "1517": {
        "fuction_name": "setgoalentity",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "pos": "/<node>/<entity>/<volume>"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set this AI 's goal. Any of the above function name will work. They all call into SetGoal function internally.",
        "example": "self SetGoal( node )"
    },
    "1518": {
        "fuction_name": "setgoalnode",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "pos": "/<node>/<entity>/<volume>"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set this AI 's goal. Any of the above function name will work. They all call into SetGoal function internally.",
        "example": "self SetGoal( node )"
    },
    "1519": {
        "fuction_name": "setgoalpos",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "pos": "/<node>/<entity>/<volume>"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set this AI 's goal. Any of the above function name will work. They all call into SetGoal function internally.",
        "example": "self SetGoal( node )"
    },
    "1520": {
        "fuction_name": "setgoalvolume",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "pos": "/<node>/<entity>/<volume>"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set this AI 's goal. Any of the above function name will work. They all call into SetGoal function internally.",
        "example": "self SetGoal( node )"
    },
    "1521": {
        "fuction_name": "setgoalvolumeauto",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "pos": "/<node>/<entity>/<volume>"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set this AI 's goal. Any of the above function name will work. They all call into SetGoal function internally.",
        "example": "self SetGoal( node )"
    },
    "1522": {
        "fuction_name": "SetIgnoreEnt",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "sentient": "Another sentient entity",
            "ignored": "true/false"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a sentient entity to ignore another specific sentient entity or not",
        "example": "aiGuy SetIgnoreEnt( player, true )"
    },
    "1523": {
        "fuction_name": "SetIgnoreMeGroup",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "ignored group": "(string) ignored group.",
            "ignoring group": "(string) ignoring group."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Make first group ignored by second group",
        "example": "SetIgnoreMeGroup( \"flanking_team\", \"axis\" )"
    },
    "1524": {
        "fuction_name": "SetPersonalIgnore",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "sentient": "Self",
            "enemy": "The enemy to set threat bias for"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "self will not pick enemy as target for the duration",
        "example": "self SetPersonalIgnore( self.enemy, 5 )"
    },
    "1525": {
        "fuction_name": "SetPersonalThreatBias",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "sentient": "Self",
            "enemy": "The enemy to set threat bias for",
            "threatBias": "The threat bias amount"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a personal threat bias for this sentient versus the other sentient.  It lasts for the given duration.",
        "example": "self SetPersonalThreatBias( self.enemy, -1000 )"
    },
    "1526": {
        "fuction_name": "SetPhysParams",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "radius": "size of the actor.",
            "minsz": "min height of the actor.",
            "maxsz": "max height of the actor."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the collision bounds for an actor.",
        "example": "self setPhysParams( 15, 0, 72 )"
    },
    "1527": {
        "fuction_name": "SetPitchOrient",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set pitch orientation",
        "example": "self setPitchOrient()"
    },
    "1528": {
        "fuction_name": "SetPotentialThreat",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "dir": "direction of the threat. This is the angle from which the NPC should expect danger"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "In non-combat situations. This is mostly useful for friendlies.",
        "example": "self SetPotentialThreat( 90 )"
    },
    "1529": {
        "fuction_name": "SetRepairPaths",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "on_off": "true to enable repair paths, false otherwise"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "True allows havok to repath automatically if the AI moves off their predefined path.",
        "example": "self SetRepairPaths( true )"
    },
    "1530": {
        "fuction_name": "SetStairsExitTransform",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the base transform for the exit stairs animation using the current position in the looping anim",
        "example": "self SetStairsExitTransform()"
    },
    "1531": {
        "fuction_name": "SetStealthSight",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "awareness": "\"unaware\", \"low_alert\", \"high_alert\", or \"combat\"",
            "timeDecay": "float value of seconds stealth sight takes to fall off completely (0 for never/infinite)",
            "timeDistMin": "float value of seconds stealth sight takes to grow completely at min range (0 for never/infinite)",
            "timeDistMax": "float value of seconds stealth sight takes to grow completely at max range (0 for never/infinite)",
            "distMin": "float value of the min distance",
            "distMax": "float value of the max distance"
        },
        "optional_parameters": {
            "extendSight": "indicates of sight continues beyond max range at the max rate"
        },
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the parameters for given awarenesslevel of stealth sight when active on an sentient",
        "example": "SetStealthSight( \"high_alert\", 2, 1, 10, 200, 1000 )"
    },
    "1532": {
        "fuction_name": "SetStealthSightAwareness",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the current stealth sight awareness state for this sentient",
        "example": "aiGuy SetStealthSightAwareness( \"unaware\", true )"
    },
    "1533": {
        "fuction_name": "SetStealthSightValue",
        "return_type": "void",
        "called_by": "<sentient>",
        "mandatory_parameters": {
            "otherSentient": "other sentient you want to set the value on this sentient for",
            "newValue": "The new stealth sight value"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the current stealth sight value for this sentient seeing another sentient (floating point from 0.0 to 1.0)",
        "example": "aiGuy SetStealthSightValue( forOtherGuy, 0.5 )"
    },
    "1534": {
        "fuction_name": "SetSteeringMode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "steering mode": "Mode to set."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the steering mode for the actor.  Valid modes are \"normal steering\", \"slow steering\", \"vignette steering\".",
        "example": "self SetSteeringMode( \"slow steering\" )"
    },
    "1535": {
        "fuction_name": "SetThreatBias",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "against group": "(string) threat bias group against.",
            "for group": "(string) threat bias group for.",
            "threat bias": "(int) threat bias value."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set threat bias of second group against first group",
        "example": "SetThreatBias( \"axis\", \"flanking_team\", 120 )"
    },
    "1536": {
        "fuction_name": "SetThreatBiasAgainstAll",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "group": "(string) threat bias group name.",
            "value": "(int) threat bias value."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the threatbias a group has against all others",
        "example": "SetThreatBiasAgainstAll( \"flanking_team\", 120 )"
    },
    "1537": {
        "fuction_name": "SetThreatBiasGroup",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set or clear threat bias group of an AI or player",
        "example": "SetThreatBiasGroup( \"flanking_team\" )"
    },
    "1538": {
        "fuction_name": "Shoot",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Makes this actor shoot.",
        "example": "guy shoot()"
    },
    "1539": {
        "fuction_name": "ShouldFaceMotion",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Determines if the AI should face the motion direction. Use self.faceMotion instead of this except when the AI is just beginning to move.",
        "example": "self ShouldFaceMotion()"
    },
    "1540": {
        "fuction_name": "ShouldHoldGroundAgainstEnemy",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return true if enemy is within pathEnemyFightDist.",
        "example": "if( behaviorTreeEntity ShouldHoldGroundAgainstEnemy() )"
    },
    "1541": {
        "fuction_name": "ShouldStartArrival",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns true/false if actor should start arriving at given node",
        "example": "self ShouldStartArrival()"
    },
    "1542": {
        "fuction_name": "ShouldStartTraversal",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns true/false if actor should start traversal",
        "example": "self ShouldStartTraversal()"
    },
    "1543": {
        "fuction_name": "ShouldUseCoverNode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns true/false if actor is at is safe at cover node and use it as a cover",
        "example": "self ShouldUseCoverNode()"
    },
    "1544": {
        "fuction_name": "StartCoverArrival",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "start pos": "the offset to start the arrival animation from",
            "yaw angles": "the arrival angle"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Runs cover arrival animscript on an actor.",
        "example": "soldier StartCoverArrival( pos, 45 )"
    },
    "1545": {
        "fuction_name": "Teleport",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "position": "(point) The actor's new position."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Teleport the actor to a new position with the given origin and angles.",
        "example": "self Teleport( org, angles )"
    },
    "1546": {
        "fuction_name": "ThreatBiasGroupExists",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "threat bias group name."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if a threat bias group exists",
        "example": "ThreatBiasGroupExists( \"flanking_team\" )"
    },
    "1547": {
        "fuction_name": "TraverseMode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "traverse mode": "(const string) Possible traverse modes are 'gravity', 'nogravity', or 'noclip'"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the traverse mode of this actor.",
        "example": "self TraverseMode( \"nogravity\" )"
    },
    "1548": {
        "fuction_name": "TrimPathtoAttack",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Trims the path to attack.",
        "example": null
    },
    "1549": {
        "fuction_name": "UseCoverNode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "path node": "The path node to use as cover"
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Tells this actor to use the given cover node. This is invalid if the actor's keepclaimednode flag is set. Returns true or false depending on whether the actor can claim the node.",
        "example": "guy UseCoverNode( covernode )"
    },
    "1550": {
        "fuction_name": "UsePosition",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "position": "The position for the actor to run to."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Override where the actor should run to. This overrides the goal pos and the claimed node.",
        "example": "self UsePosition( pos )"
    },
    "1551": {
        "fuction_name": "UseReacquireNode",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "node": "(path node) the node to use."
        },
        "optional_parameters": {},
        "category": "AI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Use the given reacquire node.",
        "example": null
    },
    "1552": {
        "fuction_name": "AddBoltedFXExclusionVolume",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client to create the volume on.",
            "entity": "The entity to attach the volume to.",
            "tag name": "The tag to use as the volume's origin.",
            "half extents": "The half extents of the volume."
        },
        "optional_parameters": {
            "offset": "An offset from the tag name for the volume's origin; default is 0 0 0."
        },
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Create a bolted volume that will exclude FX that are flagged as \"Respect Exclusion Volumes\". Returns volume ID.",
        "example": "volumeID = AddBoltedFXExclusionVolume( 0, entity, tag_origin, (10, 10, 10) )"
    },
    "1553": {
        "fuction_name": "AddDuplicateRenderOption",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "dupeType": "this is one of [DR_TYPE_FRAMEBUFFER|DR_TYPE_FRAMEBUFFER_DUPLICATE|DR_TYPE_OFFSCREEN], as defined in _duplicaterender.csc. Sets the duplicate type of this call",
            "dupeMethod": "this is one of [DR_CULL_ALWAYS|DR_CULL_NEVER], as defined in _duplicaterender.csc. Sets the render method of this call"
        },
        "optional_parameters": {
            "mappedMaterialId": "This is the mapped material id",
            "dupeCull": "this is one of [DR_METHOD_OFF|DR_METHOD_DEFAULT_MATERIAL|DR_METHOD_THERMAL_MATERIAL|DR_METHOD_CUSTOM_MATERIAL|DR_METHOD_FORCE_CUSTOM_MATERIAL], as defined in _duplicaterender.csc. Sets the render method of this call"
        },
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Add a duplicate render option for the entity",
        "example": "myEnt AddDuplicateRenderOption( DR_TYPE_FRAMEBUFFER, DR_METHOD_THERMAL_MATERIAL, DR_CULL_ALWAYS )myEnt AddDuplicateRenderOption( DR_TYPE_OFFSCREEN, DR_METHOD_CUSTOM_MATERIAL, DR_CULL_NEVER, mapped_material_id(player,\"gfx_my_material_2\") )"
    },
    "1554": {
        "fuction_name": "AddFXExclusionVolume",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client to create the volume on.",
            "center": "The center of the volume.",
            "angles": "The rotation angles of the volume.",
            "half extents": "The half extents of the volume."
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Create a volume that will exclude FX that are flagged as \"Respect Exclusion Volumes\". Returns volume ID.",
        "example": "volumeID = AddFXExclusionVolume( 0, (0,0,0), (0, 45, 0), (10, 10, 10) )"
    },
    "1555": {
        "fuction_name": "BeamKill",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client on which to play the beam",
            "beam handle": "The beam handle"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Kill the previously launched beam.",
        "example": "BeamKill(0, beamHandle)"
    },
    "1556": {
        "fuction_name": "BeamLaunch",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client on which to play the beam",
            "entity from": "The originating entity",
            "tag from": "The tag on the originating entity to start from",
            "entity to": "The target entity",
            "tag to": "The target tag",
            "beam": "The beam"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Launch this beam and return the internal handle.",
        "example": "handle = BeamLaunch(0, launcher, launcherTag, target, targetTag, beam)"
    },
    "1557": {
        "fuction_name": "BulletTracer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start": "The starting point bullet tracer",
            "end": "The end point bullet tracer"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "creates a bullet tracer from the start to end point",
        "example": "BulletTracer(self.origin, target.origin)"
    },
    "1558": {
        "fuction_name": "CaptureFrame",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "name": "The code image name"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Captures the current frame into the given code image - he image had to be already created with CreateSceneCodeImage()",
        "example": "CaptureFrame( self.localClientNum, \"freezeFrame\" )"
    },
    "1559": {
        "fuction_name": "ClearExtraCam",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Finds the extracam associated with an entity and removes it",
        "example": "cameraEnt ClearExtraCam()"
    },
    "1560": {
        "fuction_name": "codeplaypostfxbundle",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Displays a postfx on the screen ",
        "example": "entity PlayPostfxBundle( \"myBundle\" )"
    },
    "1561": {
        "fuction_name": "codestoppostfxbundle",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Ends a postfx ",
        "example": "entity StopPostfxBundle( 2 )"
    },
    "1562": {
        "fuction_name": "CreateSceneCodeImage",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "name": "A unique name"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Creates a scene size code image",
        "example": "CreateSceneCodeImage( self.localClientNum, \"freezeFrame\" )"
    },
    "1563": {
        "fuction_name": "DeleteFX",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "client on which to spawn effect.",
            "effect id": "The effect id returned by spawnfx"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Delete a spawned effect.",
        "example": "deletefx (0, fxRef)"
    },
    "1564": {
        "fuction_name": "DisableDuplicateRendering",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Disables duplicate rendering for the entity",
        "example": "entity DisableDuplicateRendering()"
    },
    "1565": {
        "fuction_name": "EnableFrontendLockedWeaponOverlay",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "enable": "0-disable 1-enable"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enable or disable the draw of the locked gun postfx in script.",
        "example": "entity EnableFrontendLockedWeaponOverlay( 0, 0 )"
    },
    "1566": {
        "fuction_name": "EnableFrontendStreamingOverlay",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "enable": "0-disable 1-enable"
        },
        "optional_parameters": {
            "extracam": "0-disable 1-enable - when enabled the overlay is drawn on extracam"
        },
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enable or disable the draw of an alternate draw mode for high detail entities marked to use alt draw",
        "example": "entity EnableFrontendStreamingOverlay( 0, 0 )"
    },
    "1567": {
        "fuction_name": "EnableFrontendTokenLockedWeaponOverlay",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "enable": "0-disable 1-enable"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enable or disable the draw of the purchaseable gun postfx in script.",
        "example": "entity EnableFrontendTokenLockedWeaponOverlay( 0, 0 )"
    },
    "1568": {
        "fuction_name": "EnableThermalDraw",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "enable": "true/false"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enables or disables the drawing entities into the thermal buffer",
        "example": "EnableThermalDraw( player.localClientNum, true )"
    },
    "1569": {
        "fuction_name": "EVEnable",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enable or disable ev mode",
        "example": "entity EVEnable( 1 )"
    },
    "1570": {
        "fuction_name": "EvStatus",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client to find the status of"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "returns the status of EV",
        "example": "status = EVStatus( 1 )"
    },
    "1571": {
        "fuction_name": "FindStaticModelIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "vector pos": "The position to match to the static model origin or <string targetname> for the targetname of the static model"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns an index of a static model whose origin matches the passed in position",
        "example": "smodelIndex = FindStaticModelIndex()"
    },
    "1572": {
        "fuction_name": "FindStaticModelIndexArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string targetname": "The targetname of the static model's"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns an array indices of a static model whose name matches the passed in string",
        "example": "smodelIndexArray = FindStaticModelIndex()NOTES:  This function is potentially very expensive to call.  And, since it can directly impact frame rate due to it running on the client side, you should pre-cache the results during level init and use the results when needed rather than calling at that moment."
    },
    "1573": {
        "fuction_name": "FindVolumeDecalIndexArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string targetname": "The targetname of the volume decal"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns an array indices of a volume decal whose targetname matches the passed in string",
        "example": "vdIndexArray = FindVolumeDecalIndexArray( \"foo\" )NOTES:  This function is potentially very expensive to call.  And, since it can directly impact frame rate due to it running on the client side, you should pre-cache the results during level init and use the results when needed rather than calling at that moment."
    },
    "1574": {
        "fuction_name": "FreeCodeImage",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "name": "A unique name"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Frees a code image",
        "example": "FreeCodeImage( self.localClientNum, \"freezeFrame\" )"
    },
    "1575": {
        "fuction_name": "GetCameraSpikeCamStatic",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the camera-spike cam owner"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns 1 if a client sees static on the camera-spike cam, 0 otherwise",
        "example": "GetCameraSpikeCamStatic( localClientNum )"
    },
    "1576": {
        "fuction_name": "GetFXFromSurfaceTable",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "surfacefxtable": "Surface fx table.",
            "surface type": "Surface type"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the fx for a given surface type from the surfacefxtable.",
        "example": "fx = GetFXFromSurfaceTable( fx_surface_table, surface_type )"
    },
    "1577": {
        "fuction_name": "GetServerVolumetricFogDensity",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Get the density of server volumetric fog",
        "example": null
    },
    "1578": {
        "fuction_name": "GetSurfaceStrings",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns an array containing all the surface names",
        "example": "surfaceStringArray = GetSurfaceStrings()"
    },
    "1579": {
        "fuction_name": "GetVisionSetNaked",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client which will have his vampire vision set changed"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets players' naked vision.",
        "example": "GetVisionSetNaked( 0 )"
    },
    "1580": {
        "fuction_name": "GetWorldFogScriptID",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "the local client"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "current active .fsi fog volumes script identity value -1 = global volume.",
        "example": null
    },
    "1581": {
        "fuction_name": "HideStaticModel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "smodelIndex": "The index of the static model to toggle"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Hide a static model",
        "example": "HideStaticModel( model )"
    },
    "1582": {
        "fuction_name": "HideVolumeDecal",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "volume decal Index": "The index of the volume decal to toggle"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Hide a static model",
        "example": "HideStaticModel( model )"
    },
    "1583": {
        "fuction_name": "IGCActive",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client on which the igc is running",
            "enable": "1-enables, 0-disables"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Flags if an IGC is on or off",
        "example": "IGCActive( 1, 1 )"
    },
    "1584": {
        "fuction_name": "IsFXPlaying",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client the effect is playing on.",
            "effect id": "The effect id returned by playFx"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Return true if effect is still playing.",
        "example": "IsFXPlaying ( fxId )"
    },
    "1585": {
        "fuction_name": "IsIGCActive",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client to find the status of"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "returns the status of EV",
        "example": "status = IsIGCActive( 1 )"
    },
    "1586": {
        "fuction_name": "IsStereoOn",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if the stereo is on",
        "example": "isStereo = IsStereoOn()"
    },
    "1587": {
        "fuction_name": "KillFX",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client the effect is playing on.",
            "effect id": "The effect id returned by playFx"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Force kills a given fx.",
        "example": "KillFX ( fxId )"
    },
    "1588": {
        "fuction_name": "KillRadiantExploder",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client to play the effect on",
            "exploderId": "The id of the exploder to be stopped."
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Kill the specified Radiant exploder",
        "example": "KillRadiantExploder( 0, \"lights_on_exploder\" )"
    },
    "1589": {
        "fuction_name": "MakeLight",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "primaryLightIndex": "The Primary Light Index"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Create a light",
        "example": "self MakeLight(1)"
    },
    "1590": {
        "fuction_name": "MapMaterialIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client on which to map the material",
            "materialName": "Material to map"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Maps the material to an index",
        "example": "index = MapMaterial(1, \"mymaterial\")"
    },
    "1591": {
        "fuction_name": "MotionPulse_Enable",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "enable": "true to enable /false to disable"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enable or disable the sitrep scan",
        "example": "entity motionpulse_enable( false )"
    },
    "1592": {
        "fuction_name": "MotionPulse_SetDesat",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "level": "The desat level (float)"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the motion pulse desaturation level",
        "example": "entity motionpulse_setdesat( level )"
    },
    "1593": {
        "fuction_name": "MotionPulse_SetFadeOut",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "fadeout": "The fadeout (float)"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the motion pulse fadeout",
        "example": "entity MotionPulse_SetFadeOut( fadeout )"
    },
    "1594": {
        "fuction_name": "MotionPulse_SetFalloff",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "falloff": "the falloff (float)"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the motion pulse falloff",
        "example": "entity motionpulse_setfalloff( falloff )"
    },
    "1595": {
        "fuction_name": "MotionPulse_SetLineWidth",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "linewidth": "the line width (float)"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the motion pulse line width",
        "example": "entity motionpulse_setlinewidth( linewidth )"
    },
    "1596": {
        "fuction_name": "MotionPulse_SetOutline",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "outlinelevel": "the outline level (float)"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the motion pulse outline level",
        "example": "entity motionpulse_setoutline( outlinelevel )"
    },
    "1597": {
        "fuction_name": "MotionPulse_SetRadius",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "radius": "the radius (float)"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the motion pulse radius",
        "example": "entity motionpulse_setradius( radius )"
    },
    "1598": {
        "fuction_name": "MotionPulse_SetSolid",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "level": "The solid level (float)"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the motion pulse solid level",
        "example": "entity motionpulse_setsolid( level )"
    },
    "1599": {
        "fuction_name": "OED_NightVision_Enable",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "enable": "true/false"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": null,
        "example": "entity oed_nightvision_enable( false )"
    },
    "1600": {
        "fuction_name": "OED_NightVision_Reset",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Reset nightvision for entity",
        "example": "entity oed_nightvision_reset()"
    },
    "1601": {
        "fuction_name": "OED_NightVision_SetTextureLevel",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "level": "The texture level (float)"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the night vision texture level for the entity",
        "example": "entity oed_nightvision_settexturelevel( level )"
    },
    "1602": {
        "fuction_name": "OED_SitRepScan_Enable",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "type": "0-disable 1-typeA 2-typeB"
        },
        "optional_parameters": {
            "AlphaType": "0-default 1-Alpha ( 0 by default )"
        },
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enable or disable the sitrep scan",
        "example": "entity oed_sitpepscan_enable( 0 )"
    },
    "1603": {
        "fuction_name": "OED_SitRepScan_SetDesat",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "level": "the desat level (float)"
        },
        "optional_parameters": {
            "AlphaType": "0-default 1-Alpha ( 0 by default )"
        },
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the desaturation level for the sitrep scan",
        "example": "entity oed_sitrepscan_setdesat( level )"
    },
    "1604": {
        "fuction_name": "OED_SitRepScan_SetFalloff",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "falloff": "The falloff (float)"
        },
        "optional_parameters": {
            "AlphaType": "0-default 1-Alpha ( 0 by default )"
        },
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the falloff for the sitrep scan",
        "example": "entity oed_sitrepscan_setfalloff( falloff )"
    },
    "1605": {
        "fuction_name": "OED_SitRepScan_SetLineWidth",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "linewidth": "The line width (float)"
        },
        "optional_parameters": {
            "AlphaType": "0-default 1-Alpha ( 0 by default )"
        },
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the line width for the sitrep scan",
        "example": "entity oed_sitrepscan_setlinewidth( linewidth )"
    },
    "1606": {
        "fuction_name": "OED_SitRepScan_SetOutline",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "outlinelevel": "The outline level (float)"
        },
        "optional_parameters": {
            "AlphaType": "0-default 1-Alpha ( 0 by default )"
        },
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the outline level for the sitrep scan",
        "example": "entity oed_sitrepscan_setoutline( outlinelevel )"
    },
    "1607": {
        "fuction_name": "OED_SitRepScan_SetRadius",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "radius": "The radius (float)"
        },
        "optional_parameters": {
            "AlphaType": "0-default 1-Alpha ( 0 by default )"
        },
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the radius for the sitrep scan",
        "example": "entity oed_sitrepscan_setradius( radius )"
    },
    "1608": {
        "fuction_name": "OED_SitRepScan_SetSolid",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "level": "the solid level (float)"
        },
        "optional_parameters": {
            "AlphaType": "0-default 1-Alpha ( 0 by default )"
        },
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the solid level for the sitrep scan",
        "example": "entity oed_sitrepscan_setsolid( level )"
    },
    "1609": {
        "fuction_name": "PlayExtraCamXCam",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "xcam name": "The name of the xcam asset to play"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Plays an XCam on the extra cam associated with the entity starting at the current client time",
        "example": "cameraEnt PlayExtraCamXCam( \"ui_cam_ar_standard\" )"
    },
    "1610": {
        "fuction_name": "PlayFXOnDynEnt",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "effect id": "The effect id returned by loadfx",
            "dynent": "The dyn entity to play the effect on"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Play this effect and return the internal handle.",
        "example": "handle = PlayFXOnDynEnt( spark, lamp )"
    },
    "1611": {
        "fuction_name": "PlayMainCamXCam",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client",
            "xcam name": "The name of the xcam asset to play"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Plays an XCam on the main camera associated with the player starting at the current client time",
        "example": "PlayMainCamXCam( localClientNum, \"ui_cam_ar_standard\" )"
    },
    "1612": {
        "fuction_name": "PlayRadiantExploder",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client to play the effect on",
            "exploderId": "The id of the exploder to be triggered."
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Play the specified Radiant exploder",
        "example": "PlayRadiantExploder( 0, \"lights_on_exploder\" )"
    },
    "1613": {
        "fuction_name": "PlayRenderOverrideBundle",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Applys a render override bundle to an entitys model ",
        "example": "entity PlayRenderOverrideBundle( \"myBundle\" )"
    },
    "1614": {
        "fuction_name": "PlayTagFXSet",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client on which to play the fx",
            "tagfxset": "The string name of the tag fx set",
            "entity": "The entity to play the effect on"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Play a tagfx set on ajn entity. Do not specify loop fx",
        "example": "PlayTagFXSet ( 0, self, smoke )"
    },
    "1615": {
        "fuction_name": "PlayViewmodelFX",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "local_client_num": "The client number",
            "name": "The name of the fx",
            "tag": "The tag to play on"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": null,
        "example": null
    },
    "1616": {
        "fuction_name": "RandomFade",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "level": "0 to disable, any other value to enable (float)"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Fade the level randomly",
        "example": "entity randomfade( level )"
    },
    "1617": {
        "fuction_name": "RegisterRewindFX",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "local_client_num": "The client number",
            "name": "The name of the fx"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Registers an fx with the killcam rewind system",
        "example": "RegisterRewindFX(local_client_num, \"fxName\")"
    },
    "1618": {
        "fuction_name": "RemoveFXExclusionVolume",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client to remove the volume from.",
            "volumeID": "The volume to remove."
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Removes the given exclusion volume.",
        "example": "RemoveFXExclusionVolume( 0, volumeID )"
    },
    "1619": {
        "fuction_name": "SetAllowXCamRightStickRotation",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client",
            "newValue": "True to allow, False, to disable right stick rotation"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Prevent or stop preventing right stick rotation on this xcam (the next playmaincamxcam resets this)",
        "example": "SetAllowXCamRightStickRotation( 0, false )"
    },
    "1620": {
        "fuction_name": "SetArmPulse",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets arm pulse override values",
        "example": "entity SetArmPulse( 2.0, 4, 3 )"
    },
    "1621": {
        "fuction_name": "SetArmPulsePosition",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets arm pulse override values",
        "example": "entity SetArmPulsePosition( 0.5 )"
    },
    "1622": {
        "fuction_name": "SetCameraSpikeCamActive",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the extra cam owner",
            "active": "0 if inactive, 1 if active"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets whether a client's camera-spike cam is active.",
        "example": "SetCameraSpikeCamActive( localClientNum, 1 )"
    },
    "1623": {
        "fuction_name": "SetCameraSpikeCamAngles",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the camera-spike cam owner",
            "angles": "New pitch, yaw, and roll of the camera-spike cam"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the orientation of a client's extra cam.",
        "example": "SetCameraSpikeCamAngles( localClientNum, angles )"
    },
    "1624": {
        "fuction_name": "SetCameraSpikeCamEntity",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the extra cam owner",
            "entity": "Camera entity, or undefined"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets an camera-spike cam entity for the client.",
        "example": "CScr_SetCameraSpikeCamEntity( localClientNum, cameraSpike )"
    },
    "1625": {
        "fuction_name": "SetCameraSpikeCamOrigin",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the camera-spike cam owner",
            "origin": "New origin of the camera-spike cam"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the origin of a client's camera-spike cam",
        "example": "SetCameraSpikeCamOrigin( localClientNum, origin )"
    },
    "1626": {
        "fuction_name": "SetCameraSpikeCamStatic",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Client number of the camera-spike cam owner",
            "active": "0 if inactive, 1 if active"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets whether a client sees static on the camera-spike cam",
        "example": "SetCameraSpikeCamStatic( localClientNum, 1 )"
    },
    "1627": {
        "fuction_name": "SetClientVolumetricFog",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "startDist": "The start distance of the volume",
            "halfwayDist": "The halfway distance of the volume",
            "halfwayHeight": "The halfway height of the volume",
            "baseHeight": "The base height of the volume",
            "red": "The red value",
            "green": "The green value",
            "blue": "The blue value",
            "fogColorScale": "The color scale of the fog"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the client volumetric fog properties",
        "example": null
    },
    "1628": {
        "fuction_name": "SetExposureActiveBank",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "the local client",
            "bank mask": "The new bank mask"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set exposure volumes active bank bit mask.",
        "example": "SetExposureActiveBank( localClientNum, 2 )"
    },
    "1629": {
        "fuction_name": "SetExposureIgnoreTeleport",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "the local client",
            "enable": "Enable or disable the exposure always adapt flag"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Always do fully adaptive exposure and ignore teleports",
        "example": "SetExposureIgnoreTeleport( localClientNum, newVal )"
    },
    "1630": {
        "fuction_name": "SetExposureInstantSnap",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "the local client",
            "enable": "Enable or disable the exposure snap"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "snap exposure to base calculated probe value, ignore iris adaption and damping",
        "example": "SetExposureInstantSnap( localClientNum, newVal )"
    },
    "1631": {
        "fuction_name": "SetExtraCam",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "camera index": "which extra cam references this entity. Valid values are 0 - 3"
        },
        "optional_parameters": {
            "rendered width": "Width of the extra cam rendered target. The width will be calculated from the height if width is negative (keeping the aspect ration at 16:9)",
            "rendered height": "Height of the extra cam rendered target. The height will be calculated from the width if height is negative (keeping the aspect ration at 16:9)"
        },
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Activates the extra cam and sets the given entity as cam reference.",
        "example": "cameraEnt SetExtraCam( 1, 640, 480 )"
    },
    "1632": {
        "fuction_name": "SetExtraCamFocalLength",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "camera index": "which extra cam references this entity. Valid values are 0 - 3",
            "fov": "camera fov"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the extra cam fov",
        "example": "cameraEnt SetExtraCamFOV( 1, 65 )"
    },
    "1633": {
        "fuction_name": "SetFilterBitFlag",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "filterIndex": "Must be between 0 - 3",
            "bitIndex": "Must be between 0 - 31",
            "setOrClear": "Must be between 0 - 1"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set or clear the filter bit flag",
        "example": "SetFilterBitFlag( self.localClientNum, 1, 10 )"
    },
    "1634": {
        "fuction_name": "SetFilterPassCodeTexture",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "filterIndex": "Must be between 0 - 3",
            "passIndex": "Must be between 0 - 15",
            "texture Index": "Must be between 0 - 1",
            "texture name": "has to have been created by captureFrame() before - if empty string sets to null."
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets a code texture for a filter pass - the tetxure has be to created beforehand",
        "example": "SetFilterPassMaterial( self.localClientNum, 1, 12, 0, \"myBundle\")"
    },
    "1635": {
        "fuction_name": "SetFilterPassConstant",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "filterIndex": "Must be between 0 - 3",
            "passIndex": "Must be between 0 - 16",
            "constantIndex": "Must be between 0 - 16",
            "value": "The value for the constant"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the filter pass constant",
        "example": "SetFilterPassConstant( self.localClientNum, 1, 12, 12, 2.5 )"
    },
    "1636": {
        "fuction_name": "SetFilterPassEnabled",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "filterIndex": "Must be between 0 - 3",
            "passIndex": "Must be between 0 - 16",
            "passEnable": "true/false"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the filter pass enabled or disabled",
        "example": "SetFilterPassEnabled( self.localClientNum, 1, 12, false)"
    },
    "1637": {
        "fuction_name": "SetFilterPassMaterial",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "filterIndex": "Must be between 0 - 3",
            "passIndex": "Must be between 0 - 15",
            "materialIndex": "Must be between 0 - 63"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the filter pass material",
        "example": "SetFilterPassMaterial( self.localClientNum, 1, 12, 20 )"
    },
    "1638": {
        "fuction_name": "SetFilterPassQuads",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "filterIndex": "Must be between 0 - 3",
            "passIndex": "Must be between 0 - 16",
            "passQuads": "Must be between 0 - 2048"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets the filter pass quads",
        "example": "SetFilterPassQuads( self.localClientNum, 1, 12, 200)"
    },
    "1639": {
        "fuction_name": "SetFXIgnorePause",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client the effect is playing on.",
            "effect id": "The effect id returned by playFx",
            "ignore pause": "Whether or not to respect a paused world state."
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Tells an effect whether or not to respect a paused world state.",
        "example": "SetFXIgnorePause( localClientNum, fxId, 1 )"
    },
    "1640": {
        "fuction_name": "SetFXOutdoor",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client the effect is playing on.",
            "effect id": "The effect id returned by playFx"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Flag the FX as one that only plays outdoors.",
        "example": "SetFXOutdoor( fxId )"
    },
    "1641": {
        "fuction_name": "SetFXTeam",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client on which to play the fx",
            "effect handle ": "The handle from the created fx",
            "entity or team": "The team"
        },
        "optional_parameters": {
            "invert team": "Treat the team as the one to show the enemy fx for."
        },
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the team of the fx either by team or by entity which has a team set.",
        "example": "handle = SetFXTeam(localClientNum, fxHandle, owner)"
    },
    "1642": {
        "fuction_name": "SetGenericSceneValue",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client number.",
            "index": "The scene vector index ( 0 - 15 )",
            "value": "Some generic float used by SW shaders."
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets one of the 16 generic scene vectors used by SW shaders.",
        "example": "SetGenericSceneValue(0, 20)"
    },
    "1643": {
        "fuction_name": "SetHotZone",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets HotZone control values",
        "example": "entity SetHotZone( 100, 1000, 5.0, 3.0, 0.5, 50  )"
    },
    "1644": {
        "fuction_name": "SetLitFogBank",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client",
            "scriptid": "Volume identifier set in Radiant. (0-255). -1 = all.",
            "bank": "Bank selection (0-3).",
            "time": "Time in seconds to make the transition over. -1 to use the 'fogtime' parameter set in the volume."
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets which bank to use for all lit fog volumes with matching script id",
        "example": "SetLitFogBank( 0, 1, 5.0 )"
    },
    "1645": {
        "fuction_name": "SetLutScriptIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "the local client",
            "lut index": "The lut index"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set lut index from script.",
        "example": "SetLutScriptIndex( lcn, 2 )"
    },
    "1646": {
        "fuction_name": "SetLutVolumeActiveBank",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "the local client",
            "bank mask": "The new bank mask"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set lut volumes active bank bit mask.",
        "example": "SetLutVolumeActiveBank( localClientNum, 2 )"
    },
    "1647": {
        "fuction_name": "SetOverlayConstant",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "overlayIndex": "Must be between 0 - 3",
            "constantIndex": "Must be between 0 - 16",
            "value": "The value to set"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the overlay constant",
        "example": "SetOverlayConstant( self.lcoalClientNum, 2, 5, 1.4 )"
    },
    "1648": {
        "fuction_name": "SetOverlayEnabled",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "overlayIndex": "Must be between 0 - 3",
            "enable": "true/false"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enables or disables the overlay",
        "example": "SetOverlayEnabled( self.localClientNum, 2, false )"
    },
    "1649": {
        "fuction_name": "SetOverlayMaterial",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "overlayIndex": "Must be between 0 - 3",
            "materialIndex": "Must be between 0 - 63",
            "sortIndex": "Must be between 0 - 2"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the overlay material",
        "example": "SetOverlayMaterial( self.localClientNum, 2, 20, 1 )"
    },
    "1650": {
        "fuction_name": "SetPBGActiveBank",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "the local client",
            "bank mask": "The bank bit mask"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set PBG bank mask from script.",
        "example": "SetPBGActiveBank( lcn, 1 )"
    },
    "1651": {
        "fuction_name": "SetRimIntensity",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client number.",
            "rimIntensity": "Character skin/cloth rim intensity."
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Global character skin/cloth rim lighting intensity.",
        "example": "SetRimIntensity(0, 20)"
    },
    "1652": {
        "fuction_name": "SetRippleWave",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "client": "The local client",
            "center xpos": "The x coord",
            "center ypos": "The y coord",
            "width": "The width of the wave",
            "speed scale": "The speed modifier",
            "amplitude width ratio": "The amplitude",
            "fade in start": "The fade in at start",
            "fade in end": "The fade in at the end",
            "fade out start": "The fade out at start",
            "fade out end": "The fade out at the end"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Trigger vertex ripple wave for material set to use it.",
        "example": "setripplewave( 0, 100.0, 100.0, 200.0, 1.0, 1.0, 0.0, 250.0, 1000.0, 1500.0 )"
    },
    "1653": {
        "fuction_name": "SetServerVolumetricFogDensity",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client number",
            "density": "The density to set",
            "time": "The time to lerp to the new value"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the density of server volumetric fog",
        "example": null
    },
    "1654": {
        "fuction_name": "SetUkkoScriptIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "the local client",
            "ukko index": "The ukko index",
            "ukko blend": "The ukko index blend amount"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set ukko index from script.",
        "example": "SetUkkoScriptIndex( lcn, 2, 1.0 )"
    },
    "1655": {
        "fuction_name": "StartWaterSheetingFX",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client on which to play the fx"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Play a fullscreen water effect.",
        "example": "StartWaterSheetingFX(localClientNum, 8)"
    },
    "1656": {
        "fuction_name": "StopExtraCamXCam",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Stops an XCam on the extra cam associated with the entity",
        "example": "cameraEnt StopExtraCamXCam()"
    },
    "1657": {
        "fuction_name": "StopFX",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client the effect is playing on.",
            "effect id": "The effect id returned by playFx"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Stops a given fx.",
        "example": "StopFX ( fxId )"
    },
    "1658": {
        "fuction_name": "StopMainCamXCam",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Stops an XCam on the main cam associated with the entity",
        "example": "StopMainCamXCam( 0 )"
    },
    "1659": {
        "fuction_name": "StopRadiantExploder",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client to play the effect on",
            "exploderId": "The id of the exploder to be stopped."
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Stop the specified Radiant exploder",
        "example": "StopRadiantExploder( 0, \"lights_on_exploder\" )"
    },
    "1660": {
        "fuction_name": "StopRenderOverrideBundle",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Ends a Render Override Bundle",
        "example": "entity StopRenderOverrideBundle()"
    },
    "1661": {
        "fuction_name": "StopWaterSheetingFX",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client on which to play the fx"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Stop the fullscreen water effect",
        "example": "StopWaterSheetingFX( localClientNum, 1 )"
    },
    "1662": {
        "fuction_name": "SwitchToClientVolumetricFog",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Switch to the client volumetric fog",
        "example": null
    },
    "1663": {
        "fuction_name": "SwitchToServerVolumetricFog",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Switch to the server volumetric fog",
        "example": null
    },
    "1664": {
        "fuction_name": "TmodeClearFlag",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Clears flag bit for tmode.",
        "example": "entity TmodeClearFlag( 2 )"
    },
    "1665": {
        "fuction_name": "TmodeEnable",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enable or disable tactical mode",
        "example": "entity TmodeEnable( 1 )"
    },
    "1666": {
        "fuction_name": "TmodeSetFlag",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets flag bit for tmode.",
        "example": "entity TmodeSetFlag( 1 )"
    },
    "1667": {
        "fuction_name": "TmodeStatus",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client to find the status of"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "returns the status of tmode",
        "example": "status = TmodeStatus( 1 )"
    },
    "1668": {
        "fuction_name": "umbra_clearpersistenttometrigger",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "clears the current tome trigger that persisted due to touching a prior tome trigger",
        "example": "umbra_clearpersistenttometrigger( localClientNum )"
    },
    "1669": {
        "fuction_name": "Umbra_SetAccurateOcclusionThreshold",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set Umbra Accurate Occlusion Threshold parameter",
        "example": "Umbra_SetAccurateOcclusionThreshold( localClientNum, 2048 )"
    },
    "1670": {
        "fuction_name": "Umbra_SetDistanceScale",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set Umbra Distance Scale parameter",
        "example": "Umbra_SetDistanceScale( localClientNum, 2.0 )"
    },
    "1671": {
        "fuction_name": "Umbra_SetMinimumContributionThreshold",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set Umbra Accurate Occlusion Threshold parameter",
        "example": "Umbra_SetAccurateOcclusionThreshold( localClientNum, 8 )"
    },
    "1672": {
        "fuction_name": "umbra_settometrigger",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "tometrigger name": "name of a tome trigger. Use empty string \"\" to deactivate tome triggers"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets current active tome trigger",
        "example": "Umbra_SetTomeTrigger( localClientNum, \"my_really_cool_tome_trigger\" )"
    },
    "1673": {
        "fuction_name": "umbra_settometriggeronce",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "",
            "tometrigger name": "name of a tome trigger. Use empty string \"\" to deactivate tome triggers"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set the active tome trigger without interferring with any other tome logic.",
        "example": "Umbra_SetTomeTriggerOnce( localClientNum, \"my_really_cool_tome_trigger\" )"
    },
    "1674": {
        "fuction_name": "UnhideStaticModel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "smodelIndex": "The index of the static model to toggle"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Unhide a static model",
        "example": "UnhideStaticModel( model )"
    },
    "1675": {
        "fuction_name": "UnhideVolumeDecal",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "volume decal Index": "The index of the volume decal to toggle"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Unhide a static model",
        "example": "UnhideStaticModel( model )"
    },
    "1676": {
        "fuction_name": "VisionSetLastStandLerp",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client which will have his vampire vision set changed",
            "vision name to": "Vision to transition to.",
            "vision name from": "Vision to transition from.",
            "lerp fraction": "The lerp fraction to use when transitioning to the new vision set if a transition is possible.  Default is one second."
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets players' last stand vision.  Optionally give a transition time from the current vision.",
        "example": "VisionSetLastStandLerp( localClientNum, curr_info.visionset_to, curr_info.visionset_from, state.curr_lerp )"
    },
    "1677": {
        "fuction_name": "VisionSetNakedLerp",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client which will have his vampire vision set changed",
            "vision name to": "Vision to transition to.",
            "vision name from": "Vision to transition from.",
            "lerp fraction": "The lerp fraction to use when transitioning to the new vision set if a transition is possible.  Default is one second."
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets players' naked vision.  Optionally give a transition time from the current vision.",
        "example": "VisionSetNakedLerp( localClientNum, curr_info.visionset_to, curr_info.visionset_from, state.curr_lerp )"
    },
    "1678": {
        "fuction_name": "WeakPoint_Enable",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enable or disable the weakpoint fx",
        "example": "entity weakpoint_enable( 2 )"
    },
    "1679": {
        "fuction_name": "ZombieShooterSpotted",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Local client on which to map the material",
            "enable": "1-enables, 0-disables"
        },
        "optional_parameters": {},
        "category": "Gfx",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Enables the Zombie Shooter Spotted HUD display",
        "example": "ZombieShooterSpotted(1, 1)"
    },
    "1680": {
        "fuction_name": "Abs",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "value": "A float or integer value."
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the absolute value of a float",
        "example": "x = Abs( x )"
    },
    "1681": {
        "fuction_name": "AbsAngleClamp180",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "angles": "Angle to be clamped"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns abs angle value clamped between [0,180].",
        "example": "deltaAngle = AbsAngleClamp180( currentAngle )"
    },
    "1682": {
        "fuction_name": "AbsAngleClamp360",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "angle": "An angle."
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns <angle> as a value in the range of 0 and 360 degrees.",
        "example": "new_angle = AbsAngleClamp360( boatAngles[2] )"
    },
    "1683": {
        "fuction_name": "ACos",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "cos value": "A cosine value"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns an angle corresponding to a particular cosine value",
        "example": "upAngle = ACos( distanceratio )"
    },
    "1684": {
        "fuction_name": "AngleClamp180",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "angles": "Angle to be clamped"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns angle value clamped between [-180,180].",
        "example": "deltaAngle = AngleClamp180( currentAngle )"
    },
    "1685": {
        "fuction_name": "AngleLerp",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "from": "An angle.",
            "to": "An angle.",
            "fraction": "A float from 0-1."
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns <angle> lerped angle value.",
        "example": "180 = AngleLerp( 0, 360, 0.5 )"
    },
    "1686": {
        "fuction_name": "AnglesToForward",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "angles": "A set of angles"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the forward vector corresponding to a set of angles.",
        "example": "forward = AnglesToForward( forward )"
    },
    "1687": {
        "fuction_name": "AnglesToRight",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "angles": "A set of angles"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the right vector corresponding to a set of angles.",
        "example": "right = AnglesToRight(angles)"
    },
    "1688": {
        "fuction_name": "AnglesToUp",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "angles": "A set of angles"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the up vector corresponding to a set of angles.",
        "example": "up = AnglesToUp(angles)"
    },
    "1689": {
        "fuction_name": "ASin",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "sin value": "A sin value"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns an angle corresponding to a particular sin value",
        "example": "upAngle = ASin( upAmount )"
    },
    "1690": {
        "fuction_name": "ATan",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "tan value": "A tangential value"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns an angle corresponding to a particular tangential value",
        "example": "upAngle = ATan( height/distance )"
    },
    "1691": {
        "fuction_name": "Ceil",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "a": "A float or integer value."
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the ceiling of floating point value <a>. This effectively rounds up Ceil(2.7) == 3, Ceil(3.9) == 4.",
        "example": "rounded_down = Floor( val )"
    },
    "1692": {
        "fuction_name": "Closer",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "reference": "The base position",
            "point a": "The first point",
            "point b": "The second point"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Tests which of two points is the closest. Returns true if point a is closer to the reference than point b",
        "example": "if( Closer( center, models[j].origin , models[i].origin ))..."
    },
    "1693": {
        "fuction_name": "CombineAngles",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "angles a": "Angles representing the orientation in which to place <angles b>",
            "angles b": "Angles which will be reoriented"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns angles b reoriented by angles a.",
        "example": "crateAnglesInWorld = CombineAngles( boatAngles, crateAnglesInBoat )"
    },
    "1694": {
        "fuction_name": "Cos",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "angle": "An angle in degrees"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the cos of an angle",
        "example": "frac = Cos( degrees )"
    },
    "1695": {
        "fuction_name": "DiffTrack",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "to": "Float, start of the range",
            "from": "Float, end of the range",
            "rate": "Floating point",
            "deltaTime": "Time elapsed"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns a lagged value between <from> and <to> based on <rate> and <deltaTime>",
        "example": null
    },
    "1696": {
        "fuction_name": "DiffTrackAngle",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "to": "Float, start of the range",
            "from": "Float, end of the range",
            "rate": "Floating point",
            "deltaTime": "Time elapsed"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns a lagged angle between <from> and <to> based on <rate> and <deltaTime>. Properly accounts for wrapping 2pi",
        "example": null
    },
    "1697": {
        "fuction_name": "Distance",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "point1": "The first point",
            "point2": "The second point"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the distance between two points",
        "example": "dist = Distance( org, ai[i].origin )"
    },
    "1698": {
        "fuction_name": "Distance2D",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "point1": "The first point",
            "point2": "The second point"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the distance between two points, ignores height difference.",
        "example": "dist = Distance2D( org, ai[i].origin )"
    },
    "1699": {
        "fuction_name": "Distance2DSquared",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "point1": "The first point",
            "point2": "The second point"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the squared distance between two points, ignores height difference.",
        "example": "distsq = Distance2DSquared( org, ai[i].origin )"
    },
    "1700": {
        "fuction_name": "DistanceSquared",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "point1": "The first point",
            "point2": "The second point"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the squared distance between two points - this is cheaper than the actual distance as it doesn't involve a square root",
        "example": "dist2 = DistanceSquared(models[j].origin, center)"
    },
    "1701": {
        "fuction_name": "Float",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "value": "A string or integer number to cast to a float"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Casts a string or an integer to a float",
        "example": "x = Float( floatValString )"
    },
    "1702": {
        "fuction_name": "Floor",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "a": "A float or integer value."
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the floor of floating point value <a>. This effectively rounds down Floor(2.7) == 2, Floor(3.9) == 3.",
        "example": "rounded_down = Floor( val )"
    },
    "1703": {
        "fuction_name": "ForwardRotateAroundUpByAngle",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "angles1": ""
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "returns a vector that is the result of angles1 forward vector rotated around its up by degrees",
        "example": "v=ForwardRotateByAngles( player_angles, frustum_edge_angle )"
    },
    "1704": {
        "fuction_name": "GetMinBitCountForNum",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "uint": "The integer a minimum bit count is needed for"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the minimum number of bits needed to express the provided integer",
        "example": "GetMinBitCountForNum( 15 ) returns 4"
    },
    "1705": {
        "fuction_name": "Int",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "value": "A string or floating point number to cast to an integer"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Casts a floating point number or a string to an integer",
        "example": "x = Int( self.HUDHealthHeight )"
    },
    "1706": {
        "fuction_name": "Length",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "vector": "A vector"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the length of the given vector",
        "example": "dist = Length(models[j].origin - center)"
    },
    "1707": {
        "fuction_name": "LengthSquared",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "vector": "A vector"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the squared vector length for the given vector - this is cheaper than the actual vector length as it doesn't involve a square root",
        "example": "dist2 = LengthSquared(models[j].origin - center)"
    },
    "1708": {
        "fuction_name": "LerpFloat",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "from": "Floating point value, start of the range",
            "to": "Floating point value, end of the range",
            "time": "Floating point value in the range of 0 - 1"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns a lerped value between <from> and <to> based on <time>",
        "example": "val = LerpFloat( 0, 10, 0.5);\t// would return 5.0"
    },
    "1709": {
        "fuction_name": "LerpVector",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "from": "Vector, start of the range",
            "to": "Vector, end of the range",
            "time": "Floating point value in the range of 0 - 1"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns a lerped vector value between <from> and <to> based on <time>",
        "example": "val = LerpVector( (0,0,0), (5,5,5), 0.5);\t// would return (2.5, 2.5, 2.5)"
    },
    "1710": {
        "fuction_name": "Log",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the logarithm of a number to base 10",
        "example": "y = Log( x )"
    },
    "1711": {
        "fuction_name": "MapFloat",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "timeMin": "Floating point value, min time value",
            "timeMax": "Floating point value, max time value",
            "from": "Floating point value, start of the result range",
            "to": "Floating point value, end of the result range",
            "time": "Floating point value in the range from <timeMin> to <timeMax>"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns a lerped value between <from> and <to> based on <time>. <time> is a value between <timeMin> and <timeMax>.",
        "example": "val = MapFloat( 1, 2, 0, 10, 1.5); // would return 5.0"
    },
    "1712": {
        "fuction_name": "Max",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "a": "A float or integer value.",
            "b": "A float or integer value."
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns whichever of <a> or <b> is larger.",
        "example": "largest = Max( val1, val2 )"
    },
    "1713": {
        "fuction_name": "Min",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "a": "A float or integer value.",
            "b": "A float or integer value."
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns whichever of <a> or <b> is smallest.",
        "example": "smallest = Min( val1, val2 )"
    },
    "1714": {
        "fuction_name": "PackRgba",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "red": "as a float 0.0-1.0",
            "green": "as a float 0.0-1.0",
            "blue": "as a float 0.0-1.0",
            "alpha": "as a float 0.0-1.0"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Packs rgba into a single int.",
        "example": "Byte4PackRgba( 1.0, 1.0, 1.0, 1.0 )"
    },
    "1715": {
        "fuction_name": "PointOnSegmentNearestToPoint",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "SegmentA": "One endpoint of the line segment",
            "SegmentB": "Other endpoint of the line segment",
            "P": "The point"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Given a line segment and a point P, this returns the point on the segment that is closest to P.",
        "example": "nearestPoint = PointOnSegmentNearestToPoint( A, B, P )NOTES:  This function will return A or B if P is beyond these two points."
    },
    "1716": {
        "fuction_name": "Pow",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "exp": "A float or integer value, <b>.\""
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Return the value of base raised to exp power.",
        "example": "c = pow( 2, 4 )"
    },
    "1717": {
        "fuction_name": "Project2Dto3D",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "clientnum": "clientnumber - needed for viewport selection.",
            "x": "screen space x coord (-1,1)",
            "y": "screen space y coord (-1,1)",
            "depth": "depth to assume near clip is at (at this depth the screen will be edge to edge)"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "returns a world coordinate that projects to the given 2d coordinate ((-1,1),(-1,1))",
        "example": "v=Project2DTo3D( 0, -1, -1, 5)"
    },
    "1718": {
        "fuction_name": "Project3Dto2D",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "clientnum": "client number - needed for viewport selection.",
            "world_coordinate": "world space vector"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "returns a screen coordinate vector (virtual UI coord) of a 3d coordinate ",
        "example": "hudPosition = Project3DTo2D( 0, target_pos )"
    },
    "1719": {
        "fuction_name": "RandomFloat",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "max": "The maximum floating point size"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns a random floating point number r, where 0 <= r < max",
        "example": "if ( RandomFloat( 100 ) > 50 ) ..."
    },
    "1720": {
        "fuction_name": "RandomFloatRange",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "min": "The minimum result",
            "max": "The maximum result"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns a random floating point number r, where min <= r < max",
        "example": "rand = RandomFloatRange( 3.0, 5.0 )"
    },
    "1721": {
        "fuction_name": "RandomInt",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "max": "The maximum integer size"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns a random integer between 0 and max-1 inclusive",
        "example": "if ( RandomInt( 100 ) > 50 ) ..."
    },
    "1722": {
        "fuction_name": "RandomIntRange",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "min": "The minimum result",
            "max": "The maximum result + 1"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns a random integer r, where min <= r < max",
        "example": "rand = RandomIntRange( 3, 5 )"
    },
    "1723": {
        "fuction_name": "RotatePoint",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "point": "A point.",
            "angles": "An angle."
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns <angle> lerped angle value.",
        "example": "rotatedPoint = RotatePoint(point, angle )"
    },
    "1724": {
        "fuction_name": "RotatePointAroundAxis",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "point": "",
            "axis direction": ""
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "returns a vector that is the result of point rotated around the axis vector by num degrees",
        "example": "v = RotatePointAroundAxis( point, up, degrees )"
    },
    "1725": {
        "fuction_name": "Sin",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "angle": "An angle in degrees"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the sin of an angle",
        "example": "frac = Sin( degrees )"
    },
    "1726": {
        "fuction_name": "Sqrt",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "a": "A float or integer value."
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the square-root of floating point value <a>.",
        "example": "c = sqrt( (a*a) + (b*b) )"
    },
    "1727": {
        "fuction_name": "Tan",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "angle": "An angle in degrees"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the tan of an angle",
        "example": "frac = Tan( degrees )"
    },
    "1728": {
        "fuction_name": "VectorCross",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "vector a": "The first vector",
            "vector b": "The second vector"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the cross product of two vectors",
        "example": null
    },
    "1729": {
        "fuction_name": "VectorDot",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "vector a": "The first vector",
            "vector b": "The second vector"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the dot product of two vectors",
        "example": null
    },
    "1730": {
        "fuction_name": "VectorFromLineToPoint",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "SegmentA": "One point on the line",
            "SegmentB": "Another point on the line",
            "P": "The point"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Given a line and a point P, this returns a vector perpendicular to the line and pointing from the line to P.",
        "example": "myvector = VectorFromLineToPoint( A, B, P )"
    },
    "1731": {
        "fuction_name": "VectorLerp",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "from": "The vector whose value is used when fraction is 0",
            "to": "The vector whose value is used when fraction is 1",
            "fraction": "The fraction of the way between vectors.  Values less than 0 or greater than 1 do linear extrapolation."
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Linear interpolates between two vectors.",
        "example": "color = VectorLerp(oldColor, newColor, timeElapsed / timeTotal)"
    },
    "1732": {
        "fuction_name": "VectorNormalize",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "vector": "The vector to normalize"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns a normalized copy of this vector",
        "example": "difference = VectorNormalize(end - start)"
    },
    "1733": {
        "fuction_name": "VectorProjection",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "vector a": "The first vector",
            "vector b": "The second vector"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the vector projection of vector a onto vector b",
        "example": null
    },
    "1734": {
        "fuction_name": "VectortoAngles",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "vector": "The vector to convert to angles"
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns a set of angles corresponding to the given vector.",
        "example": "angles = VectortoAngles(end - start)"
    },
    "1735": {
        "fuction_name": "ViewAspect",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "clientnum": "client number - needed for viewport selection."
        },
        "optional_parameters": {},
        "category": "Math",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "returns the horizontal screen aspect ",
        "example": "viewAspect = ViewAspect( localClientNum )"
    },
    "1736": {
        "fuction_name": "ActionButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the 'action' button. Use this for when the player might be in a scripted sequence but might still press the jump button.",
        "example": "while( self ActionButtonPressed() )..."
    },
    "1737": {
        "fuction_name": "ActionSlotFourButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the action slot 4 button",
        "example": "if ( self ActionSlotFourButtonPressed() ) ..."
    },
    "1738": {
        "fuction_name": "ActionSlotOneButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the action slot 1 button",
        "example": "if ( self ActionSlotOneButtonPressed() ) ..."
    },
    "1739": {
        "fuction_name": "ActionSlotThreeButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the action slot 3 button",
        "example": "if ( self ActionSlotThreeButtonPressed() ) ..."
    },
    "1740": {
        "fuction_name": "ActionSlotTwoButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the action slot 2 button",
        "example": "if ( self ActionSlotTwoButtonPressed() ) ..."
    },
    "1741": {
        "fuction_name": "AddToDamageIndicator",
        "return_type": "void",
        "called_by": "<client>",
        "mandatory_parameters": {
            "dmg": "The damage"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Add damage to damage indicator",
        "example": "self AddToDamageIndicator( int( armor_damage ), vDir)"
    },
    "1742": {
        "fuction_name": "AdsButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the 'ads' button.",
        "example": "while( self AdsButtonPressed() )..."
    },
    "1743": {
        "fuction_name": "AllowAds",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "player ads": ": A boolean. true if the player can switch to ADS, and false otherwise."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether the player can switch to ADS",
        "example": "player AllowAds( false )"
    },
    "1744": {
        "fuction_name": "AllowCrouch",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "player crouch": ": A boolean. true if the player can crouch, and false otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether the player can crouch",
        "example": "player AllowCrouch( false )"
    },
    "1745": {
        "fuction_name": "AllowDoubleJump",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "on off": ": A boolean. true if the player can double jump, and false otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether the player can double jump",
        "example": "player AllowDoubleJump( false )"
    },
    "1746": {
        "fuction_name": "AllowJump",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "player jump": ": A boolean. True if the player can jump, and false otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether the player can jump",
        "example": "player AllowJump(false)"
    },
    "1747": {
        "fuction_name": "AllowLean",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "player lean": ": A boolean. true if the player can lean, and false otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether the player can lean",
        "example": "player AllowLean( false )"
    },
    "1748": {
        "fuction_name": "AllowMelee",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "melee": ": A boolean. True if the player can melee, and false otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether the player can melee",
        "example": "player AllowMelee(false)"
    },
    "1749": {
        "fuction_name": "AllowMeleePowerLeft",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "melee": ": A boolean. True if the player can melee power left, and false otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether the player can melee power left",
        "example": "player AllowMeleePowerLeft(false)"
    },
    "1750": {
        "fuction_name": "AllowProne",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "player prone": ": A boolean. true if the player can go prone, and false otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether the player can go prone",
        "example": "player AllowProne( false )"
    },
    "1751": {
        "fuction_name": "AllowSlide",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "on off": ": A boolean. true if the player can slide, and false otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether the player can slide",
        "example": "player AllowSlide( false )"
    },
    "1752": {
        "fuction_name": "AllowSpectateTeam",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "team": "A string description of the team. Valid teams are 'axis', 'allies', 'none' or 'freelook'",
            "spectate": "A boolean value describing whether this player can spectate on this team."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set whether the player can spectate the given team.",
        "example": "self AllowSpectateTeam( \"axis\", true )"
    },
    "1753": {
        "fuction_name": "AllowSprint",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "player sprint": ": A boolean. True if the player can sprint, and false otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether the player can sprint",
        "example": "player AllowSprint(false)"
    },
    "1754": {
        "fuction_name": "AllowStand",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "player stand": ": A boolean. true if the player can stand, and false otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether the player can stand up",
        "example": "player AllowStand( false )"
    },
    "1755": {
        "fuction_name": "AllowWallRun",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "on off": ": A boolean. true if the player can wallrun, and false otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether the player can wall run",
        "example": "player AllowWallRun( false )"
    },
    "1756": {
        "fuction_name": "AnyAmmoForWeaponModes",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to check"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the weapon has any ammo left",
        "example": "if ( !(self AnyAmmoForWeaponModes( weapon )) )"
    },
    "1757": {
        "fuction_name": "ApplyKnockBack",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "amount": "the amount of knockback to apply"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Applies a knockback on a player.",
        "example": "player ApplyKnockBack( 10, dir )"
    },
    "1758": {
        "fuction_name": "AreControlsFrozen",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the controls are frozen",
        "example": "if( player AreControlsFrozen() )"
    },
    "1759": {
        "fuction_name": "AttackButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the fire button",
        "example": "if ( self AttackButtonPressed() ) ..."
    },
    "1760": {
        "fuction_name": "BeginLocationAirstrikeSelection",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "selection name": "The selection name"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Begin a location air strike selection",
        "example": "self BeginLocationAirstrikeSelection( LOCATION_SELECTOR )"
    },
    "1761": {
        "fuction_name": "BeginLocationArtillerySelection",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "selection name": "The selection name"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Begin a location artillery selection",
        "example": "self BeginLocationArtillerySelection( LOCATION_SELECTOR )"
    },
    "1762": {
        "fuction_name": "BeginLocationComlinkSelection",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "selection name": "The selection name"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Begin a location com link selection",
        "example": "self BeginLocationComlinkSelection( LOCATION_SELECTOR, 1000 )"
    },
    "1763": {
        "fuction_name": "BeginLocationMortarSelection",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "selection name": "The selection name"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Begin a location mortar selection",
        "example": "self BeginLocationMortarSelection( LOCATION_SELECTOR, 1500 )"
    },
    "1764": {
        "fuction_name": "BeginLocationNapalmSelection",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "selection name": "The selection name"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Begin a location napalm selection",
        "example": "self BeginLocationNapalmSelection( LOCATION_SELECTOR )"
    },
    "1765": {
        "fuction_name": "BeginLocationSelection",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "selection name": "The selection name"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Begin a location selection",
        "example": "self BeginLocationSelection( LOCATION_SELECTOR )"
    },
    "1766": {
        "fuction_name": "BoostButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the change seat (Y) button",
        "example": "if ( self BoostButtonPressed() ) ..."
    },
    "1767": {
        "fuction_name": "BotSetRandomCharacterCustomization",
        "return_type": "void",
        "called_by": "<bot>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Equips this class number with the default class",
        "example": "self BotSetRandomCharacterCustomization()"
    },
    "1768": {
        "fuction_name": "ButtonBitState",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "button": ": name of button to check \"BUTTON_BIT_ATTACK\" for example, optionally can include as many button names as desired.  Returns true if all buttons indicated are true."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return true if the button_bit(s) indicated are pressed (note:  there is no way to know exactly which buttons are pressed on the client, since everything is remapped into these bit values)",
        "example": "if ( self ButtonBitState( \"BUTTON_BIT_ATTACK\") ) ...NOTES:  You really shouldn't be using this, unless you KNOW that you should.  See buttonbits.h for button bit names."
    },
    "1769": {
        "fuction_name": "ButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the host is pressing the button/key, \"BUTTON_A\", \"BUTTON_B\", \"K\", etc...",
        "example": "while( self ButtonPressed( \"BUTTON_A\" ) ) ...NOTES:  (it will only check the host player's buttons though)"
    },
    "1770": {
        "fuction_name": "CalcPlayerOptions",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "custom class slot": "The custom class slot"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Calculate player options",
        "example": "playerRenderOptions = self CalcPlayerOptions( class_num )"
    },
    "1771": {
        "fuction_name": "CalcWeaponOptions",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "custom class slot": "The custom class slot",
            "weapon slot": "primary weapon=0 or secondary weapon=1 or knife weapon=2"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Calculates weapon options",
        "example": "primaryWeaponOptions = self CalcWeaponOptions( class_num, 0 )"
    },
    "1772": {
        "fuction_name": "CameraActivate",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "active": "True to activate the camera, false to turn it off and return to 1st person view"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Turns the script camera on or off.",
        "example": "get_players()[0] CameraActivate( true )"
    },
    "1773": {
        "fuction_name": "CameraSetAngles",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the focus point of the script camera.",
        "example": "get_players()[0] CameraSetAngles( ( 1100, -23, 644 ) )get_players()[0] CameraSetAngles( my_entity )"
    },
    "1774": {
        "fuction_name": "CameraSetLookAt",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the focus point of the script camera.",
        "example": "get_players()[0] CameraSetLookAt( ( 1100, -23, 644 ) )get_players()[0] CameraSetLookAt( my_entity )"
    },
    "1775": {
        "fuction_name": "CameraSetPosition",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "position": "Either an entity to link the camera to or a vector defining the world position"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the position of the script camera.",
        "example": "get_players()[0] CameraSetPosition( ( 1100, -23, 644 ) )get_players()[0] CameraSetPosition( my_entity )"
    },
    "1776": {
        "fuction_name": "CanPlaceRiotshield",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Try to place riotshield where the player is standing.  return an array containing placement \"result\", \"origin\", and \"angles",
        "example": "placement = level.player CanPlaceRiotshield()"
    },
    "1777": {
        "fuction_name": "CanPlayerPlaceTurret",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Try to place a Turret where the player is looking.  It'll return an array containing the placement \"result\", \"origin\", and \"angles\".",
        "example": "placement = level.player CanPlayerPlaceTurret()"
    },
    "1778": {
        "fuction_name": "CanPlayerPlaceVehicle",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "radius": "Radius of the bounds check",
            "height": "Height of the bounds check",
            "forward Distance": "Distance away from player origin.",
            "up Distance": "Distance up from player origin.",
            "sweep Distance": "Distance to sweep downwards.",
            "min normal": "Minimum hit normal needed to be pass."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Try to place a vehicle in front of the player.  It'll return an array containing the placement \"result\", \"origin\", and \"angles\".",
        "example": "placement = level.player CanPlayerPlaceVehicle( 25, 45, 50, 40, 80, 0.7 )"
    },
    "1779": {
        "fuction_name": "CantSeeEntities",
        "return_type": "entity",
        "called_by": "<player>",
        "mandatory_parameters": {
            "entArray": "The entities to check against",
            "dotRange": "The cosine of the angle representing your fov",
            "trace": "Perform a trace for entities"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the set of entities that a player cannot see within a given angle, given a set of entities",
        "example": "if( isplayer( self.enemy ) && self.enemy CantSeeEntities( entArray, 67 ) )"
    },
    "1780": {
        "fuction_name": "CarryTurret",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "turret": "The turret entity",
            "offset": "the offset from the player to place the turret",
            "angleOffset": "the angle offset of the turret"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Links the auto turret to the player to carry around.",
        "example": "player CarryTurret( turret, offset, angleOffset )"
    },
    "1781": {
        "fuction_name": "ChangeSeatButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the change seat (Y) button",
        "example": "if ( self ChangeSeatButtonPressed() ) ..."
    },
    "1782": {
        "fuction_name": "ClearDamageIndicator",
        "return_type": "void",
        "called_by": "<client>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clear damage indicator",
        "example": "self ClearDamageIndicator()"
    },
    "1783": {
        "fuction_name": "ClearPerks",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "removes all perks for a player",
        "example": "player ClearPerks()"
    },
    "1784": {
        "fuction_name": "ClonePlayer",
        "return_type": "entity",
        "called_by": "<client>",
        "mandatory_parameters": {
            "deathAnimationDuration": "the duration of the death animation",
            "killing weapon": "weapon that killed the player"
        },
        "optional_parameters": {
            "attacker": "attacker that killed the player"
        },
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "clone the player's model for death animations.",
        "example": "body = self ClonePlayer(deathAnimDuration)"
    },
    "1785": {
        "fuction_name": "CloseInGameMenu",
        "return_type": "void",
        "called_by": "<client>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "close the in game menu for this client.",
        "example": "player CloseInGameMenu()"
    },
    "1786": {
        "fuction_name": "CloseLUIMenu",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "lui menu handle": "handle to the lui menu."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Closes the given lui menu and returns true if it finds the menu and succeeds in closing it, false otherwise.",
        "example": "player CloseLUIMenu( menu )"
    },
    "1787": {
        "fuction_name": "CloseMenu",
        "return_type": "void",
        "called_by": "<client>",
        "mandatory_parameters": {
            "menu index": "The precached menu index of type \"menu\""
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "close the specified menu for this client.",
        "example": "player CloseMenu( game[ \"menu_changeclass\" ] )"
    },
    "1788": {
        "fuction_name": "CreateFlashbackClone",
        "return_type": "entity",
        "called_by": "<client>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "clone the player's model for temporary flashback model",
        "example": "body = self CreateFlashbackClone()"
    },
    "1789": {
        "fuction_name": "DamageRiotShield",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Apply damage to a player riot shield or other weapon that supports damage states.",
        "example": "newhealth = player DamageRiotShield( 100 ) )"
    },
    "1790": {
        "fuction_name": "DeathStreakActive",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if player's death streak is active",
        "example": "if( player DeathStreakActive() )"
    },
    "1791": {
        "fuction_name": "DisableDeathStreak",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Disable player's death streak",
        "example": "player DisableDeathStreak()"
    },
    "1792": {
        "fuction_name": "DisableInvulnerability",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Makes player vulnerable to damage.  This is default behavior",
        "example": "player DisableInvulnerability()"
    },
    "1793": {
        "fuction_name": "DisableOffhandWeapons",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Disable the player's offhand weapons",
        "example": "player DisableOffhandWeapons()"
    },
    "1794": {
        "fuction_name": "DisableRoundStartDelay",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enable players weapon after round start delay",
        "example": "player DisableRoundStartDelay()"
    },
    "1795": {
        "fuction_name": "DisableUsability",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Disables usability for the player",
        "example": "player DisableUsability()"
    },
    "1796": {
        "fuction_name": "DisableWeaponCycling",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Disable the player's weapon cycling",
        "example": "player DisableWeaponCycling()"
    },
    "1797": {
        "fuction_name": "DisableWeaponFire",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Disable the player's weapon fire",
        "example": "player DisableWeaponFire(()"
    },
    "1798": {
        "fuction_name": "DisableWeapons",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Disable the weapons of the player",
        "example": "self DisableWeapons()"
    },
    "1799": {
        "fuction_name": "DropItem",
        "return_type": "entity",
        "called_by": "<player>",
        "mandatory_parameters": {
            "item name": "the name of the item to drop"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Drop an item with the given item name",
        "example": "self DropItem( current )"
    },
    "1800": {
        "fuction_name": "DropScavengerItem",
        "return_type": "entity",
        "called_by": "<player>",
        "mandatory_parameters": {
            "item name": "the name of the item to drop"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Drop an item with the given item name. This item will be only available to those with the scavenger perk",
        "example": "self DropScavengerItem( \"scavenger_item_mp\" )"
    },
    "1801": {
        "fuction_name": "EnableDeathStreak",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enable player's death streak",
        "example": "player EnableDeathStreak()"
    },
    "1802": {
        "fuction_name": "EnableInvulnerability",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Makes player invulnerable to damage",
        "example": "player EnableInvulnerability()"
    },
    "1803": {
        "fuction_name": "EnableOffhandWeapons",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enable the player's offhand weapons",
        "example": "player EnableOffhandWeapons()"
    },
    "1804": {
        "fuction_name": "EnableRoundStartDelay",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Disable the players weapon during round start",
        "example": "player EnableRoundStartDelay()"
    },
    "1805": {
        "fuction_name": "EnableUsability",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enables usability for the player",
        "example": "player EnableUsability()"
    },
    "1806": {
        "fuction_name": "EnableWeaponCycling",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enable the player's weapon cycling",
        "example": "player EnableWeaponCycling()"
    },
    "1807": {
        "fuction_name": "EnableWeaponFire",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enable the player's weapon fire",
        "example": "player EnableWeaponFire()"
    },
    "1808": {
        "fuction_name": "EnableWeapons",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enables the weapons of the player",
        "example": "self EnableWeapons()"
    },
    "1809": {
        "fuction_name": "EndLocationSelection",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Ends location selection",
        "example": "self endLocationSelection()"
    },
    "1810": {
        "fuction_name": "FakeDamageFrom",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "dir": "The direction to take damage from"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Make the player take damage from the given direction",
        "example": "self FakeDamageFrom(vDir)"
    },
    "1811": {
        "fuction_name": "finishMeleeHit",
        "return_type": "void",
        "called_by": "<client>",
        "mandatory_parameters": {
            "Attacker": "The entity that is attacking.",
            "Weapon": "The weapon number of the weapon used to inflict the damage",
            "Origin": "(vector) The origin of the damage",
            "Direction": "(vector) The direction of the damage",
            "bone index": "Which bone was the closest to the hit",
            "shieldHit": "Was the hit delivered against a shield",
            "hit": "Was the hit successful or a swipe",
            "fromBehind": "Was the hit from behind the victim"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Notifies the clients of the melee hit or miss",
        "example": "self finishMeleeHit( eAttacker, sWeapon, vPoint, vDir, iBoneIndex, bHit )"
    },
    "1812": {
        "fuction_name": "FinishPlayerDamage",
        "return_type": "void",
        "called_by": "<client>",
        "mandatory_parameters": {
            "Inflictor": "The entity that causes the damage.(e.g. a turret)",
            "Attacker": "The entity that is attacking.",
            "Damage": "Integer specifying the amount of damage done",
            "Damage Flags": "Integer specifying flags that are to be applied to the damage",
            "Means Of Death": "Integer specifying the method of death",
            "Weapon": "The weapon number of the weapon used to inflict the damage",
            "Point": "Damage point",
            "Direction": "(vector) The direction of the damage",
            "Hit Loc": "The location of the hit",
            "Damage Origin": "Where the damage originated from.",
            "Offset Time": "The time offset for the damage",
            "bone index": "Which bone was the closest to the hit",
            "Surface Normal": "The normal of the surface impacted."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Does damage to a player - usually as part of the damage callback",
        "example": "self FinishPlayerDamage( eInflictor, eAttacker, iDamage, iDFlags, sMeansOfDeath, sWeapon, vPoint, vDir, sHitLoc, iBone, vDamageOrigin, psOffsetTime, vSurfaceNormal )"
    },
    "1813": {
        "fuction_name": "ForceGrenadeThrow",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Forces the player to throw a held grenade",
        "example": "player ForceGrenadeThrow()"
    },
    "1814": {
        "fuction_name": "ForceOffHandEnd",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Force the player to not use offhand weapon",
        "example": "self forceoffhandend()"
    },
    "1815": {
        "fuction_name": "ForceSlick",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "slick": ": A boolean. True if the player is on a slick surface, and false otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether the player is forced to be on a slick surface",
        "example": "player ForceSlick(true)"
    },
    "1816": {
        "fuction_name": "FragButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the frag button",
        "example": "if ( self FragButtonPressed() ) ..."
    },
    "1817": {
        "fuction_name": "FreezeControls",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "freeze state": ": true if the player's controls are frozen, false otherwise."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Blocks or unblocks control input from this player",
        "example": "player FreezeControls( true )"
    },
    "1818": {
        "fuction_name": "FreezeControlsAllowLook",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "freeze state": ": true if the player's controls are frozen, false otherwise."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Blocks or unblocks control input from this player, but allows the player to look around",
        "example": "level.player FreezeControlsAllowLook( true )"
    },
    "1819": {
        "fuction_name": "GamepadUsedLast",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is playing with a gamepad.",
        "example": "if( player GamepadUsedLast() )"
    },
    "1820": {
        "fuction_name": "GetCharacterBodyModel",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {
            "modelType": "The index of the model type, defaults to CCBODY_MODEL_THIRDPERSON"
        },
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the body model for this player as selected in character customization",
        "example": "self GetCharacterBodyModel()"
    },
    "1821": {
        "fuction_name": "GetCharacterBodyRenderOptions",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the body render options for this player",
        "example": "self GetCharacterBodyRenderOptions()"
    },
    "1822": {
        "fuction_name": "GetCharacterBodyType",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the character body type for the player.",
        "example": "bodyIndex = self GetCharacterBodyType( )"
    },
    "1823": {
        "fuction_name": "GetCharacterHeadModel",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the head model for this player",
        "example": "self GetCharacterHelmetModel()"
    },
    "1824": {
        "fuction_name": "GetCharacterHelmetModel",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {
            "modelType": "The index of the model type, defaults to CCBODY_MODEL_THIRDPERSON"
        },
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the helmet model for this player as selected in character customization",
        "example": "self GetCharacterHelmetModel()"
    },
    "1825": {
        "fuction_name": "GetControllerUIModelValue",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "ui model data path from controller": "precached name string for the data which we're trying to get."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets a data value for a given lui menu, the data name has to be precached and the value as well, if its a string.",
        "example": "player GetControllerUIModelValue( \"hudItems.regenDelayProgress\")"
    },
    "1826": {
        "fuction_name": "GetCurrentOffHand",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the current offhand weapon",
        "example": "weapon = self GetCurrentOffhand()"
    },
    "1827": {
        "fuction_name": "GetCurrentWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current player weapon",
        "example": "currentweapon = player GetCurrentWeapon()"
    },
    "1828": {
        "fuction_name": "GetCurrentWeaponAltWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the alt weapon for the players current weapon.  Returns \"none",
        "example": "currentweapon = player GetCurrentWeaponAltWeapon()"
    },
    "1829": {
        "fuction_name": "GetCurrentWeaponSpinLerp",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current weapon spin ",
        "example": "weapon_spin_lerp = self GetCurrentWeaponSpinLerp()"
    },
    "1830": {
        "fuction_name": "GetEnemyDogTagModel",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the enemy of the dog tag model currently associated character body",
        "example": "friendly_model = player GetEnemyDogTagModel( )"
    },
    "1831": {
        "fuction_name": "GetFractionMaxAmmo",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to give max ammo to"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get fraction of the max ammo",
        "example": "frac = players[i] GetFractionMaxAmmo( lethal_grenade )"
    },
    "1832": {
        "fuction_name": "GetFractionStartAmmo",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to give ammo to"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Give fraction of start ammo to the player for the weapon",
        "example": "start = player GetFractionStartAmmo( weapon )"
    },
    "1833": {
        "fuction_name": "GetFriendlies",
        "return_type": "entity",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of friendly players. The player called on is not included in the array.",
        "example": "friends = self GetFriendlies()"
    },
    "1834": {
        "fuction_name": "GetFriendlyDogTagModel",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the friendly of the dog tag model currently associated character body",
        "example": "friendly_model = player GetFriendlyDogTagModel( )"
    },
    "1835": {
        "fuction_name": "GetGunAngles",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the player's gun angles",
        "example": "angles = player GetGunAngles()"
    },
    "1836": {
        "fuction_name": "GetHeroAbilityName",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the name of the weapon assigned to the currently selected body",
        "example": "weaponName = self GetHeroAbilityName()"
    },
    "1837": {
        "fuction_name": "GetHeroWeaponName",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the name of the weapon assigned to the currently selected body",
        "example": "weaponName = self GetHeroWeaponName()"
    },
    "1838": {
        "fuction_name": "GetInventoryHeldWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the player's inventory held weapon",
        "example": "inventoryWeapon = player GetInventoryHeldWeapon()"
    },
    "1839": {
        "fuction_name": "GetInventoryWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the inventory weapon",
        "example": "inventoryWeapon = self GetInventoryWeapon()"
    },
    "1840": {
        "fuction_name": "GetIpAddress",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the ip address of the player",
        "example": "ipAddress = self GetIpAddress()"
    },
    "1841": {
        "fuction_name": "GetLeagueTeamID",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the league team ID",
        "example": "id = player GetLeagueTeamID()"
    },
    "1842": {
        "fuction_name": "GetLightingState",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current lighting state for the player",
        "example": "ls = player GetLightingState()"
    },
    "1843": {
        "fuction_name": "GetLockOnLossRadius",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the lock on loss radius for the currently equipped heatseeking launcher.",
        "example": "radius = player GetLockOnRadius()"
    },
    "1844": {
        "fuction_name": "GetLockOnOrigin",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "bool": ": true or false."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "gets the origin to use for the replay gun lockon on the entity",
        "example": "player GetLockOnOrigin( entity )"
    },
    "1845": {
        "fuction_name": "GetLockOnRadius",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the lock on radius for the currently equipped heatseeking launcher.",
        "example": "radius = player GetLockOnRadius()"
    },
    "1846": {
        "fuction_name": "GetLockOnSpeed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the lock on speed in miliseconds for the currently equipped heatseeking launcher.",
        "example": "speed = player GetLockOnSpeed()"
    },
    "1847": {
        "fuction_name": "GetLUIMenu",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "lui menu name": "name of the menu."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns a handle to a lui menu.",
        "example": "player GetLUIMenu( \"myMenu\" )"
    },
    "1848": {
        "fuction_name": "GetLUIMenuData",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "lui menu handle": "handle for the lui menu.",
            "lui menu data name": "name of the data which had been set on the menu."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current value for the given data name.",
        "example": "player GetLUIMenuData( menu, \"title\" )"
    },
    "1849": {
        "fuction_name": "GetMpDialogName",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the name of the mpdialog bundle of the currently associated character body",
        "example": "mpDialogBundleName = player GetMpDialogName( )"
    },
    "1850": {
        "fuction_name": "GetNormalizedCameraMovement",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the player's camera movement normalized",
        "example": "v_stick = player GetNormalizedCameraMovement()"
    },
    "1851": {
        "fuction_name": "GetNormalizedMovement",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the player's movement normalized",
        "example": "norm_move = self GetNormalizedMovement()"
    },
    "1852": {
        "fuction_name": "GetOffHandSecondaryClass",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get whether the player is using a flash or smoke",
        "example": "offhand_secondary = self GetOffHandSecondaryClass()"
    },
    "1853": {
        "fuction_name": "GetPerks",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns an array of all player perks. The array is size 0 if the player has no perks.",
        "example": "perks = player GetPerks()"
    },
    "1854": {
        "fuction_name": "GetPlayerAngles",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the player view angles",
        "example": "angles = player GetPlayerAngles()"
    },
    "1855": {
        "fuction_name": "GetPlayerAttachmentCosmeticVariantIndexes",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to get acvi from"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the player's held weapon acvi ",
        "example": "acvi = self GetPlayerAttachmentCosmeticVariantIndexes( weapon )"
    },
    "1856": {
        "fuction_name": "GetPlayerCameraPos",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the player's camera position",
        "example": "vieworg = player GetPlayerCameraPos()"
    },
    "1857": {
        "fuction_name": "GetPlayerGenderType",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "mode": "SessionMode"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the gender string of the player",
        "example": "if ( self GetPlayerGenderType() == \"male\" )"
    },
    "1858": {
        "fuction_name": "GetPlayerMovementState",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the player movement state for the match record.  ",
        "example": null
    },
    "1859": {
        "fuction_name": "GetPlayerSelectedGesture",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "gestureType": "The type of gesture to get"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the equipped gesture ",
        "example": "gesture = player GetPlayerSelectedGesture( 0 )"
    },
    "1860": {
        "fuction_name": "GetPlayerSelectedTaunt",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "tauntType": "The type of taunt to get"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the equipped taunt ",
        "example": "taunt = player GetPlayerSelectedTaunt( 0 )"
    },
    "1861": {
        "fuction_name": "GetPlayerShowcaseWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the showcase weapon of the given player",
        "example": "showcaseWeapon = player GetPlayerShowcaseWeapon()"
    },
    "1862": {
        "fuction_name": "GetPlayerViewHeight",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the player's view height",
        "example": "height = player GetPlayerViewHeight()"
    },
    "1863": {
        "fuction_name": "getreplaygunlockonorigin",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "bool": ": true or false."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "gets the origin to use for the replay gun lockon on the entity",
        "example": "player GetLockOnOrigin( entity )"
    },
    "1864": {
        "fuction_name": "GetSnapshotAckIndex",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the snapshot acknowledgment index",
        "example": "num = self getsnapshotackindex()"
    },
    "1865": {
        "fuction_name": "GetSunShadowSplitDistance",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current sun shadow split difference for the player",
        "example": "distance = player GetSunShadowSplitDistance()"
    },
    "1866": {
        "fuction_name": "GetTargetScreenAngles",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "targetpos": "The position to get angles for."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get target screen view angles",
        "example": "angles = self GetTargetScreenAngles( targetpos )"
    },
    "1867": {
        "fuction_name": "GetVehicleBoostTime",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the vehicle's max boost time",
        "example": "boostTime = player GetVehicleBoostTime()"
    },
    "1868": {
        "fuction_name": "GetVehicleBoostTimeLeft",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the vehicle's remaining boost time",
        "example": "boostTimeLeft = player GetVehicleBoostTimeLeft()"
    },
    "1869": {
        "fuction_name": "GetVehicleFocusEntity",
        "return_type": "entity",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current vehicle focus entity for the player",
        "example": "focusEnt = player GetVehicleFocusEntity()"
    },
    "1870": {
        "fuction_name": "GetVehicleMinBoostTime",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the vehicle's min boost time needed in order to boost",
        "example": "minBoostTime = player GetVehicleMinBoostTime()"
    },
    "1871": {
        "fuction_name": "GetVehicleOccupied",
        "return_type": "entity",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the vehicle entity that the player occupies.  If player isn't in a vehicle then this causes an error.",
        "example": "self GetVehicleOccupied()"
    },
    "1872": {
        "fuction_name": "GetWeaponAcvi",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets weapon options from held weapon",
        "example": "primaryWeaponAcvi = self GetWeaponAcvi( weapon )"
    },
    "1873": {
        "fuction_name": "GetWeaponAmmoClip",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to get ammo count from"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the weapon's ammo count in clip",
        "example": "ammo = self GetWeaponAmmoClip( weapon )"
    },
    "1874": {
        "fuction_name": "GetWeaponAmmoFuel",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to get fuel count from"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the weapon's fuel count ",
        "example": "fuel = self GetWeaponAmmoFuel( weapon )"
    },
    "1875": {
        "fuction_name": "GetWeaponAmmoStock",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to get ammo count from"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the weapon's total ammo count ",
        "example": "ammo = self GetWeaponAmmoStock( weapon )"
    },
    "1876": {
        "fuction_name": "GetWeaponForWeaponRoot",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to check"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns a weapon that the player is holding that has the same weapon root.  Returns undefined if the player is not holding the weapon.",
        "example": "weapon_with_attachments = player GetWeaponForWeaponRoot( <weapon> )"
    },
    "1877": {
        "fuction_name": "GetWeaponOptions",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to get options from"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the weapon's render options ",
        "example": "weaponOptions = self GetWeaponOptions( weapon )"
    },
    "1878": {
        "fuction_name": "GetWeaponsList",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets an array of all weapons that the player has.  Alt-mode weapons by default are not included",
        "example": "weapList = player GetWeaponsList()"
    },
    "1879": {
        "fuction_name": "GetWeaponsListPrimaries",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": null
    },
    "1880": {
        "fuction_name": "GiveDedicatedShadow",
        "return_type": "void",
        "called_by": "<entity>",
        "mandatory_parameters": {
            "entity": "The entity to enable the dedicated shadow on"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the model lod bias",
        "example": "player GiveDedicatedShadow( 8 )"
    },
    "1881": {
        "fuction_name": "GiveMaxAmmo",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to give ammo to"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Give the weapon max ammo",
        "example": "self GiveMaxAmmo( primary )"
    },
    "1882": {
        "fuction_name": "GiveNextBaseWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Give the player the next base weapon",
        "example": "self GiveNextBaseWeapon()"
    },
    "1883": {
        "fuction_name": "GiveStartAmmo",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to give ammo to"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Give the weapon initial ammo",
        "example": "self GiveStartAmmo( primary )"
    },
    "1884": {
        "fuction_name": "GiveWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to give"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Give a weapon to the player",
        "example": "e_player GiveWeapon( w_spike_launcher )"
    },
    "1885": {
        "fuction_name": "GiveWeaponNextAttachment",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "attachment point": "The attachment point name"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Give the weapon the next attachment",
        "example": "self giveweaponnextattachment( \"muzzle\" )"
    },
    "1886": {
        "fuction_name": "HasAGrenadePulledBack",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "check is a client has a grenade (any type including special) currently pulled back",
        "example": "self HasAGrenadePulledBack( )"
    },
    "1887": {
        "fuction_name": "HasMaxPrimaryWeapons",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player has maximum primary weapons",
        "example": "if( self HasMaxPrimaryWeapons() )"
    },
    "1888": {
        "fuction_name": "HasPerk",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "perk name": "the perk to check"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "test if player has a perk",
        "example": "player HasPerk( \"specialty_gpsjammer\" )"
    },
    "1889": {
        "fuction_name": "HasRiotShield",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Return true if player has a riot shield in their inventory.",
        "example": "if ( player HasRiotShield() )"
    },
    "1890": {
        "fuction_name": "HasWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to check"
        },
        "optional_parameters": {
            "ignore_attachments": "Only check the root weapon, ignore all the attachments."
        },
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player has the given weapon",
        "example": "if( e_player HasWeapon( w_spike_launcher, true ) )"
    },
    "1891": {
        "fuction_name": "HideViewModel",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Hide the player's current view model.",
        "example": "player HideViewModel()"
    },
    "1892": {
        "fuction_name": "InitialWeaponRaise",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon name": "The weapon to try first raise anim with"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Setup weaponstate to force first raise animation",
        "example": "self InitialWeaponRaise( \"ak47\" )"
    },
    "1893": {
        "fuction_name": "InventoryButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the inventory button",
        "example": "if ( self InventoryButtonPressed() ) ..."
    },
    "1894": {
        "fuction_name": "IsCarryingTurret",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if player is carrying turret or not.",
        "example": "player IsCarryingTurret()"
    },
    "1895": {
        "fuction_name": "IsChargeShotPending",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if player has a charge shot pending with a charge shot weapon",
        "example": "if( self IsChargeShotPending() )"
    },
    "1896": {
        "fuction_name": "IsDroppingWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is currently dropping their weapon",
        "example": "player IsDroppingWeapon()"
    },
    "1897": {
        "fuction_name": "IsFiring",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is currently meleeing",
        "example": "player IsFiring()"
    },
    "1898": {
        "fuction_name": "IsGrappling",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is currently grappling",
        "example": "player IsGrappling()"
    },
    "1899": {
        "fuction_name": "IsHost",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is the host",
        "example": "player IsHost()"
    },
    "1900": {
        "fuction_name": "IsHostForBots",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the passed in entity is the host for bots",
        "example": "player IsHostForBots()"
    },
    "1901": {
        "fuction_name": "IsInMoveMode",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "move_mode_1": "The move mode to check"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is in either of the given move modes",
        "example": "if ( player IsInMoveMode( \"ufo\", \"noclip\" ) )"
    },
    "1902": {
        "fuction_name": "IsInVehicle",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether or not this player is currently occupying a vehicle.",
        "example": "self IsInVehicle()"
    },
    "1903": {
        "fuction_name": "IsLocalToHost",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is on the same physical machine as the host",
        "example": "player IsLocalToHost()"
    },
    "1904": {
        "fuction_name": "IsLookingAt",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "entity": "The entity to check"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is looking at entity",
        "example": "if( isplayer( self.enemy ) && self.enemy islookingat( self ) )"
    },
    "1905": {
        "fuction_name": "IsMeleeing",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is currently meleeing",
        "example": "player IsMeleeing()"
    },
    "1906": {
        "fuction_name": "IsPlayerOnSameMachine",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "player": "The player to test against"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether or not this player is on the same machine as the other player.",
        "example": "if ( self IsPlayerOnSameMachine( player ) )"
    },
    "1907": {
        "fuction_name": "IsReloading",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is currently reloading",
        "example": "player IsReloading()"
    },
    "1908": {
        "fuction_name": "IsRemoteControlling",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether or not this player is currently occupying a remote controlled entity.",
        "example": "self IsRemoteControlling()"
    },
    "1909": {
        "fuction_name": "IsSwitchingWeapons",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is currently switching weapons",
        "example": "player IsSwitchingWeapons()"
    },
    "1910": {
        "fuction_name": "IsTalking",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is talking via voice chat",
        "example": "if( player IsTalking() )"
    },
    "1911": {
        "fuction_name": "IsThrowingGrenade",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the player is currently throwing a grenade",
        "example": "player IsThrowingGrenade()"
    },
    "1912": {
        "fuction_name": "IsUsingOffHand",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if player is using offhand weapon",
        "example": "if( self IsUsingOffHand() )"
    },
    "1913": {
        "fuction_name": "IsWeaponOverheating",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Is the players Weapon Overheating?",
        "example": "self IsWeaponOverheating()"
    },
    "1914": {
        "fuction_name": "IsWeaponViewOnlyLinked",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns whether or not this player is linked to an enity with weapon view only linking.",
        "example": "self IsWeaponViewOnlyLinked()"
    },
    "1915": {
        "fuction_name": "JumpButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the 'jump' button.",
        "example": "while( self JumpButtonPressed() )..."
    },
    "1916": {
        "fuction_name": "LinkGuidedMissileCamera",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "set player eflags for the guided missile",
        "example": "player LinkGuidedMissileCamera()"
    },
    "1917": {
        "fuction_name": "LinkToMissile",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Links a player camera and controls to a missile",
        "example": "player LinkToMissile( rocket, true )"
    },
    "1918": {
        "fuction_name": "MeleeButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the melee button",
        "example": "if ( self MeleeButtonPressed() ) ..."
    },
    "1919": {
        "fuction_name": "MurderLine",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "from": "The from position",
            "to": "The to position",
            "weapon": "The weapon used"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get all the enemy players on the line between given points and murder them to death",
        "example": "player MurderLine( origin, endpos, \"kniferang_mp\" )"
    },
    "1920": {
        "fuction_name": "NextPlayerRenderOption",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "optionName": "The tag of the next option",
            "forward": "The delta"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the next player render option",
        "example": "level.dev_cac_player NextPlayerRenderOption( tag, forward )"
    },
    "1921": {
        "fuction_name": "OffhandSpecialButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the gadget button",
        "example": "if ( self OffhandSpecialButtonPressed() ) ..."
    },
    "1922": {
        "fuction_name": "OpenLUIMenu",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "lui menu name": "name of the menu."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Opens a lui menu( has to be precahced ) and returns a handle to it.",
        "example": "player OpenLUIMenu( \"myMenu\", true )"
    },
    "1923": {
        "fuction_name": "OpenMenu",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "menu index": "The menu index"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Open the menu with the given menu index",
        "example": "self openMenu( game[ \"menu_changeclass\" ] )"
    },
    "1924": {
        "fuction_name": "OpenMenuNoMouse",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "menu index": "The menu index"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Open the menu with the given menu index",
        "example": "self OpenMenuNoMouse( game[ \"menu_changeclass\" ] )"
    },
    "1925": {
        "fuction_name": "PickupAmmoEvent",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Lets the client know a weapon was picked up",
        "example": "self PickupAmmoEvent( weapon )"
    },
    "1926": {
        "fuction_name": "PickupWeaponEvent",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Lets the client know a weapon was picked up",
        "example": "self PickupWeaponEvent( weapon )"
    },
    "1927": {
        "fuction_name": "PingPlayer",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Flashes a player on their teammate's compasses",
        "example": "self PingPlayer()"
    },
    "1928": {
        "fuction_name": "PlayBombDefuse",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play the players bomb defuse animation",
        "example": "self PlayBombDefuse()"
    },
    "1929": {
        "fuction_name": "PlayBombPlant",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play the players bomb plant animation",
        "example": "self PlayBombPlant()"
    },
    "1930": {
        "fuction_name": "PlayClientAirstrike",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "The position of airstrike",
            "yaw": "The yaw",
            "teamFaction": "The team faction",
            "team": "The team",
            "owner": "The owner of airstike",
            "exittype": "The exit type",
            "height": "The height"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Plays the client sided part of the airstrike/bombrun",
        "example": "PlayClientAirstrike( pos, yaw, \"marines\", \"axis\", owner, \"left\", height )"
    },
    "1931": {
        "fuction_name": "PlayClientNapalm",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "position": "The position of Napalm",
            "yaw": "The yaw",
            "teamFaction": "The team faction",
            "team": "The team",
            "owner": "The owner of Napalm",
            "exittype": "The exit type",
            "height": "The height"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Plays the client sided part of the Napalm",
        "example": "PlayClientNapalm( startPos, plane.yaw, \"vietcong\", \"axis\", plane.owner, \"left\", height )"
    },
    "1932": {
        "fuction_name": "PlayerADS",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the player weapon position fraction",
        "example": "if ( self PlayerADS() > 0.3 )"
    },
    "1933": {
        "fuction_name": "PlayerKnockback",
        "return_type": "void",
        "called_by": "<actor>",
        "mandatory_parameters": {
            "true/false": "if true, client affected by knockback"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Turn knockback on and off for a player",
        "example": "self PlayerKnockback( true )"
    },
    "1934": {
        "fuction_name": "PlayHitMarker",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "sound name": "The name of the sound or hash"
        },
        "optional_parameters": {
            "damage state": "How damaged the victim is",
            "perk feedback": "If the victim had any perks active that modified the hit marker",
            "is dead": "If the victim has died from this hit marker and needs a red flash"
        },
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Plays a hit marker event",
        "example": "self PlayHitMarker( \"evt_squad_activate\", 3, \"flakjacket\" )"
    },
    "1935": {
        "fuction_name": "PlayLocalSound",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "sound name": "The name of the sound or hash"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Plays a sound locally",
        "example": "self playlocalsound( \"evt_squad_activate\" )"
    },
    "1936": {
        "fuction_name": "PrimaryButtonPressedLocal",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the local player is pressing the primary button (BUTTON_A)",
        "example": "if ( self PrimaryButtonPressedLocal() ) ..."
    },
    "1937": {
        "fuction_name": "PrimeMovie",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "moviename": "movie name"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Starts priming the cinematic movie to be played.",
        "example": "self PrimeMovie( \"mymovie\" )"
    },
    "1938": {
        "fuction_name": "ReloadButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the 'usereload' button.",
        "example": "while( self reloadButtonPressed() )..."
    },
    "1939": {
        "fuction_name": "ReloadWeaponAmmo",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to be reloaded"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the weapon's ammoclip from the ammo",
        "example": "self ReloadWeaponAmmo( <weapon> )"
    },
    "1940": {
        "fuction_name": "RemoteControlTurret",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "turret": "the remote controlled turret."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Remote control into a turret",
        "example": "player RemoteControlTurret( turret )"
    },
    "1941": {
        "fuction_name": "RemoteControlTurretOff",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "turret": "the remote controlled turret."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stops remote controlling a turret",
        "example": "player RemoteControlTurretOff( turret )"
    },
    "1942": {
        "fuction_name": "ResetAnimations",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Reset player animations after a body type change",
        "example": "self ResetAnimations())"
    },
    "1943": {
        "fuction_name": "ResetCharacterCustomization",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Resets all of the character customization to what is in the player stats",
        "example": "self ResetCharacterCustomization()"
    },
    "1944": {
        "fuction_name": "ResetFlashBack",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Resets the players flashback history",
        "example": "self resetflashback()"
    },
    "1945": {
        "fuction_name": "ResetSpreadOverride",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Reset the player's aim spread to 255",
        "example": "self ResetSpreadOverride()"
    },
    "1946": {
        "fuction_name": "Revive",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Revive the player",
        "example": "self Revive())"
    },
    "1947": {
        "fuction_name": "RevivePlayer",
        "return_type": "void",
        "called_by": "<client>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Callback from script to get player out of last stand, increases health, removes damage timer, should clear screen of damageFX",
        "example": "self RevivePlayer()"
    },
    "1948": {
        "fuction_name": "SayAll",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "message": "A localizable message to send to all players"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Write a client chat message from this client to everybody",
        "example": "self SayAll( saytext )"
    },
    "1949": {
        "fuction_name": "SayTeam",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "message": "A localizable message to send to all players on the player's team."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Write a client chat message from this client to everybody on their team",
        "example": "self SayTeam( sayText )"
    },
    "1950": {
        "fuction_name": "SecondaryButtonPressedLocal",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the local player is pressing the secondary button (BUTTON_B)",
        "example": "if ( self SecondaryButtonPressedLocal() ) ..."
    },
    "1951": {
        "fuction_name": "SecondaryOffhandButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the secondary offhand button",
        "example": "if ( self SecondaryOffhandButtonPressed() ) ..."
    },
    "1952": {
        "fuction_name": "SetActionSlot",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "slot": "The action slot",
            "action slot type": "The type of slot. can be \"weapon\"/\"altMode\"/\"\""
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets action slot for the player",
        "example": "self SetActionSlot( 4, \"weapon\", level.DEAD_CONTROL_WEAPON )"
    },
    "1953": {
        "fuction_name": "SetArenaPoints",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "point": "points"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the player's arena points",
        "example": "player SetArenaPoints( 19 )"
    },
    "1954": {
        "fuction_name": "SetBlockWeaponPickup",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to set block for",
            "enabled": "True if weapon pickup should be blocked"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Blocks the player from picking up other weapons while using this weapon",
        "example": "self setBlockWeaponPickup( killstreakWeapon, true )"
    },
    "1955": {
        "fuction_name": "SetCarryingObject",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "onoff": "True to enable, false otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enable or disable the player carrying object flag. Disables doublejump and juke",
        "example": "self SetCarryingObject( true );  // disables doublejump and juke"
    },
    "1956": {
        "fuction_name": "SetCharacterBodyStyle",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "character body type index": "The index of the character body type"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the character body style for the current body type.  Resets all colors for the body style to default.",
        "example": "self SetCharacterBodyStyle( 0 )"
    },
    "1957": {
        "fuction_name": "SetCharacterBodyType",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "character body type index": "The index of the character body type"
        },
        "optional_parameters": {
            "character head type index": "The index of the character head type"
        },
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the character body type for the player.  Resets all other customization to default for the new body type.",
        "example": "self SetCharacterBodyType( 1 )"
    },
    "1958": {
        "fuction_name": "SetCharacterHelmetStyle",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "character body type index": "The index of the character body type"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the character body style for the current helmet type.  Resets all colors for the helmet style to default.",
        "example": "self SetCharacterHelmetStyle( 0 )"
    },
    "1959": {
        "fuction_name": "SetClientCGObjectiveText",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "text": "The text to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the objective text only on this client",
        "example": "self SetClientCGObjectiveText( util::getObjectiveScoreText( self.pers[\"team\"] ) )"
    },
    "1960": {
        "fuction_name": "SetClientCompass",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "value": "The value to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets compass dvar only on this client",
        "example": "self SetClientCompass( 0 )"
    },
    "1961": {
        "fuction_name": "SetClientDrawTalk",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "value": "The value to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets cg_drawTalk dvar only on this client",
        "example": "self SetClientDrawTalk( 3 )"
    },
    "1962": {
        "fuction_name": "SetClientFocalLength",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "value": "The focal length value to set (float)"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets cg_focalLength dvar only on this client",
        "example": "self SetClientFocalLength( 23.3622 )"
    },
    "1963": {
        "fuction_name": "SetClientHUDHardcore",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "value": "The value to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets ui_hud_hardcore dvar only on this client",
        "example": "self SetClientHUDHardcore( 0 )"
    },
    "1964": {
        "fuction_name": "SetClientMiniScoreboardHide",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "enable": "True/1 to hide, false/0 otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets miniscoreboardhide dvar only on this client",
        "example": "players[i] SetClientMiniScoreboardHide( true )"
    },
    "1965": {
        "fuction_name": "SetClientNumLives",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "numLives": "The numlives to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets scr_numLives dvar only on this client",
        "example": "self SetClientNumLives( level.numLives )"
    },
    "1966": {
        "fuction_name": "SetClientPlayerPushAmount",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "amount": "The push amount"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets playerPushAmount dvar only on this client",
        "example": "self SetClientPlayerPushAmount( 1 )"
    },
    "1967": {
        "fuction_name": "SetClientPlayerSprintTime",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "time": "The spring time"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets player_sprintTime dvar only on this client",
        "example": "self SetClientPlayerSprintTime( level.playerSprintTime )"
    },
    "1968": {
        "fuction_name": "SetClientScriptMainMenu",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "value": "The value to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets g_scriptMainMenu dvar only on this client",
        "example": "self SetClientScriptMainMenu( game[\"menu_class\"] )"
    },
    "1969": {
        "fuction_name": "SetClientThirdPerson",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "onoff": "1 to set, 0 otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the client to be third person",
        "example": "self SetClientThirdPerson( 1 )"
    },
    "1970": {
        "fuction_name": "SetClientThirdPersonAngle",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "angle": "The angle to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets cg_thirdPerson dvar only on this client",
        "example": "self SetClientThirdPersonAngle( 354 )"
    },
    "1971": {
        "fuction_name": "SetClientUIVisibilityFlag",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "flagName": "The name of the flag",
            "value": "The value to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a HUD visibility flag only on this client",
        "example": "e_player SetClientUIVisibilityFlag( \"hud_visible\", 1 )"
    },
    "1972": {
        "fuction_name": "SetControllerUIModelValue",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "ui model data path from controller": "precached name string for the data which we're trying to set.",
            "ui model value": "value for the data which we're trying to set on the controller."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a data value for a given lui menu, the data name has to be precached and the value as well, if its a string.",
        "example": "player SetControllerUIModelValue( \"hudItems.regenDelayProgress\", 0.2 )"
    },
    "1973": {
        "fuction_name": "SetCurrentSpectatorClient",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "client": "The client to set spectator"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the given client as a spectator",
        "example": "self SetCurrentSpectatorClient( player )"
    },
    "1974": {
        "fuction_name": "SetCurrentWeaponSpinLerp",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "spin": "The spin value"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the current weapon's spin ",
        "example": "self SetCurrentWeaponSpinLerp( 0.0 )"
    },
    "1975": {
        "fuction_name": "SetDisabledTargetHint",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set target not selected hint",
        "example": "self SetDisabledTargetHint()"
    },
    "1976": {
        "fuction_name": "SetElectrifiedState",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "electrified": ": bool whether the player should be in this state."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the player into the electrified state for 3rd person anim purposes. Different from SetElectrified() which plays the postfx",
        "example": null
    },
    "1977": {
        "fuction_name": "SetEnterTime",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "time": "The time to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the player's session enter time",
        "example": "self setEnterTime( getTime() )"
    },
    "1978": {
        "fuction_name": "SetEverHadWeaponAll",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "flag": "True to set the flag"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the EverHadAllPlayerHeldWeapons flag of the player",
        "example": "self SetEverHadWeaponAll( true )"
    },
    "1979": {
        "fuction_name": "SetHighlighted",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "onoff": "True to highlight, false otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Highlight the player",
        "example": "self SetHighlighted( true )"
    },
    "1980": {
        "fuction_name": "SetInventoryHeldWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The held weapon to be set as inventoryHeldWeapon. Use undefined to clear the inventoryHeldWeapon."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the player's inventoryHeldWeapon.",
        "example": "player SetInventoryHeldWeapon( weapon )"
    },
    "1981": {
        "fuction_name": "SetInventoryWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the inventory weapon",
        "example": "self SetInventoryWeapon( weapon )"
    },
    "1982": {
        "fuction_name": "SetLowReady",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "enable": "true to set this state"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "set the player into low ready weapon state. ",
        "example": "self SetLowReady(true)"
    },
    "1983": {
        "fuction_name": "SetLUIMenuData",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "lui menu handle": "handle to the lui menu opened.",
            "lui menu data name": "precached name string for the data which we're trying to set.",
            "lui menu data value": "value for the data which we're trying to set on the menu."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a data value for a given lui menu, the data name has to be precached and the value as well, if its a string.",
        "example": "player SetLUIMenuData( menu, \"title\", \"Some Title\" )"
    },
    "1984": {
        "fuction_name": "SetModelLodBias",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "bias": "bias. Setting of 0 reverts to the model lod bias."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the model lod bias",
        "example": "player SetModelLodBias( 8 )"
    },
    "1985": {
        "fuction_name": "SetNoLOSOnTargetsHint",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set target not selected hint",
        "example": "self SetNoLOSOnTargetsHint()"
    },
    "1986": {
        "fuction_name": "SetNoTargetsHint",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set target not selected hint",
        "example": "self SetNoTargetsHint()"
    },
    "1987": {
        "fuction_name": "setOffhandPrimaryClass",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "name": "the weapon name"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set whether the player is using a grenade or gear.",
        "example": "player setOffhandPrimaryClass( \"claymore_mp\" )"
    },
    "1988": {
        "fuction_name": "SetOffhandSecondaryClass",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "name": "the weapon name"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set whether the player is using a flash or smoke grenade.",
        "example": "player SetOffhandSecondaryClass( \"concussion_grenade_mp\" )"
    },
    "1989": {
        "fuction_name": "SetOffhandVisible",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "onoff": "True/1 to enable, false otherwise"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enable or disable visibility of the offhand weapon",
        "example": "self SetOffhandVisible( true )"
    },
    "1990": {
        "fuction_name": "SetOrigin",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "origin": "The origin to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the player's origin",
        "example": "player SetOrigin( v_origin )"
    },
    "1991": {
        "fuction_name": "SetParagonIconId",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "paragon icon id": "the paragon rank id"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the player's paragon icon id",
        "example": "player SetParagonIconId( 1, 1 )"
    },
    "1992": {
        "fuction_name": "SetParagonRank",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "paragon rank id": "the paragon rank id"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the player's paragon rank",
        "example": "player SetParagonRank( 1, 1 )"
    },
    "1993": {
        "fuction_name": "SetPerk",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "perk name": "the perk to give"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "give the specified perk",
        "example": "player SetPerk( \"specialty_gpsjammer\" )"
    },
    "1994": {
        "fuction_name": "SetPlacementHint",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "onoff": "true if the hint should say that the weapon can be placed, false if not"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the placement hint string that will be displayed for this player.",
        "example": "player SetPlacementHint( turret.canBePlaced )"
    },
    "1995": {
        "fuction_name": "SetPlayerAngles",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "angles": "The view angles to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the player's view angles",
        "example": "player SetPlayerAngles( v_angles )"
    },
    "1996": {
        "fuction_name": "SetPlayerRenderOptions",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "options": "The player render options"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the player render options",
        "example": "self SetPlayerRenderOptions( playerRenderOptions );\t"
    },
    "1997": {
        "fuction_name": "SetRank",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "rank id": "the rank id"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the player's rank and prestige level",
        "example": "player SetRank( 1, 2 )"
    },
    "1998": {
        "fuction_name": "SetRiotshieldFailHint",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set riot shield fail hint",
        "example": "self SetRiotshieldFailHint()"
    },
    "1999": {
        "fuction_name": "SetSpawnWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon name": "The name of the weapon to spawn with"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the weapon that this player will spawn with",
        "example": "self SetSpawnWeapon( \"ak47\" )during prematch period or grace period in mp)"
    },
    "2000": {
        "fuction_name": "SetSpreadOverride",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "value": "The value to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the player's aim spread ",
        "example": "self SetSpreadOverride( 0 )"
    },
    "2001": {
        "fuction_name": "SetSprintCooldown",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "duration": "The duration to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the player's sprint cooldown duration",
        "example": "self SetSprintCooldown( 4 )"
    },
    "2002": {
        "fuction_name": "SetSprintDuration",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "duration": "The duration to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the player's sprint duration",
        "example": "self SetSprintDuration( 4 )"
    },
    "2003": {
        "fuction_name": "SetSunShadowSplitDistance",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "distance": "split distance. Setting of 0 reverts to the default split distance."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the sun shadow split distance for the player",
        "example": "player SetSunShadowSplitDistance( 200 )"
    },
    "2004": {
        "fuction_name": "SetTacticalWheel",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "enabled": "turn on or off"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets whether this player will be able to use the cybercom tactical wheel or not",
        "example": "player SetTacticalWheel( true )"
    },
    "2005": {
        "fuction_name": "SetTargetAlreadyInUseHint",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set  target already in use failure hint",
        "example": "self SetTargetAlreadyInUseHint()"
    },
    "2006": {
        "fuction_name": "SetTargetAlreadyTargetedHint",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set target already being targeted hint",
        "example": "self SetTargetAlreadyTargetedHint()"
    },
    "2007": {
        "fuction_name": "SetTargetedEntityEndTime",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon (player should have this weapon)",
            "endtime": "The end time of the targeted entity"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set targeted entity end time, for use on the client side in the UI. ",
        "example": "self SetTargetedEntityEndTime( weapon, 0.0 )"
    },
    "2008": {
        "fuction_name": "SetTargetedMissilesRemaining",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon (player should have this weapon)",
            "missilesRemaining": "The amount of missiles remaining to destroy the target"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set targeted entity missiles remaining, for use on the client side in the UI. ",
        "example": "self SetTargetedMissilesRemaining( weapon, 0.0 )"
    },
    "2009": {
        "fuction_name": "SetTargetingAbortedHint",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set targeting aborted hint",
        "example": "self SetDisabledTargetHint()"
    },
    "2010": {
        "fuction_name": "SetTargetOORHint",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set out of range failure hint",
        "example": "self SetTargetOORHint()"
    },
    "2011": {
        "fuction_name": "SetTargetWrongTypeHint",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set target validity failure hint",
        "example": "self SetTargetWrongTypeHint()"
    },
    "2012": {
        "fuction_name": "SetVehicleDamageMeter",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "damage": "the amount of damage normalized 0..1"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the vehicle damage meter",
        "example": "player SetRefEndTime( killstreaEndTime )"
    },
    "2013": {
        "fuction_name": "SetVehicleDrivableDuration",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "duration": "the drivable duration in milliseconds"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the drivable duration for the players vehicle (intended for use with client side display purposes)",
        "example": "player SetVehicleDrivableDuration( killstreakDuration )"
    },
    "2014": {
        "fuction_name": "SetVehicleDrivableEndTime",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "end time": "the drivable end time in milliseconds"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the vehicle drivable end time.",
        "example": "player SetVehicleDrivableEndTime( killstreakEndTime )"
    },
    "2015": {
        "fuction_name": "SetVehicleFocusEntity",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "focus entity": "The entity to focus on"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the focus entity for a player driven vehicle (currently only supported by helicopters).  This will attempt to make the vehicle orient towards the focus target.",
        "example": "player SetVehicleFocusEntity( focusEntity )"
    },
    "2016": {
        "fuction_name": "SetVehicleLockedOnByEnt",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "entity": "an entity that acquired a missile lock on the player's vehicle"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the vehicle locked on by entity",
        "example": "player SetVehicleLockedOnByEnt( mostDangerousEnemyWithLockOn )"
    },
    "2017": {
        "fuction_name": "SetVehicleWeaponWaitDuration",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "duration": "the weapon reload (or recharge) duration in milliseconds"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the weapon wait duration for the players vehicle (intended for use with client side display purposes)",
        "example": "player SetVehicleWeaponWaitDuration( reloadDuration )"
    },
    "2018": {
        "fuction_name": "SetVehicleWeaponWaitEndTime",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "end time": "the weapon wait end time in milliseconds"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the vehicle weapon wait end time.",
        "example": "player SetVehicleWeaponWaitEndTime( weaponReloadEndTime )"
    },
    "2019": {
        "fuction_name": "SetVelocity",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "velocity": "The velocity to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the velocity of the player",
        "example": "self setvelocity(force)"
    },
    "2020": {
        "fuction_name": "SetViewClamp",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the view clamp for the player, only works during animscripted for now.  Ranges are relative to tag_camera.  Left, Right, Top, Bottom",
        "example": "player SetViewClamp( 50, 50, 30, 30 )"
    },
    "2021": {
        "fuction_name": "SetWeaponAmmoClip",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon",
            "ammo": "The ammo count"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the weapon's ammo",
        "example": "self SetWeaponAmmoClip( weapon, weapon.clipSize )"
    },
    "2022": {
        "fuction_name": "SetWeaponAmmoFuel",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon",
            "fuel": "The ammo fuel amount"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the weapon ammo fuel",
        "example": "self SetWeaponAmmoFuel( weapon, weapondata[\"fuel\"] )"
    },
    "2023": {
        "fuction_name": "SetWeaponAmmoStock",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon",
            "ammo": "The new ammo count"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the weapon's ammo",
        "example": "reviver SetWeaponAmmoStock( level.weaponReviveTool, 1 )"
    },
    "2024": {
        "fuction_name": "SetWeaponFriendlyHacking",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon (player should have this weapon)",
            "isFriendlyHacking": "Set to true if a friendly is hacking the target"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the weapon lockon completion percentage",
        "example": "self SetWeaponFriendlyTargetLocked( weapon, 0.0 )"
    },
    "2025": {
        "fuction_name": "SetWeaponFriendlyTargeting",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon (player should have this weapon)",
            "isFriendlyTargeting": "Set to true if a friendly is targetting"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the weapon lockon completion percentage",
        "example": "self SetWeaponFriendlyTargeting( weapon, 0.0 )"
    },
    "2026": {
        "fuction_name": "SetWeaponFriendlyTargetLocked",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon (player should have this weapon)",
            "isFriendlyTargetLocked": "Set to true if a friendly is target locked"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the weapon lockon completion percentage",
        "example": "self SetWeaponFriendlyTargetLocked( weapon, 0.0 )"
    },
    "2027": {
        "fuction_name": "SetWeaponHackPercent",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon (player should have this weapon)",
            "heat": "The heat percent to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the weapon hack completion percentage",
        "example": "self SetWeaponHackPercent( weapon, 0.0 )"
    },
    "2028": {
        "fuction_name": "SetWeaponHeatPercent",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon (player should have this weapon)",
            "heat": "The heat percent to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the weapon heat percentage",
        "example": "self SetWeaponHeatPercent( weapon, 0.0 )"
    },
    "2029": {
        "fuction_name": "SetWeaponLockOnPercent",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon (player should have this weapon)",
            "heat": "The heat percent to set"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the weapon lockon completion percentage",
        "example": "self SetWeaponLockOnPercent( weapon, 0.0 )"
    },
    "2030": {
        "fuction_name": "SetWeaponOverheating",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "overheat": "Whether the weapon is overheating.",
            "heatval": "The new heatval of the weapon (0 to 100)."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the players Weapon Overheating value",
        "example": "self SetWeaponOverheating( weapondata[\"overheat\"], weapondata[\"heat\"], weapon )"
    },
    "2031": {
        "fuction_name": "ShowViewModel",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Show the player's current view model.",
        "example": "player ShowViewModel()"
    },
    "2032": {
        "fuction_name": "SortHeldWeapons",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sort the playerState heldWeapons to remove empty spaces",
        "example": "e_player SortHeldWeapon()"
    },
    "2033": {
        "fuction_name": "SpawnSpectator",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "origin": "origin to spawn",
            "angles": "angles to spawn"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Spawns the player, does not send any notifies",
        "example": null
    },
    "2034": {
        "fuction_name": "SprintButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the 'sprint' button.",
        "example": "while( self SprintButtonPressed() )..."
    },
    "2035": {
        "fuction_name": "SprintUpRequired",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Force the player to release the sprint button before sprinting.",
        "example": "self SprintUpRequired()"
    },
    "2036": {
        "fuction_name": "StanceButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the 'stance' button.",
        "example": "while( self StanceButtonPressed() )..."
    },
    "2037": {
        "fuction_name": "StartCameraTween",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "time": "How long to do the blend.\""
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Start a camera tween, call this right before a camera pop to do a blend.",
        "example": "player StartCameraTween( 0.5 );"
    },
    "2038": {
        "fuction_name": "StartRevive",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "reviver": "the player reviving the player this is called on"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Starts the revive sequence on a player. <reviver> is the one administering aid to the player this is called on.",
        "example": "playerInLastStand StartRevive( rescuer )"
    },
    "2039": {
        "fuction_name": "StopCarryTurret",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "turret": "turret entity"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "UnLinks the auto turret from the player and sets it on the ground.",
        "example": "player StopCarryTurret( turret, origin, angles )"
    },
    "2040": {
        "fuction_name": "StopLocalSound",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "sound name": "The name of the sound"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stops the local sound",
        "example": "targetent StopLocalSound( level.missileDroneSoundStart )"
    },
    "2041": {
        "fuction_name": "StopRevive",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "reviver": "the player reviving the player this is called on"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stops the revive behavior on a player when the revive did not complete. <reviver> is the one administering aid to the player this is called on.",
        "example": "playerInLastStand StopRevive( rescuer )"
    },
    "2042": {
        "fuction_name": "Suicide",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Kills the player immediately as a suicide",
        "example": "self suicide()"
    },
    "2043": {
        "fuction_name": "SwitchToOffHand",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "Weapon to switch to"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Switch to the offhand weapon",
        "example": "self SwitchToOffhand( primaryOffhand )"
    },
    "2044": {
        "fuction_name": "SwitchToWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Switch to a different weapon or cycle weapons if no weapon is given",
        "example": "level.player SwitchToWeapon( weapon )"
    },
    "2045": {
        "fuction_name": "SwitchToWeaponImmediate",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Switch to a different weapon or cycle weapons if no weapon is given without playing the dropping animation for current weapon",
        "example": "level.player SwitchToWeaponImmediate( weapon )"
    },
    "2046": {
        "fuction_name": "TakeAllWeapons",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Makes the player take all weapons",
        "example": "player TakeAllWeapons()"
    },
    "2047": {
        "fuction_name": "TakeWeapon",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon": "The weapon to take"
        },
        "optional_parameters": {
            "ignore_attachments": "Only check the root weapon, ignore all the attachments."
        },
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Take the weapon",
        "example": "e_player TakeWeapon( w_spike_launcher )"
    },
    "2048": {
        "fuction_name": "ThrowButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the 'throw' button.",
        "example": "while( self ThrowButtonPressed() )..."
    },
    "2049": {
        "fuction_name": "TurnedHuman",
        "return_type": "void",
        "called_by": "<client>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Called when client is turned back to human",
        "example": "self TurnedHuman()"
    },
    "2050": {
        "fuction_name": "UndoLastStand",
        "return_type": "void",
        "called_by": "<client>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Undo the last stand for the client",
        "example": "self UndoLastStand()"
    },
    "2051": {
        "fuction_name": "UnlinkFromMissile",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Unlinks a player camera from a missile",
        "example": "player UnlinkFromMissile()"
    },
    "2052": {
        "fuction_name": "UnlinkGuidedMissileCamera",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "clear player eflags for the guided missile",
        "example": "player UnlinkGuidedMissileCamera()"
    },
    "2053": {
        "fuction_name": "UnSetPerk",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "perk name": "the perk to unset"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "takes the specified perk from the player",
        "example": "player UnSetPerk( \"specialty_gpsjammer\" )"
    },
    "2054": {
        "fuction_name": "UpdateWeaponOptions",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "weapon name": "The weapon name to give to the player"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Update weapon options for a weapon that the player has",
        "example": "player UpdateWeaponOptions( \"m1garand\", player calcWeaponOptions() )"
    },
    "2055": {
        "fuction_name": "UseButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the use button",
        "example": "if ( self UseButtonPressed() ) ..."
    },
    "2056": {
        "fuction_name": "VehicleMoveUpButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the 'stance' button.",
        "example": "while( self StanceButtonPressed() )..."
    },
    "2057": {
        "fuction_name": "WeaponLockCount",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "returns the number of active lock objects (i.e. those with at least lock started or lock set active)",
        "example": "player WeaponLockCount()"
    },
    "2058": {
        "fuction_name": "WeaponLockDetect",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "entity": ": An entity."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the tartget as detected.  Will clear any existing hard lock.  Use WeaponLockStart() to start lock.",
        "example": "player WeaponLockDetect( enemyGuy )"
    },
    "2059": {
        "fuction_name": "WeaponLockFinalize",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "entity": ": An entity."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Locks player's weapon onto an entity.  Implies WeaponLockStart(), so this may be called to jump to a hard lock.",
        "example": "player WeaponLockFinalize( enemyGuy )"
    },
    "2060": {
        "fuction_name": "WeaponLockFree",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears player's weapon lock.",
        "example": "player WeaponLockClear()"
    },
    "2061": {
        "fuction_name": "WeaponLockNoClearance",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "bool": ": true or false."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "When set true, the player will be unable to fire their lockon weapon, and will recieve a hint print telling them that there is an obstruction.",
        "example": "player WeaponLockNoClearance( true )"
    },
    "2062": {
        "fuction_name": "WeaponLockRemoveSlot",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "slot": "The weapon slot. Default is 0"
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "removes the given slot values and compresses the remaining slots  (i.e. 1,2,3 with 2 removed becomes 1,3,blank)",
        "example": "player WeaponLockGetFlags()"
    },
    "2063": {
        "fuction_name": "WeaponLockStart",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "entity": ": An entity."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Begins player's weapon lockon sequence (hud effects, etc).  Will clear any existing hard lock.  Use WeaponLockFinalize() to complete lock.",
        "example": "player WeaponLockStart( enemyGuy )"
    },
    "2064": {
        "fuction_name": "WeaponLockTargetTooClose",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {
            "bool": ": true or false."
        },
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "When set true, the player will be unable to fire their lockon weapon, and will recieve a hint print telling them that they are too close.",
        "example": "player WeaponLockTargetTooClose( true )"
    },
    "2065": {
        "fuction_name": "WeaponPlayEjectBrass",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Play the eject brass FX for a weapon.",
        "example": "player WeaponPlayEjectBrass()"
    },
    "2066": {
        "fuction_name": "WeaponSwitchButtonPressed",
        "return_type": "void",
        "called_by": "<player>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Player",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Check if the player is pressing the weapon switch button",
        "example": "if ( self WeaponSwitchButtonPressed() ) ..."
    },
    "2067": {
        "fuction_name": "ChangeFontScaleOverTime",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "time": "The time to scale the element font in seconds"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a hud element to transition in fontScale over time.  Normally setting the fontScale of an element causes an immediate visual change. However, if the fontScale gets set within <time> after calling ChangeFontScaleOverTime, then the hud element will transition to the new fontScale over the remaining <time>.",
        "example": "level.introstring1 ChangeFontScaleOverTime( 1.2 );  level.introstring1.fontScale = 0.3;  // This will transition the fontScale from whatever it was before to the new value of 0.3 over 1.2 seconds."
    },
    "2068": {
        "fuction_name": "ClearTargetEnt",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clear this waypoint from targetting an entity.",
        "example": "waypoint ClearTargetEnt()"
    },
    "2069": {
        "fuction_name": "CloseLUIMenu",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Number of the local client on the machine.",
            "menuIndex": "Menu ID received from CreateLUIMenu."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Close the LUI menu specified.",
        "example": "CloseLUIMenu( localClientNum, menuIndex )"
    },
    "2070": {
        "fuction_name": "CreateLUIMenu",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Number of the local client on the machine.",
            "name": "Name of the menu to create."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Creates a LUI menu to be opened later with OpenLUIMenu.",
        "example": "CreateLUIMenu( localClientNum, \"ScriptDebugMenu\")"
    },
    "2071": {
        "fuction_name": "CreateUIModel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "parentModel": "The parent model of the model to retrieve.",
            "newPathName": "The name/path of the new model to create."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Creates and returns a UIModel from a parent model.",
        "example": "CreateUIModel( gameScoreModel, \"enZemeyScore\" )"
    },
    "2072": {
        "fuction_name": "Destroy",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Remove this Hud element altogether.",
        "example": "self.bombstopwatch Destroy()"
    },
    "2073": {
        "fuction_name": "FadeOverTime",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "time": "The time to fade the element in seconds"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a hud element to transition in color (or alpha) over time.  Normally setting the color (or alpha) of an element causes an immediate visual change. However, if the color (or alpha) gets set within <time> after calling fadeOverTime, then the hud element will transition to the new color over the remaining <time>.",
        "example": "level.introstring1 FadeOverTime( 1.2 );  level.introstring1.alpha = 0.3;  // This will transition the alpha from whatever it was before to the new value of 0.3 over 1.2 seconds."
    },
    "2074": {
        "fuction_name": "FreeUIModel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "modelToFree": "The model to free."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Frees a UIModel.",
        "example": "FreeUIModel( gameScoreModel )"
    },
    "2075": {
        "fuction_name": "GetGlobalUIModel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the gloabl UIModel.",
        "example": "GetGlobalModel()"
    },
    "2076": {
        "fuction_name": "GetLUIMenu",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Number of the local client on the machine.",
            "menuName": "Menu name"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets the first instance found of a given menu name active for the given client (undefined if not found)",
        "example": "menuIndex = GetLUIMenu( localClientNum, \"HudElementImage\" )"
    },
    "2077": {
        "fuction_name": "GetLUIMenuData",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Number of the local client on the machine.",
            "menuIndex": "Menu ID received from CreateLUIMenu.",
            "menuDataName": "Menu Data Name linked to the UIModel."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Gets data from a LUI menu.",
        "example": "modelValue = GetLUIMenuData( localClientNum, menuIndex, \"title\" )"
    },
    "2078": {
        "fuction_name": "GetTextWidth",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returned the width of the text in the hudelem.",
        "example": "width = elem GetTextWidth()"
    },
    "2079": {
        "fuction_name": "GetUIModel",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "parentModel": "The parent model of the model to retrieve.",
            "lookupModelName": "The name of the model to retrieve."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns a UIModel from the parent model passed in and the name of the model to retrieve.",
        "example": "GetUIModel( gameScoreModel, \"enemeyScore\" )"
    },
    "2080": {
        "fuction_name": "GetUIModelForController",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Number of the local client on the machine."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the UIModel from the controller root.",
        "example": "GetUIModelForController( localClientNum )"
    },
    "2081": {
        "fuction_name": "GetUIModelValue",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "model": "Model of the value to retrieve."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the value of the UIModel passed in.",
        "example": "GetUIModelValue( gameScoreModel )"
    },
    "2082": {
        "fuction_name": "IsLuiEnabled",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "true if lui system has the input focus",
        "example": "if( IsLuiEnabled() )"
    },
    "2083": {
        "fuction_name": "LuiDisable",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localclientnum": "The local client"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "user input is removed from lui system",
        "example": "LuiDisable( 0 )"
    },
    "2084": {
        "fuction_name": "LuiEnable",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localclientnum": "The local client",
            "menuname": "The name of the menu to enable"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "user input is handed to lui system until returned",
        "example": "LuiEnable(\"overlay\")"
    },
    "2085": {
        "fuction_name": "LuiLoad",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Loads a lui file, making the menus available for addition",
        "example": "LuiLoad(\"overlay\")"
    },
    "2086": {
        "fuction_name": "MoveOverTime",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "time": "The time to move the element in seconds"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a hud element to move over time.",
        "example": "newStr MoveOverTime( timer )"
    },
    "2087": {
        "fuction_name": "NewClientHudElem",
        "return_type": "hudelem",
        "called_by": null,
        "mandatory_parameters": {
            "client": "The client for whom the hud element is created."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Create a new hud element for a particular client",
        "example": "self.kc_topbar = NewClientHudElem(self)"
    },
    "2088": {
        "fuction_name": "NewDamageIndicatorHudElem",
        "return_type": "hudelem",
        "called_by": null,
        "mandatory_parameters": {
            "client": "The client for whom the hud element is created."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Create a new hud element for a particular client",
        "example": "self.kc_topbar = NewClientHudElem(self)"
    },
    "2089": {
        "fuction_name": "NewDebugHudElem",
        "return_type": "hudelem",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": null,
        "example": null
    },
    "2090": {
        "fuction_name": "NewHudElem",
        "return_type": "hudelem",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Create a new hud element",
        "example": "overlay = NewHudElem()"
    },
    "2091": {
        "fuction_name": "NewScoreHudElem",
        "return_type": "hudelem",
        "called_by": null,
        "mandatory_parameters": {
            "client": "The client for whom the hud element is created."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Create a new score hud element for a particular client",
        "example": "self.hud_rankscroreupdate = NewScoreHudElem(self)"
    },
    "2092": {
        "fuction_name": "NewTeamHudElem",
        "return_type": "hudelem",
        "called_by": null,
        "mandatory_parameters": {
            "team": "The team for whom the hud element is created. Must be 'axis', 'allies' or 'spectator'"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Create a new hud element for a particular team",
        "example": "level.progressbar_allies_neutralize = NewTeamHudElem( \"axis\" )"
    },
    "2093": {
        "fuction_name": "OpenLUIMenu",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Number of the local client on the machine.",
            "menuIndex": "Menu ID received from CreateLUIMenu."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Opens a loaded LUI menu.",
        "example": "OpenLUIMenu( localClientNum, menuIndex )"
    },
    "2094": {
        "fuction_name": "OpenLUIPopup",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Number of the local client on the machine.",
            "name": "Name of the popup menu to open."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Opens a loaded LUI menu.",
        "example": "OpenLUIPopup( localClientNum, \"SomePopup\")"
    },
    "2095": {
        "fuction_name": "PopulateScriptDebugMenu",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Number of the local client on the machine.",
            "array": "Array of menu item names for the debug menu."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets a UIModel from the model being passed in.",
        "example": "PopulateScriptDebugMenu( localClientNum, menu_items_array )"
    },
    "2096": {
        "fuction_name": "Reset",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Reset a HUD element to its default state.",
        "example": "element Reset()"
    },
    "2097": {
        "fuction_name": "ScaleOverTime",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "time": "The time to scale the element in seconds",
            "width": "The new width of the material.",
            "height": "The new height of the material."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a hud element to scale over time.",
        "example": "other.progressbar ScaleOverTime( level.planttime, level.barsize, 8 )"
    },
    "2098": {
        "fuction_name": "SetClock",
        "return_type": "void",
        "called_by": "<hud_clock_element>",
        "mandatory_parameters": {
            "time": "The time in seconds represented by a full cycle of the hand, for instance a stopwatch would be 60s.",
            "material": "The material for the hud clock"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a clock HUD element to count down over a time period.",
        "example": "level.bombstopwatch SetClock( 5, 60, \"hudStopwatch\", 64, 64 )"
    },
    "2099": {
        "fuction_name": "SetClockUp",
        "return_type": "void",
        "called_by": "<hud_clock_element>",
        "mandatory_parameters": {
            "time": "The new timer time in seconds to count up",
            "full time": "The time in seconds represented by a full cycle of the hand, for instance a stopwatch would be 60s.",
            "material": "The material for the hud clock"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a clock HUD element to count up over a time period.",
        "example": "level.bombstopwatch SetClockUp( 5, 60, \"hudStopwatch\", 64, 64 )"
    },
    "2100": {
        "fuction_name": "SetCOD7DecodeFX",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "decodeTime": "Time for each letter to decode.",
            "decayStart": "Time to wait before starting the text decay effect.",
            "decayDuration": "How long to spend decaying."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the hudelem string to display with a decode effect.",
        "example": "elem SetCOD7DecodeFX( 2000, 600 )"
    },
    "2101": {
        "fuction_name": "SetExtraCamRenderReady",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "jobIdx": "Extra Cam Render job index."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets an extra cam render job to start processing",
        "example": "StartExtraCamRender( 2 )"
    },
    "2102": {
        "fuction_name": "SetGameTypeString",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "game type": "A string containing the game type"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the game type string for the game",
        "example": null
    },
    "2103": {
        "fuction_name": "SetLUIMenuData",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "Number of the local client on the machine.",
            "menuIndex": "Menu ID received from CreateLUIMenu.",
            "menuDataName": "Menu Data Name linked to the UIModel.",
            "menuDataValue": "Value for that piece of menu data."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Set data for LUI menu.",
        "example": "SetLUIMenuData( localClientNum, menuIndex, \"title\", \"Some Title\" )"
    },
    "2104": {
        "fuction_name": "SetMapNameString",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "map name": "A string containing the map name"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the map name string",
        "example": null
    },
    "2105": {
        "fuction_name": "SetPerks",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "client": "client we should be showing the perks of"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a hud element to be a perks element.",
        "example": "hudelement SetPerks( true )"
    },
    "2106": {
        "fuction_name": "SetPlayerNameString",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "player": "A player entity"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the player name string for a HUD element",
        "example": null
    },
    "2107": {
        "fuction_name": "SetPulseFX",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "speed": "Time (in milliseconds) each letter takes to type out.",
            "decayStart": "Time to wait before starting the string's decay effect.",
            "decayDuration": "How long to spend decaying."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the hudelem string to display with a \"Pulse\" effect.",
        "example": "elem SetPulseFX( 40, 2000, 600 )"
    },
    "2108": {
        "fuction_name": "SetRedactFX",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "decayStart": "Time to wait before starting the text decay effect.",
            "decayDuration": "How long to spend decaying.",
            "redactDecayStart": "Time to wait before starting the redact decay effect.",
            "redactDecayDuration": "How long to spend decaying."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the hudelem string to display with a redact effect.",
        "example": "elem SetRedactFX( 2000, 600, 3000, 400 )"
    },
    "2109": {
        "fuction_name": "SetShader",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "materialname": "A the name of the material to set"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the material for this Hud Element",
        "example": "waypoint SetShader( \"playbook_objective_stop\", 15, 15 )"
    },
    "2110": {
        "fuction_name": "SetTargetEnt",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "entity": "Entity to Target"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the entity that this waypoint should target.  In MP, entity should already be a broadcasting entity, as with Objective_OnEntity().",
        "example": "waypoint SetTargetEnt( level.axis.bombcarrier )"
    },
    "2111": {
        "fuction_name": "SetTenthsTimer",
        "return_type": "void",
        "called_by": "<hud_timer_element>",
        "mandatory_parameters": {
            "time": "The new timer time"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a timer HUD element to count down in tenths of a second",
        "example": "self.kc_timer SetTenthsTimer( self.archivetime - delay )"
    },
    "2112": {
        "fuction_name": "SetTenthsTimerUp",
        "return_type": "void",
        "called_by": "<hud_timer_element>",
        "mandatory_parameters": {
            "time": "The new timer time"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a timer HUD element to count up in tenths of a second",
        "example": "self.kc_timer SetTenthsTimerUp( self.archivetime - delay )"
    },
    "2113": {
        "fuction_name": "SetText",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "text": "A localized text reference"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set HUD text for this element.",
        "example": "level.introstring1 SetText(string1)"
    },
    "2114": {
        "fuction_name": "SetTimer",
        "return_type": "void",
        "called_by": "<hud_timer_element>",
        "mandatory_parameters": {
            "time": "The new timer time"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a timer HUD element to count down",
        "example": "level.reinforcement_hud SetTimer( level.counter )"
    },
    "2115": {
        "fuction_name": "SetTimerUp",
        "return_type": "void",
        "called_by": "<hud_timer_element>",
        "mandatory_parameters": {
            "time": "The new timer time"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a timer HUD element to count up",
        "example": "level.reinforcement_hud SetTimerUp( level.counter )"
    },
    "2116": {
        "fuction_name": "SetTypewriterFX",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "letterTime": "Time it take for each letter to type in.",
            "decayStart": "Time to wait before starting the text decay effect.",
            "decayDuration": "How long to spend decaying."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the hudelem string to display with a redact effect.",
        "example": "elem SetTypewriterFX( 100, 600, 3000 )"
    },
    "2117": {
        "fuction_name": "SetUIModelValue",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "model": "Model of the value to set.",
            "value": "Value to set."
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Sets a UIModel from the model being passed in.",
        "example": "SetUIModelValue( gameScoreModel )"
    },
    "2118": {
        "fuction_name": "SetValue",
        "return_type": "void",
        "called_by": "<hud_value_element>",
        "mandatory_parameters": {
            "value": "The value to set the element to"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set a value HUD element to a given value.",
        "example": "level.reinforcement_hud SetValue( 0 )"
    },
    "2119": {
        "fuction_name": "SetWarGameData",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "momentumProgress": ", <momentumMultiplier>, <momentumBlitzkriegTime>"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates a WAR specific HUD progress element",
        "example": "hudelement SetWarGameData( 0, 1, 30 )"
    },
    "2120": {
        "fuction_name": "SetWayPoint",
        "return_type": "void",
        "called_by": "<hud_element>",
        "mandatory_parameters": {
            "constantSize": "boolean describing whether the hud element remains the same size"
        },
        "optional_parameters": {},
        "category": "UI",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a hud element to be a waypoint.",
        "example": "newdeathicon SetWayPoint( true )"
    },
    "2121": {
        "fuction_name": "array",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "args": "one or more args to add to the array"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "create an array",
        "example": null
    },
    "2122": {
        "fuction_name": "ArrayCombine",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "array1": "array to operate on",
            "array2": "array to operate on",
            "allowdupes": "if true then allow duplicate entries, otherwise prune them out when combining",
            "preserve_keys": "if true then preserve the keys (only for string keys) otherwise renumber when combining"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "combine two arrays into and returns one new array",
        "example": null
    },
    "2123": {
        "fuction_name": "ArrayCopy",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "array1": "array to operate on"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "returns a copy of an array",
        "example": null
    },
    "2124": {
        "fuction_name": "ArrayGetClosest",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "The origin to get closest from",
            "array": "The array to search in"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the entity/vector that is closest to the <origin> from the <array>.",
        "example": "ent = ArrayGetClosest( player.origin, a_enemies )"
    },
    "2125": {
        "fuction_name": "ArrayGetFarthest",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "The origin to get farthest from",
            "array": "The array to search in"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the entity/vector that is farthest to the <origin> from the <array>.",
        "example": "ent = ArrayGetFarthest( player.origin, a_enemies )"
    },
    "2126": {
        "fuction_name": "ArrayInsert",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "array": "array to operate on",
            "value": "value to insert",
            "index": "index at which to insert the value (must be an integer) - moves existing entries as required"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "insert a value into an array at a given index",
        "example": null
    },
    "2127": {
        "fuction_name": "ArrayIntersect",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "array1": "An Array",
            "array2": "An Array"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns an array of values that are present in both arrays.",
        "example": "newArray = ArrayIntersect( array1, array2 )"
    },
    "2128": {
        "fuction_name": "ArrayRemoveIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "array": "array to operate on",
            "index": "index of value to remove"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Remove a value from an array at a given index",
        "example": null
    },
    "2129": {
        "fuction_name": "ArrayRemoveValue",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "array": "array to operate on",
            "value": "value to remove (may be undefined)"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Remove a value from an array (may affect multiple indexes)",
        "example": null
    },
    "2130": {
        "fuction_name": "Assert",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "value": "statement that is asserted to be correct"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Assert that the given statement is correct. The function will throw a script error if this is false.",
        "example": "Assert( enemyInSight == true )"
    },
    "2131": {
        "fuction_name": "AssertMsg",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "message": "error message"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Throws a script error with the given message.",
        "example": "AssertMsg( \"Unhandled enemy type.\" )"
    },
    "2132": {
        "fuction_name": "associativeArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {
            "key_i": "the string key for the next value",
            "value_i": "the value for the previous key"
        },
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "creates an associativeArray",
        "example": null
    },
    "2133": {
        "fuction_name": "ClientHasSnapshot",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "local client": "the desired Local Client number."
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if client has recieved a snapshot from the server",
        "example": null
    },
    "2134": {
        "fuction_name": "ErrorMsg",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "message": "error message"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Throws a non-fatal script error with the given message.",
        "example": "ErrorMsg( \"Unhandled enemy type.\" )"
    },
    "2135": {
        "fuction_name": "GetArrayKeys",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "array": "Input array"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns an array consisting of the keys of the input array.",
        "example": "result = GetArrayKeys( array )"
    },
    "2136": {
        "fuction_name": "GetAttachmentTableIndex",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "attachmentRef": "Attachment Reference"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the attachment table index for the attachment name",
        "example": "attachmentIndex = GetAttachmentTableIndex( \"reflex\" )"
    },
    "2137": {
        "fuction_name": "GetDvarFloat",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "dvar": "The dvar name as a string or hash."
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Gets the value of a dvar.",
        "example": "GetDvarFloat( \"r_eyesAdjust\", 1.0 )"
    },
    "2138": {
        "fuction_name": "GetDvarInt",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "dvar": "The dvar name as a string or hash."
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Gets the value of a dvar.",
        "example": "GetDvarInt( \"r_eyesAdjust\", 1 )"
    },
    "2139": {
        "fuction_name": "GetDvarString",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "dvar": "The dvar name as a string or hash."
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Gets the value of a dvar.",
        "example": "GetDvarString( \"r_eyesAdjust\", \"yes\" )"
    },
    "2140": {
        "fuction_name": "GetDvarVector",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "dvar": "The dvar name as a string or hash."
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Gets the value of a dvar.",
        "example": "GetDvarVector( \"r_eyesAdjust\", (1,0,0) )"
    },
    "2141": {
        "fuction_name": "GetFirstArrayKey",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "array": "Input array"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the first key of the input array.",
        "example": "key = GetFirstArrayKey( array )"
    },
    "2142": {
        "fuction_name": "GetItemIndexFromRef",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "itemRef": "Item Reference"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the item index for the specified item reference",
        "example": "itemIndex = GetItemIndexFromRef( <itemRef> )"
    },
    "2143": {
        "fuction_name": "GetLastArrayKey",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "array": "Input array"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the last key of the input array.",
        "example": "key = GetLastArrayKey( array )"
    },
    "2144": {
        "fuction_name": "GetMapCenter",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the map center",
        "example": "center = GetMapCenter()"
    },
    "2145": {
        "fuction_name": "GetNextArrayKey",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "array": "Input array",
            "key": "The given key"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the next key of the input array, after the specified key.",
        "example": "key = GetNextArrayKey( array, key )"
    },
    "2146": {
        "fuction_name": "GetPrevArrayKey",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "array": "Input array",
            "key": "The given key"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the prev key of the input array, before the specified key.",
        "example": "key = GetPrevArrayKey( array, key )"
    },
    "2147": {
        "fuction_name": "GetServerTime",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "localClientNum": "The local client"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the time according to the server",
        "example": "GetServerTime(localClientNum)"
    },
    "2148": {
        "fuction_name": "GetSubStr",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": "The input string",
            "start index": "The start index of the substring"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns the substring of characters >= <start index> and < <end index>. <end index> is optional.",
        "example": "name = getSubStr( playerwarp_string, 8 )"
    },
    "2149": {
        "fuction_name": "GetSystemTime",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns the time of the system in a vector where the 0 index is hours (in 24hr time), 1 is minutes, and 2 is seconds",
        "example": "GetSystemTime(1)"
    },
    "2150": {
        "fuction_name": "IsArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "variable": "variable that may or may not be a array"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Checks whether this entity/variable is an array",
        "example": "if ( isarray ( gun_owner )) ... "
    },
    "2151": {
        "fuction_name": "IsClass",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "variable": "variable that may or may not be a class"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Checks whether this entity/variable is a class object",
        "example": "if ( isclass(self)) ... "
    },
    "2152": {
        "fuction_name": "IsFloat",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "variable": "variable that may or may not be a float"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Checks whether this entity/variable is a float",
        "example": "if ( IsFloat( gun_owner ) ) ..."
    },
    "2153": {
        "fuction_name": "IsFunctionPtr",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "variable": "variable to test"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Checks whether given variable is of type Function Pointer in script, useful to differentiate between Var and FuncPtr in Script.",
        "example": "if ( IsFunctionPtr( myFuncPtr ) ) ..."
    },
    "2154": {
        "fuction_name": "IsInArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "array": "array to search",
            "value": "value to search for"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "searches an array to determine if a given value is present in that array",
        "example": null
    },
    "2155": {
        "fuction_name": "IsInt",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "variable": "variable that may or may not be an int"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Checks whether this entity/variable is an int",
        "example": "if ( IsInt( gun_owner ) ) ..."
    },
    "2156": {
        "fuction_name": "IsMatureContentEnabled",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if mature content is enabled",
        "example": "if( IsMatureContentEnabled() )"
    },
    "2157": {
        "fuction_name": "IsShowBloodEnabled",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if blood is enabled",
        "example": "if( IsShowBloodEnabled() )"
    },
    "2158": {
        "fuction_name": "IsShowGibsEnabled",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Returns true if gibs is enabled",
        "example": "if( IsShowGibsEnabled() )"
    },
    "2159": {
        "fuction_name": "IsString",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "variable": "variable that may or may not be a string"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Checks whether this entity/variable is a string",
        "example": "if ( isstring ( gun_owner )) ... "
    },
    "2160": {
        "fuction_name": "IsStruct",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "variable": "variable that may or may not be a struct"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Checks whether this variable is a struct object",
        "example": "if ( isstruct(self)) ... "
    },
    "2161": {
        "fuction_name": "IsSubStr",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns true/false if <substring> is a substring of <string>. Case sensitive.",
        "example": "has_str = IsSubStr( \"my_string\", \"str\" )"
    },
    "2162": {
        "fuction_name": "istring",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "value": "A string to cast to an istring"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Casts a string to an istring",
        "example": "x = istring( String )"
    },
    "2163": {
        "fuction_name": "IsVec",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "variable": "variable that may or may not be a vector"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Checks whether this entity/variable is a vector",
        "example": "if ( IsVec( gun_owner ) ) ..."
    },
    "2164": {
        "fuction_name": "IsWeapon",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weapon_object": "An parameter that may be a weapon object"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Checks whether this is a weapon object",
        "example": "if ( IsWeapon( current_weapon ) ) ..."
    },
    "2165": {
        "fuction_name": "MakeLocalizedString",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": "The string to translate"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Make a localized string of the given string",
        "example": null
    },
    "2166": {
        "fuction_name": "SplitArgs",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "arg string": "space seperated string."
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Client",
        "summary": "Splits a space seperated string, returning an array of each word in the string.",
        "example": "args = SplitArgs(\"First second third fourth\")"
    },
    "2167": {
        "fuction_name": "sprintf",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": "The string to translate"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Replaces field specifiers in a string with values passed in, returns result string format specifiers take the form of {[n]} in the source string where [n] indicates which value to print, e.g. 0 is the first user arg",
        "example": "sprintf(\"{0} is the first string\",\"first\")"
    },
    "2168": {
        "fuction_name": "StrEndsWith",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": "String to search",
            "substring": "Substring to search with."
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns true/false if <string> ends with <substring>. Case sensitive.",
        "example": "ends_with = StrEndsWith( \"my_string\", \"_string\" )"
    },
    "2169": {
        "fuction_name": "StrIsFloat",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": ": The string to check."
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Check if a string is a float.",
        "example": "StrIsFloat( \"1.2\" ); // true"
    },
    "2170": {
        "fuction_name": "StrIsInt",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": ": The string to check."
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Check if a string is an int.",
        "example": "StrIsInt( \"1\" ); // true"
    },
    "2171": {
        "fuction_name": "StrIsNumber",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": ": The string to check."
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Check if a string is a number.",
        "example": "StrIsNumber( \"1.2\" ); // true"
    },
    "2172": {
        "fuction_name": "StrStartsWith",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": "String to search",
            "substring": "Substring to search with."
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Returns true/false if <string> starts with <substring>. Case sensitive.",
        "example": "starts_with = StrStartsWith( \"my_string\", \"my_\" )"
    },
    "2173": {
        "fuction_name": "StrStrip",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": ": The string to strip."
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Strip whitespace from right and left side of string.",
        "example": "StrStrip( \"    hq_cleared   \" ); // 'hq_cleared'"
    },
    "2174": {
        "fuction_name": "StrTok",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": "The input string",
            "delim": "The delimiter to tokenize by"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Tokenizes <string> by the delimiters <delim>. Returns the array of string tokens.",
        "example": "my_string_array = StrTok( \"my_string; my_string_2\", \"; \" )"
    },
    "2175": {
        "fuction_name": "StrTok2",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": "The input string",
            "delim": "The delimiter to tokenize by"
        },
        "optional_parameters": {
            "case_sensitive": "true if test is case sensitive"
        },
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Tokenizes <string> by a single delimiter string.  doesn't treat the delimiter string as a series of characters, but as a string",
        "example": "my_string_array = StrTok2( \"my_string foo; my_string_2\", \"foo; \" )"
    },
    "2176": {
        "fuction_name": "TableLookup",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "filename": "The table to look up",
            "search column num": "The column number of the stats table to search through",
            "search value": "The value to use when searching the <search column num>",
            "return value column num": "The column number value to return after we find the correct row"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "look up a row in a table and pull out a particular column from that row",
        "example": "TableLookup( \"mp/statstable.csv\", 0, \"INDEX_KILLS\", 1 )"
    },
    "2177": {
        "fuction_name": "TableLookupColumnCount",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "filename": "The table to look up"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "look up the number of columns in a table",
        "example": "TableLookup( \"mp/statstable.csv\" )"
    },
    "2178": {
        "fuction_name": "TableLookupColumnForRow",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "filename": "The table to look up",
            "search row num": "The row number of the string table to search through",
            "search column num": "The column number of the string table to search through"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "look up a particular row and column in a table",
        "example": "TableLookupColumnForRow( \"gamedata/tables/mp/exampleStringTable.csv\", 101, 7 )"
    },
    "2179": {
        "fuction_name": "TableLookupFindCoreAsset",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "filename": "The table to look up"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Find core asset index for a stringtable",
        "example": "TableLookupRowNum( \"mp/statstable.csv\" )"
    },
    "2180": {
        "fuction_name": "TableLookupIString",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "filename": "The table to look up",
            "search column num": "The column number of the stats table to search through",
            "search value": "The value to use when searching the <search column num>",
            "return value column num": "The column number value to return after we find the correct row"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "look up a row in a table and pull out a particular column from that row",
        "example": "TableLookupIString( \"mp/statstable.csv\", 0, \"INDEX_KILLS\", 1 )"
    },
    "2181": {
        "fuction_name": "TableLookupRow",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "filename": "The table to look up",
            "row num": "The row num of the row in table to return"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Return an array of strings for the columns in that row",
        "example": null
    },
    "2182": {
        "fuction_name": "TableLookupRowCount",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "filename": "The table to look up"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "look up the number of rows in a table",
        "example": "TableLookup( \"mp/statstable.csv\" )"
    },
    "2183": {
        "fuction_name": "TableLookupRowNum",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "filename": "The table to look up",
            "search column num": "The column number of the stats table to search through",
            "search value": "The value to use when searching the <search column num>"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "look up a row number in a table",
        "example": "TableLookupRowNum( \"mp/statstable.csv\", 0, \"INDEX_KILLS\" )"
    },
    "2184": {
        "fuction_name": "Throw",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "force a script exception (from a builtin call)",
        "example": "throw( )"
    },
    "2185": {
        "fuction_name": "ToLower",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": "(string) Base string"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Converts <string> to a lower case string which is returned.",
        "example": "my_string = ToLower( \"MY_STRING\" )"
    },
    "2186": {
        "fuction_name": "ToUpper",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "string": "(string) Base string"
        },
        "optional_parameters": {},
        "category": "Utility",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Converts <string> to a upper case string which is returned.",
        "example": "my_string = ToUpper( \"lower\" )"
    },
    "2187": {
        "fuction_name": "AttachPath",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "node": "A node on the path to attach."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Attaches this vehicle to the given path.",
        "example": "bomber AttachPath( aBomberPaths[i] )"
    },
    "2188": {
        "fuction_name": "CancelAIMove",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Tell the vehicle to stop moving towards its current goal position.",
        "example": "eTank CancelAIMove()"
    },
    "2189": {
        "fuction_name": "ClearDefaultPitch",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears the desired default pitch for a vehicle.",
        "example": "level.heli cleardefaultpitch()"
    },
    "2190": {
        "fuction_name": "ClearGoalYaw",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clear the goal yaw direction for this vehicle.",
        "example": "level.flak1 ClearGoalYaw()"
    },
    "2191": {
        "fuction_name": "ClearGunnerTarget",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clear the target for the vehicle turret.",
        "example": "eTank ClearGunnerTarget(0)"
    },
    "2192": {
        "fuction_name": "ClearLookAtEnt",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clear the entity or origin the vehicle is orienting towards.",
        "example": "heli clearLookAtEnt()"
    },
    "2193": {
        "fuction_name": "ClearTargetYaw",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clear the target yaw direction for this vehicle.",
        "example": "level.flak1 cleartargetyaw()"
    },
    "2194": {
        "fuction_name": "ClearTurretTarget",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clear the target for the vehicle turret.",
        "example": "eTank ClearTurretTarget()"
    },
    "2195": {
        "fuction_name": "ClearVehGoalPos",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears the target position for this vehicle.",
        "example": "tank ClearVehGoalPos()"
    },
    "2196": {
        "fuction_name": "CreateTrack",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the node enabled or disabled for vehicle pathfinding.  SetVehGoalPos will now return true or false if it can find a path.",
        "example": "CreateTrack( track_node )"
    },
    "2197": {
        "fuction_name": "DisableDriverFiring",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enables or disables the driver's vehicle turret",
        "example": "tank DisableDriverFiring( true )"
    },
    "2198": {
        "fuction_name": "DisableGunnerFiring",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "gunner index": "The gunner to disable/enable",
            "onoff": "true to disable, false otherwise"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enable or disable gunner firing",
        "example": "tank DisableGunnerFiring( 1, true )"
    },
    "2199": {
        "fuction_name": "DrawTrajectory",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "show": "Whether to draw trajectory or not"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Draws the vehicles trajectory.",
        "example": "plane DrawTrajectory( true )"
    },
    "2200": {
        "fuction_name": "DrivePath",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Starts the vehicle driving this path and uses the vehicle physics, not locked to the spline, can only achieve turns that the physics can handle.",
        "example": "huey DrivePath( start_node )"
    },
    "2201": {
        "fuction_name": "FinishVehicleDamage",
        "return_type": "entity",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "Inflictor": "The entity that causes the damage.(e.g. a turret)",
            "Attacker": "The entity that is attacking.",
            "Damage": "Integer specifying the amount of damage done",
            "Damage Flags": "Integer specifying flags that are to be applied to the damage",
            "Means Of Death": "Integer specifying the method of death",
            "Weapon": "The weapon number of the weapon used to inflict the damage",
            "Point": "Point of damage",
            "Direction": "(vector) The direction of the damage",
            "Hit Loc": "The location of the hit",
            "Offset Time": "The time offset for the damage",
            "DamageFromUnderneath": "If the hit is underneath the vehicle",
            "modelIndex": "which model in the dobj was hit",
            "partIndex": "which bone was hit",
            "damageteammates": "Whether to damage teammates or not"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Does damage to an vehicle - usually as part of the damage callback",
        "example": "self FinishVehicleDamage( eInflictor, eAttacker, iDamage, iDFlags, sMeansOfDeath, sWeapon, vPoint, vDir, sHitLoc, psOffsetTime, damageUnderneathVehicle, modelindex, partname, damageteammates )"
    },
    "2202": {
        "fuction_name": "FinishVehicleRadiusDamage",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "Inflictor": "The entity that causes the damage.(e.g. a turret)",
            "Attacker": "The entity that is attacking.",
            "Damage": "Integer specifying the amount of damage done",
            "Inner Damage": "Integer specifying the amount of inner damage done",
            "Outer Damage": "Integer specifying the amount of outer damage done",
            "Damage Flags": "Integer specifying flags that are to be applied to the damage",
            "Means Of Death": "Integer specifying the method of death",
            "Weapon": "The weapon number of the weapon used to inflict the damage",
            "Point": "(vector) The Point of the damage",
            "Radius": "(float) The radius of the damage",
            "ConeRadius": "(float) The radius of the cone damage",
            "ConeDirection": "(vector) The direction of the cone damage",
            "Offset Time": "The time offset for the damage"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Does damage to an vehicle - usually as part of the damage callback",
        "example": "self FinishVehicleRadiusDamage( eInflictor, eAttacker, iDamage, iDFlags, sMeansOfDeath, sWeapon, vPoint, fRadius, fConeRadius, fConeDir, psOffsetTime )"
    },
    "2203": {
        "fuction_name": "FireWeapon",
        "return_type": "entity",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Fire the vehicle's weapon",
        "example": "m_vehicle FireWeapon( 0, m_e_target, v_target_offset )"
    },
    "2204": {
        "fuction_name": "Flip180",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Flips this vehicle 180 (for going forwards / backwards along a path)",
        "example": "huey Flip180()"
    },
    "2205": {
        "fuction_name": "FreeVehicle",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Frees this vehicle instance.  It will unlink any players occupying the vehicle. It will change the vehicle into a vehicle corpse.  It will send a death notify on the vehicle.  Once called the vehicle cannot move anymore.",
        "example": "self FreeVehicle()"
    },
    "2206": {
        "fuction_name": "GetAllVehicleNodes",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets all of the vehicle nodes in a level",
        "example": "nodes = GetAllVehicleNodes()"
    },
    "2207": {
        "fuction_name": "GetAngularVelocity",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current angular velocity.",
        "example": "self GetAngularVelocity()"
    },
    "2208": {
        "fuction_name": "GetAttachPos",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "node index": "A node on the path to attach."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the origin and angles if the vehicle were to be attached to the path.  The origin and angles are returned as a vector array of size 2.  Origin is 1st and angles is 2nd.",
        "example": "pos = self GetAttachPos( node )origin = pos[0]angles = pos[1]"
    },
    "2209": {
        "fuction_name": "GetBrake",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the brake value of a nitrous physics vehicle.",
        "example": "jeep getbrake()"
    },
    "2210": {
        "fuction_name": "GetDefaultAcceleration",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the acceleration value set in GDT.",
        "example": "accel = self GetDefaultAcceleration()"
    },
    "2211": {
        "fuction_name": "getgoalspeedMPH",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the goal speed in miles per hour.",
        "example": "self GetGoalSpeedMPH()"
    },
    "2212": {
        "fuction_name": "GetGoalYaw",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the goal yaw direction for this vehicle. Goal yaw is ignored if vehicle doesn't stop at goal. Lookat entity has priority over goal yaw",
        "example": "level.flak1 GetGoalYaw()"
    },
    "2213": {
        "fuction_name": "GetGunnerTargetEnt",
        "return_type": "entity",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "gunner index": "Which gun, 0-3."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the target entity for this gunner position.",
        "example": "target = huey GetGunnerTurretEnt( 0 )"
    },
    "2214": {
        "fuction_name": "GetGunnerTargetVec",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "gunner index": "which gun 0-3"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the target position for this vehicle turret gunner.",
        "example": "endpt = GetGunnerTargetVec( 1 )"
    },
    "2215": {
        "fuction_name": "GetHandBrake",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the hand brake value of a nitrous physics vehicle.",
        "example": "jeep gethandbrake()"
    },
    "2216": {
        "fuction_name": "GetHeliHeightLock",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Locks the heli to the height mesh",
        "example": "if ( vehicle GetHeliHeightLock( ) )"
    },
    "2217": {
        "fuction_name": "GetHeliHeightLockHeight",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "point": "The point to check at"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the mesh height at a given point.",
        "example": "maxheight = GetHeliHeightLockHeight( point )"
    },
    "2218": {
        "fuction_name": "GetMaxSpeed",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the max speed of a vehicle. By default gets the script setting",
        "example": "heli GetMaxSpeed( true )"
    },
    "2219": {
        "fuction_name": "GetNumVehicles",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the number of vehicles entities in the level",
        "example": "vehicleCount = GetNumVehicles()"
    },
    "2220": {
        "fuction_name": "GetOccupantSeat",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "player": "The player to get the seat index for"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the seat index occupied by the given player.  -1 if player isn't in vehicle.",
        "example": "isDriver = 0 == vehicle GetOccupantSeat( player )"
    },
    "2221": {
        "fuction_name": "GetPathFixedOffset",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets a fixed offset from the path for a specific vehicle.",
        "example": "offset = huey GetPathFixedOffset()"
    },
    "2222": {
        "fuction_name": "GetPathVariableOffset",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets a variable offset from the path for a specific vehicle.",
        "example": "offset = huey GetPathVariableOffset()"
    },
    "2223": {
        "fuction_name": "GetPhysAcceleration",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the vehicles acceleration vector.",
        "example": "accel = plane GetPhysAccel()"
    },
    "2224": {
        "fuction_name": "GetScriptBrake",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the script brake value of a nitrous physics vehicle.",
        "example": "jeep getscriptbrake()"
    },
    "2225": {
        "fuction_name": "GetSeatFiringAngles",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "seat index": "The seat to firing angles for"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Retrieve the angles specifying the direction in which bullets, projectiles, etc. will be emitted from the weapon when it is fired.",
        "example": "turretBarrelAngles = tank GetSeatFiringAngles( 0 )"
    },
    "2226": {
        "fuction_name": "GetSeatFiringOrigin",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "seat index": "The seat to firing origin for"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Retrieve the location at the end of the barrel where bullets, projectiles, etc. are emitted when the gun is fired.",
        "example": "turretBarrelOrigin = tank GetSeatFiringOrigin( 0 )"
    },
    "2227": {
        "fuction_name": "GetSeatOccupant",
        "return_type": "entity",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "seat": "0 driver, 1-4 gunners, 5-10 passengers"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the entity occupying the given seat index.  Undefined if the seat is empty.",
        "example": "driver = vehicle GetSeatOccupant( 0 )"
    },
    "2228": {
        "fuction_name": "GetSpeed",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current speed in inches per second.",
        "example": "self GetSpeed()"
    },
    "2229": {
        "fuction_name": "GetSpeedMPH",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the current speed in miles per hour.",
        "example": "self GetSpeedMPH()"
    },
    "2230": {
        "fuction_name": "GetSteering",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the steer factor of the vehicle.",
        "example": "self GetSteering()"
    },
    "2231": {
        "fuction_name": "GetThrottle",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the throttle factor of the vehicle.",
        "example": "self GetThrottle()"
    },
    "2232": {
        "fuction_name": "GetTimeFromVehicleNodeToNode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "start_node": "The start node of the path",
            "end_node": "The end node of the path"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "The time it would take to go from start node to end node if traveling the spline speed.",
        "example": "time = GetTimeFromVehicleNodeToNode( start_node, end_node )"
    },
    "2233": {
        "fuction_name": "GetTurretHeatValue",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "gunner index": "which gun 0-3"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the current heat value for a vehicle weapon.",
        "example": "heat = self GetTurretHeatValue( 1 )"
    },
    "2234": {
        "fuction_name": "GetTurretLimitsYaw",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the furthest relative yaw angles the turret can aim, all numbers are positive",
        "example": "limit = veh GetTurretLimits( 1 ); limitMin = -limit[0]; limitMax = limit[1]"
    },
    "2235": {
        "fuction_name": "GetTurretTargetVec",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the target position for this vehicle turret or gunner.",
        "example": "endpt = GetTurretTargetVec( 1 )"
    },
    "2236": {
        "fuction_name": "GetVehDamageMultiplier",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "damageType": "The type of damage being applied to the vehicle"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets the damage multiplier that applies to the damage type.",
        "example": "vehicle GetVehDamageMultiplier( damgType )"
    },
    "2237": {
        "fuction_name": "GetVehicleAvoidance",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Locks the heli to the height mesh",
        "example": "if ( vehicle GetVehicleAvoidance() )"
    },
    "2238": {
        "fuction_name": "GetVehicleAvoidanceNodes",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "radius": "A radius to filter out nodes returned."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the positions for nearby avoidance nodes.",
        "example": "nodes = plane GetVehicleAvoidanceNodes( radius )"
    },
    "2239": {
        "fuction_name": "GetVehicleNode",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "(string) The name to search for",
            "key": "(string) The key that name goes with"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets a vehicle node with the given name, key pair",
        "example": "node = getvehiclenode(self.target, \"targetname\")"
    },
    "2240": {
        "fuction_name": "GetVehicleNodeArray",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "name": "(string) The name to search for",
            "key": "(string) The key that name goes with"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Gets an array of vehicle nodes that have the given name, key pair",
        "example": "nodes = GetVehicleNodeArray(self.target, \"targetname\")"
    },
    "2241": {
        "fuction_name": "GetVehicleOwner",
        "return_type": "entity",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the owner of this particular vehicle.",
        "example": "eFlak88user = eFlak88 GetVehicleOwner()"
    },
    "2242": {
        "fuction_name": "GetVehOccupants",
        "return_type": "entity",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Get the occupants of this vehicle in an entity array.",
        "example": "ridersarray = vehicle getvehoccupants()"
    },
    "2243": {
        "fuction_name": "GetWheelSurface",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "wheel": "The wheel position, can be 'front_left', 'front_right', 'back_left', 'back_right', 'middle_left', 'middle_right'"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the surface type of the given wheel as a string.",
        "example": "surface = self GetWheelSurface( side )"
    },
    "2244": {
        "fuction_name": "IsDriverFiring",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks if this driver is firing the vehicle turret",
        "example": "if( tank IsDriverFiring() )"
    },
    "2245": {
        "fuction_name": "IsGunnerFiring",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "gunner index": "The gunner to check"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Checks if this gun is currently firing.",
        "example": "if( tank IsGunnerFiring( 1 ) )"
    },
    "2246": {
        "fuction_name": "IsInsideHeliHeightLock",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if Helicopter is inside height mesh",
        "example": "if ( IsInsideHeliHeightLock() )"
    },
    "2247": {
        "fuction_name": "isremotecontrol",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Query whether this vehicle is usable by players",
        "example": "if ( vehicle isvehicleusable(  ) )..."
    },
    "2248": {
        "fuction_name": "IsTurretReady",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Query whether this vehicle's turret is ready for firing",
        "example": "while ( level.playertank IsTurretReady() != true ) ..."
    },
    "2249": {
        "fuction_name": "IsVehicleImmuneToDamage",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "Damage Flags": "Integer specifying flags that are to be applied to the damage",
            "Means Of Death": "Integer specifying the method of death",
            "Weapon": "The weapon number of the weapon used to inflict the damage"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "This checks the vehicle GDT settings related to bulletdamage, grenadedamage, etc.",
        "example": "if ( vehicle IsVehicleImmuneToDamage( flags, mod, weapon ) )"
    },
    "2250": {
        "fuction_name": "IsVehicleManualControl",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "check if vehicle hkai behavior is enabled. Not to be confused with UseVehicle()",
        "example": "vehicle IsVehicleManualControl()"
    },
    "2251": {
        "fuction_name": "IsVehicleSeatOccupied",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "seat": "0 driver, 1-4 gunners, 5-10 passengers"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "same as useby except you can specify a seat, 0 driver, 1-4 gunners, 5-10 passengers",
        "example": "lvt IsVehicleSeatOccupied( 2 )"
    },
    "2252": {
        "fuction_name": "IsVehicleTurretOverheating",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "gunner index": "which gun 0-3"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns true if the vehicle turret weapon is overheating, else returns false.",
        "example": "if( self IsVehicleTurretOverheating( 1 ) )"
    },
    "2253": {
        "fuction_name": "IsVehicleUsable",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Query whether this vehicle is usable by players",
        "example": "if ( vehicle isvehicleusable(  ) )..."
    },
    "2254": {
        "fuction_name": "JoltBody",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "jolt position": "The position of the jolt",
            "intensity": "The intensity of the jolt"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Jolts the vehicle.",
        "example": "self JoltBody( (self.origin + (0,0,64)), 0.5 )"
    },
    "2255": {
        "fuction_name": "MakeVehicleUnusable",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets this vehicle to be not usable by the player",
        "example": "car MakeVehicleUnusable()"
    },
    "2256": {
        "fuction_name": "MakeVehicleUsable",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets this vehicle to be usable by the player",
        "example": "nFlak makeVehicleUsable()"
    },
    "2257": {
        "fuction_name": "PathFixedOffset",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "offset": "The offset to apply. A vector in the form (forward, right, up)"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a fixed offset for this vehicle to travel on a vehicle path.",
        "example": "huey PathFixedOffset( (0, -200, 0) )"
    },
    "2258": {
        "fuction_name": "PathFixedOffsetClear",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears the vehicles fixed offset.",
        "example": "huey PathFixedOffsetClear()"
    },
    "2259": {
        "fuction_name": "PathMove",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "node index": "Which node to move to the new location (it moves the whole path not just this node).",
            "new origin": "The new position",
            "new angles": "The new angles"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Moves the entire path for this vehicle to the specific origin and angles.",
        "example": "huey PathMove( node, origin, angles )"
    },
    "2260": {
        "fuction_name": "PathMoveClear",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears the moved path for this vehicle.  If not cleared then all paths taken will be moved.",
        "example": "huey PathMoveClear()"
    },
    "2261": {
        "fuction_name": "PathVariableOffset",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "offset": "The offset to apply. A vector in the form (forward, right, up)",
            "time": ", The interval at which to choose new offsets"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a variable offset for this vehicle to travel on a vehicle path.",
        "example": "huey PathVariableOffset( (0, 50, 0), 2 )"
    },
    "2262": {
        "fuction_name": "PathVariableOffsetClear",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Clears the vehicles variable offset.",
        "example": "huey PathVariableOffsetClear()"
    },
    "2263": {
        "fuction_name": "RecalcSplinePaths",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Recalcs all the nodes int the map",
        "example": "tank2 RecalcSplinePaths()"
    },
    "2264": {
        "fuction_name": "ReconnectVehicleNodes",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Reconnect vehicle nodes",
        "example": "ReconnectVehicleNodes()"
    },
    "2265": {
        "fuction_name": "ResetVehicleFromDropDeploy",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Reset vehicle properties from drop deploy so that it may behave as normal.",
        "example": "raps ResetVehicleFromDropDeploy()"
    },
    "2266": {
        "fuction_name": "ResumeSpeed",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the vehicle to resume its path speed.",
        "example": "level.tank ResumeSpeed( 3 )"
    },
    "2267": {
        "fuction_name": "ReturnPlayerControl",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "After controlling a vehicle from script using something like setvehgoalpos(), if the vehicle is being driven by a player, you call this function to return control of the vehicle to the player.",
        "example": "cobra returnplayercontrol()"
    },
    "2268": {
        "fuction_name": "SeatGetWeapon",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "seat index": "The seat to get weapon for"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Returns the weapon name for the specified seat.  Undefined if there isn't a weapon. Only driver and gunner seats can have weapons.",
        "example": "weaponname = vehicle SeatGetWeapon( 0 )"
    },
    "2269": {
        "fuction_name": "SetAcceleration",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "acceleration": "The acceleration of the vehicle in miles per hour per second"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the acceleration for this vehicle.",
        "example": "self SetAcceleration( 15 )"
    },
    "2270": {
        "fuction_name": "SetAirResistance",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "max air resistance speed": "speed at which air resistance maxes out (MPH)"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the speed at which air resistance maxes out.",
        "example": "self SetAirResistance( 60 )NOTES:  Air resistance ramps up exponentially up to this speed. Set it to a high value to flatten helicopter when it is done accelerating to move at the desired speed"
    },
    "2271": {
        "fuction_name": "SetAngularVelocity",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "angular velocity": "The angular velocity to set"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the angular velocity of a vehicle in degs/s.",
        "example": "self SetAngularVelocity( (0, 90, 0) )"
    },
    "2272": {
        "fuction_name": "SetBrake",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "bool": "True or 1 to turn on the brake, false or 0 otherwise"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Turns off/on the hand brake of a nitrous physics vehicle.",
        "example": "jeep setbrake(1)"
    },
    "2273": {
        "fuction_name": "SetBuoyancyOffset",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "offset": "A height offset from water surface."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "set buoyancy offset that changes the height an individual vehicle floats in water",
        "example": "crocodile SetBuoyancyOffset( 20 )"
    },
    "2274": {
        "fuction_name": "SetDamageStage",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "stage": "the damage stage to set"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the damage stage of the helicopter",
        "example": "self setdamagestage( 3 )"
    },
    "2275": {
        "fuction_name": "SetDeceleration",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "deceleration": "The deceleration of the vehicle in miles per hour per second"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the deceleration for this vehicle.",
        "example": "self SetDeceleration( 5 )"
    },
    "2276": {
        "fuction_name": "SetDefaultPitch",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "pitch": "Set the default pitch"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the desired default pitch for a vehicle.",
        "example": "level.heli setdefaultpitch(10)"
    },
    "2277": {
        "fuction_name": "SetDrivePathPhysicsScale",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "This scales all of the necessary parameters that will help a vehicle drive a path better.",
        "example": "boat SetDrivePathPhysicsScale( 3.0 )"
    },
    "2278": {
        "fuction_name": "SetGoalYaw",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "integer": "The yaw direction of the target: 0 to 360 integer value"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the goal yaw direction for this vehicle. Goal yaw is ignored if vehicle doesn't stop at goal. Lookat entity has priority over goal yaw",
        "example": "level.flak1 SetGoalYaw( int_value )"
    },
    "2279": {
        "fuction_name": "SetGunnerTargetEnt",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "target entity": "The target."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the target entity for this vehicle gunner.",
        "example": "eLiberator SetGunnerTargetEnt( eFlaktarget, (0,0,0), 2 )"
    },
    "2280": {
        "fuction_name": "SetGunnerTargetVec",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "target position": "vecter to aim at/ the position of the target"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the target position for this vehicle turret gunner.",
        "example": "level.flak1 SetGunnerTargetVec( vec1, 1 )"
    },
    "2281": {
        "fuction_name": "SetGunnerTurretOnTargetRange",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "gunner index": "Which gun, 0-3."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the range at which the gunner_turret_on_target notify will occur.",
        "example": "boat SetGunnerTurretOnTargetRange( 0, 15 )"
    },
    "2282": {
        "fuction_name": "SetHeliDogfighting",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "enabled": "true to enable dogfighting, false otherwise"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the vehicle (intended for VTOLs only) to be in dogfighting mode (dogfights with the vehicle's focus entity)",
        "example": "vehicle SetHeliDogfighting( true )"
    },
    "2283": {
        "fuction_name": "SetHeliHeightCap",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "enabled": "true to enable, false otherwise"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Pulls the heli back down below the height mesh",
        "example": "vehicle SetHeliHeightCap( true )"
    },
    "2284": {
        "fuction_name": "SetHeliHeightLock",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "enabled": "true to enable lock, false otherwise"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Locks the heli to the height mesh",
        "example": "vehicle SetHeliHeightLock( true )"
    },
    "2285": {
        "fuction_name": "SetHeliHeightPatchEnabled",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "targetname": "All heli height lock patches with this target name",
            "enabled": "Turn it on or off"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enabled or disables the specified heli height lock path",
        "example": "SetHeliHeightPatchEnabled( \"area51\", 0 )"
    },
    "2286": {
        "fuction_name": "SetHoverParams",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "radius": "The hovering range."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the hovering parameters.",
        "example": "self SetHoverParams( 50, 1, 0.5 )"
    },
    "2287": {
        "fuction_name": "SetJitterParams",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "range vector": "The jitter range vector."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the jitter parameters. Set everything to 0 to stop jittering. Vehicle ignores jitter parameters when on ground",
        "example": "self SetJitterParams( (0,0,20), 0.5, 1.5 ); // Jitter up or down randomly within 20 units, switching every 0.5 to 1.5 secondsNOTES:  For player helicopters, the jitter params are used for jittering the pitch and roll of the helicopter"
    },
    "2288": {
        "fuction_name": "SetLookAtEnt",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "entity": "The target."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the entity this vehicle will orient towards.",
        "example": "eFlak88 setLookAtEnt( eFlaktarget )"
    },
    "2289": {
        "fuction_name": "SetLookAtOrigin",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "entity": "The target."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the origin this vehicle will orient towards.",
        "example": "heli setLookAtOrigin( org )"
    },
    "2290": {
        "fuction_name": "SetMantleEnabled",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "enabled": "True to set the mantle enabled, false otherwise"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the mantle enabled flag on the vehicle",
        "example": "vehicle SetMantleEnabled( true )"
    },
    "2291": {
        "fuction_name": "SetMaxAccelerationScale",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "scale": "The acceleration scale of the physics vehicle"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the max acceleration scale for this physics vehicle.",
        "example": "self SetMaxAccelerationScale( 2.6 )"
    },
    "2292": {
        "fuction_name": "SetMaxPitchRoll",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "pitch": "Max pitch angle",
            "roll": "Max roll angle"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets max pitch and roll angle for this vehicle.",
        "example": "self SetMaxPitchRoll( 30, 30 )"
    },
    "2293": {
        "fuction_name": "SetMaxSpeedScale",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "scale": "The max speed scale of the physics vehicle"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the max speed scale for this physics vehicle.",
        "example": "self SetMaxSpeedScale( 2.6 )"
    },
    "2294": {
        "fuction_name": "SetMinDesiredTurnYaw",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "yaw": "The min desired turn yaw to set"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "The vehicle will not update its desired yaw until the min turn yaw is reached. Set it to 0 to clear it.",
        "example": "quadtank SetMinDesiredTurnYaw( 45 )"
    },
    "2295": {
        "fuction_name": "SetNearGoalNotifyDist",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "dist": "Distance to goal position"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set distance near goal at which near_goal notification should be sent once.",
        "example": "tank setNearGoalNotifyDist( 50 )"
    },
    "2296": {
        "fuction_name": "SetPathTransitionTime",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "time": "The transition time"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the time it takes for a vehicle to lerp on to a spline.",
        "example": "boat SetPathTransitionTime( 1.0 )"
    },
    "2297": {
        "fuction_name": "SetPhysAcceleration",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "acceleration": "The vehicle acceleration"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the vehicles acceleration vector.",
        "example": "plane SetPhysAcceleration( ( 0, 0, -1600) )"
    },
    "2298": {
        "fuction_name": "SetPhysAngles",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "angles vector": "The desired angles."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the angles on the phys structure",
        "example": "self SetPhysAngles( VectorToAngles( desired_forward ) )"
    },
    "2299": {
        "fuction_name": "SetPlaneBarrelRoll",
        "return_type": "void",
        "called_by": "<plane>",
        "mandatory_parameters": {
            "number": "The number of rolls"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the goal Roll direction for this plane. PLANE_ON_CURVE has priority over ROLL if this is not set.",
        "example": "level.plane SetPlaneBarrelRoll( 1, 5.0f )"
    },
    "2300": {
        "fuction_name": "SetPlaneGoalPos",
        "return_type": "void",
        "called_by": "<plane>",
        "mandatory_parameters": {
            "goal position": "The goal position"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the target position, speed, angles for this vehicle.",
        "example": "plane Setplanegoalpos( ( 200, 200, 200 ), ( 30, 0, 90 ), 170.0 )"
    },
    "2301": {
        "fuction_name": "SetRotorSpeed",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "speed": "The rotor speed, 0 is stopped 1 is full speed."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the helicopters rotor speed.",
        "example": "heli SetRotorSpeed( 0.2 )"
    },
    "2302": {
        "fuction_name": "SetSeatOccupied",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "seat": "0 driver, 1-4 gunners, 5-10 passengers"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets this seat to be occupied/disabled (for players.",
        "example": "vehicle SetSeatOccupied( 2, true )NOTES:  For players only, the AI pay attention to vehicle.usedPositions[] = true/false"
    },
    "2303": {
        "fuction_name": "SetSpeed",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "speed": "The speed of the vehicle in miles per hour"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the speed and acceleration for this vehicle.",
        "example": "self SetSpeed( 60, 15, 5 )"
    },
    "2304": {
        "fuction_name": "SetSpeedImmediate",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "speed": "The speed of the vehicle in miles per hour"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the speed and acceleration for this vehicle instantaneously. Direction will be toward the goal direction if there is a goal, otherwise the current direction.",
        "example": "self setspeedimmediate(60, 15, 5)"
    },
    "2305": {
        "fuction_name": "SetSwitchNode",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "source node": "The switch source node",
            "dest node": "The switch destination node."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets a switch node for this vehicle.",
        "example": "tank2 SetSwitchNode( tank2snode1, tank2snode2 )"
    },
    "2306": {
        "fuction_name": "SetTargetYaw",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "yaw": "The yaw direction of the target"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the target yaw direction for this vehicle. Goal yaw has priority over target yaw.",
        "example": "level.flak1 SetTargetYaw( vec1 )"
    },
    "2307": {
        "fuction_name": "SetTurningAbility",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "turning ability": "Between 0.001 and 1.0. Defaults to 0.5"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "If this is higher, helicopters can make sharper turns to match goal positions better.",
        "example": "self SetTurningAbility( 0.9 )"
    },
    "2308": {
        "fuction_name": "SetTurretTargetEnt",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "target entity": "The target."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the target entity for this vehicle turret.",
        "example": "eFlak88 SetTurretTargetEnt( eFlaktarget, eFlaktarget.origin )"
    },
    "2309": {
        "fuction_name": "SetTurretTargetRelativeAngles",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "relative angles": "The target angle"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the target entity for this vehicle turret.",
        "example": "eFlak88 SetTurretTargetEnt( eFlaktarget, eFlaktarget.origin )"
    },
    "2310": {
        "fuction_name": "SetTurretTargetVec",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "target position": "The position of the target"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the target position for this vehicle turret.",
        "example": "level.flak1 SetTurretTargetVec( vec1 )"
    },
    "2311": {
        "fuction_name": "SetVehGoalPos",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "goalpos": "The goal position"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the target position for this vehicle. Returns true if it can find a path.  If it fails to find a path the vehicle will be stopped.",
        "example": "tank SetVehGoalPos( (0, 0, 0), 1 )"
    },
    "2312": {
        "fuction_name": "SetVehicleAvoidance",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "enabled": "True to enable avoidance, false otherwise"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Turns on and off vehicle avoidance",
        "example": "vehicle SetVehicleAvoidance( true, 50 )"
    },
    "2313": {
        "fuction_name": "SetVehicleForDropDeploy",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set vehicle properties so that it can be dropped into a map.",
        "example": "raps SetVehicleForDropDeploy()"
    },
    "2314": {
        "fuction_name": "SetVehicleManualControl",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "enabled": "True to enable vehicle  hkai behavior, false otherwise"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Turns on and off vehicle hkai behavior. Not to be confused with UseVehicle()",
        "example": "vehicle SetVehicleManualControl( true )"
    },
    "2315": {
        "fuction_name": "SetVehicleType",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "type": "The type name"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the vehicles type.",
        "example": "plane SetVehicleType(\"f35_vtol\")"
    },
    "2316": {
        "fuction_name": "SetVehMaxSpeed",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "speed": "The speed to set"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "overrides the max speed for this vehicle.",
        "example": "self SetVehMaxSpeed( 45 )"
    },
    "2317": {
        "fuction_name": "SetVehVelocity",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "velocity": "The vehicle velocity"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the linear velocity on a vehicle/s.",
        "example": "self SetVehVelocity( (45, 0, 0) )"
    },
    "2318": {
        "fuction_name": "SetVehWeapon",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "weapon name": "The name of the weapon"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Set the vehicle's weapon",
        "example": "chopper setVehWeapon( \"AGM_114\" )"
    },
    "2319": {
        "fuction_name": "SetYawSpeed",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "speed": "The speed of the vehicle in angles per second",
            "acceleration": "The acceleration of the vehicle in angles per second^2"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Sets the yaw speed for this vehicle.",
        "example": "self SetYawSpeed( 120, 60 )"
    },
    "2320": {
        "fuction_name": "StartPath",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Starts the vehicle following this path.",
        "example": "bomber StartPath()"
    },
    "2321": {
        "fuction_name": "StopFireWeapon",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Stop firing the vehicle's main weapon",
        "example": "nFlak StopFireWeapon()"
    },
    "2322": {
        "fuction_name": "SwitchStartNode",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "source node": "The start source node",
            "dest node": "The start destination node."
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Swaps the start node for this vehicle.",
        "example": "tank2 SwitchStartNode( tank2snode1, tank2snode2 )"
    },
    "2323": {
        "fuction_name": "TakePlayerControl",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {},
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "You call this function to take control away from a player.",
        "example": "cobra TakePlayerControl()"
    },
    "2324": {
        "fuction_name": "UseVehicle",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "user entity": "The player to use the vehicle",
            "seat": "0 driver, 1-4 gunners, 5-10 passengers"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "same as useby except you can specify a seat, 0 driver, 1-4 gunners",
        "example": "lvt usevehicle( player, 2 )"
    },
    "2325": {
        "fuction_name": "VehDriverAimAtCrosshairs",
        "return_type": "void",
        "called_by": "<vehicle>",
        "mandatory_parameters": {
            "AimAtCrosshairs": "True to aim the turret at the crosshairs"
        },
        "optional_parameters": {},
        "category": "Vehicle",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Enables or disables the driver turret aiming at the crosshairs (aiming at the crosshairs overrides all other aim targets and is the default behavior)",
        "example": "vehicle VehDriverAimAtCrosshairs( false )"
    },
    "2326": {
        "fuction_name": "EnumerateWeapons",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "weapon type": "The type of weapon to return(weapon or weaponfull)"
        },
        "optional_parameters": {},
        "category": "Weapon",
        "game": "t7",
        "client_or_server": "Both",
        "summary": "Return an array of weapon names for the weapons of weapon type in fastfile",
        "example": "a_weapons = EnumerateWeapons( \"weapon\" )"
    },
    "2327": {
        "fuction_name": "Missile_CreateAttractorEnt",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "The entity that is to be an attractor",
            "strength": "The strength of the attractor (maximum acceleration it can apply to a missile)",
            "affectdist": "The effective distance at which the missile can be affected.  The effect of the attractor falls off from <strength> to zero from the center to this distance away from the center."
        },
        "optional_parameters": {
            "affectAllProjectiles": "If set it will affect all projectiles inculding grenades and guided missiles.",
            "alert range": "If set it send notify when missile breaches range(but will not repulse)."
        },
        "category": "Weapon",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates a missile attractor at the origin of an entity",
        "example": "attractor = Missile_CreateAttractorEnt( enemy_chopper, 10000, 6000 )"
    },
    "2328": {
        "fuction_name": "Missile_CreateAttractorOrigin",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "The center of the attractor",
            "strength": "The strength of the attractor (maximum acceleration it can apply to a missile)",
            "affectDist": "The effective distance at which the missile can be affected.  The effect of the attractor falls off from <strength> to zero from the center to this distance away from the center."
        },
        "optional_parameters": {
            "affectAllProjectiles": "If set it will affect all projectiles inculding grenades and guided missiles.",
            "alert range": "If set it send notify when missile breaches range(but will not repulse)."
        },
        "category": "Weapon",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates a missile attractor at the given location",
        "example": "attractor = Missile_CreateAttractorOrigin( (100, 350, 10), 10000, 6000 )"
    },
    "2329": {
        "fuction_name": "Missile_CreateRepulsorEnt",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "entity": "The entity that is to be a repulsor",
            "strength": "The strength of the repulsor (maximum acceleration it can apply to a missile)",
            "affectDist": "The effective distance at which the missile can be affected.  The effect of the attractor falls off from <strength> to zero from the center to this distance away from the center."
        },
        "optional_parameters": {},
        "category": "Weapon",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates a missile repulsor at the origin of an entity",
        "example": "repulsor = Missile_CreateRepulsorEnt( enemy_chopper, 10000, 6000 )"
    },
    "2330": {
        "fuction_name": "Missile_CreateRepulsorOrigin",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "origin": "The center of the Repulsor",
            "strength": "The strength of the Repulsor (maximum acceleration it can apply to a missile)",
            "affectDist": "The effective distance at which the missile can be affected.  The effect of the attractor falls off from <strength> to zero from the center to this distance away from the center."
        },
        "optional_parameters": {},
        "category": "Weapon",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Creates a missile Repulsor at the given location",
        "example": "repulsor = Missile_CreateRepulsorOrigin( (100, 350, 10), 10000, 6000 )"
    },
    "2331": {
        "fuction_name": "Missile_DeleteAttractor",
        "return_type": "void",
        "called_by": null,
        "mandatory_parameters": {
            "attractor": "The attractor or repulsor"
        },
        "optional_parameters": {},
        "category": "Weapon",
        "game": "t7",
        "client_or_server": "Server",
        "summary": "Deletes a missile attractor or repulsor",
        "example": "Missile_DeleteAttractor( attractor )"
    }
}